<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EverLose</title><link>http://blog.everlose.com/</link><description></description><atom:link href="http://blog.everlose.com/feeds/mu-tou-lbj.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 28 Sep 2016 00:00:00 +0800</lastBuildDate><item><title>CentOS上部署Django</title><link>http://blog.everlose.com/deploy-django-on-centos.html</link><description>&lt;h3&gt;搭建Python环境&lt;/h3&gt;
&lt;p&gt;一般云服务（如阿里云）的CentOS系统默认的Python版本较低，还停留在2.6。如果是这样，首先需要搭建较高版本的Python环境。具体可以参见之前翻译的博文&lt;a href="http://blog.everlose.com/set-up-python-on-centos.html"&gt;在CentOS 6.4上设置Python2.7.6和3.3.3环境&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;依次执行以下命令：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y update  &lt;span class="c1"&gt;# 更新内置程序&lt;/span&gt;
yum groupinstall -y development  &lt;span class="c1"&gt;# 安装所需的development tools&lt;/span&gt;
yum install -y zlib-dev openssl-devel sqlite-devel bzip2-devel  &lt;span class="c1"&gt;# 安装附加包  &lt;/span&gt;
yum install xz-libs  &lt;span class="c1"&gt;# 安装XZ解压库(可选)&lt;/span&gt;

wget http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz  &lt;span class="c1"&gt;# 下载源码包 &lt;/span&gt;

&lt;span class="c1"&gt;# 解压源码包,分为两步  &lt;/span&gt;
xz -d Python-2.7.6.tar.xz  
tar -xvf Python-2.7.6.tar  

&lt;span class="c1"&gt;# 编译与安装,先进入源码目录  &lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; Python-2.7.6  
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local  
make  
make altinstall  

&lt;span class="c1"&gt;# 配置virtualenv虚拟环境  &lt;/span&gt;
wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz  
tar -xvf setuptools-1.4.2.tar.gz  
&lt;span class="nb"&gt;cd&lt;/span&gt; setuptools-1.4.2  
python2.7 setup.py install  
curl https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py &lt;span class="p"&gt;|&lt;/span&gt; python2.7 -  
pip install virtualenv  

&lt;span class="c1"&gt;# 创建项目所需的虚拟环境venv  &lt;/span&gt;
virtualenv venv --python&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which python2.7&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;# 修改.bashrc,在该系统用户登录之后自动激活虚拟环境。&lt;/span&gt;
&lt;span class="c1"&gt;# 在.bashrc下增加以下命令    &lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/venv/bin/activate  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装数据库MySQL&lt;/h3&gt;
&lt;p&gt;使用yum源直接安装的版本较低，一般需要安装较高版本（5.5及以上）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 添加yum源  &lt;/span&gt;
&lt;span class="c1"&gt;## Remi Dependency on CentOS 5 and Red Hat (RHEL) 5 ##&lt;/span&gt;
rpm -Uvh http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm

&lt;span class="c1"&gt;## CentOS 5 and Red Hat (RHEL) 5 ## &lt;/span&gt;
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm

rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm  

&lt;span class="c1"&gt;# 检查可用的MySQL版本  &lt;/span&gt;
yum --enablerepo&lt;span class="o"&gt;=&lt;/span&gt;remi,remi-test list mysql mysql-devel mysql-server  

&lt;span class="c1"&gt;# 安装MySQL  &lt;/span&gt;
yum --enablerepo&lt;span class="o"&gt;=&lt;/span&gt;remi,remi-test install mysql mysql-server  

&lt;span class="c1"&gt;# 修改/etc/my.conf,修改或者添加以下配置,支持unicode全字符(即支持emoji)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;client&lt;span class="o"&gt;]&lt;/span&gt;
default-character-set &lt;span class="o"&gt;=&lt;/span&gt; utf8mb4
&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;
character-set-server &lt;span class="o"&gt;=&lt;/span&gt; utf8mb4
collation-server &lt;span class="o"&gt;=&lt;/span&gt; utf8mb4_unicode_ci
default-storage-engine &lt;span class="o"&gt;=&lt;/span&gt; INNODB

&lt;span class="c1"&gt;# 启动MySQL  &lt;/span&gt;
service mysqld start  

&lt;span class="c1"&gt;# 检查配置是否正确&lt;/span&gt;
mysql -u root -p   &lt;span class="c1"&gt;# 回车，不需要输入密码，此时还未设置root密码&lt;/span&gt;
mysql&amp;gt; SHOW VARIABLES WHERE Variable_name LIKE &lt;span class="s1"&gt;&amp;#39;character\_set\_%&amp;#39;&lt;/span&gt; OR Variable_name LIKE &lt;span class="s1"&gt;&amp;#39;collation%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="c1"&gt;# 如果看到以下结果说明配置正确  &lt;/span&gt;
+--------------------------+--------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Variable_name            &lt;span class="p"&gt;|&lt;/span&gt; Value              &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------+--------------------+
&lt;span class="p"&gt;|&lt;/span&gt; character_set_client     &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; character_set_connection &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; character_set_database   &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; character_set_filesystem &lt;span class="p"&gt;|&lt;/span&gt; binary             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; character_set_results    &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; character_set_server     &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; character_set_system     &lt;span class="p"&gt;|&lt;/span&gt; utf8               &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; collation_connection     &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4_general_ci &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; collation_database       &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4_unicode_ci &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; collation_server         &lt;span class="p"&gt;|&lt;/span&gt; utf8mb4_unicode_ci &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------+--------------------+

&lt;span class="c1"&gt;# 查看用户信息  &lt;/span&gt;
mysql&amp;gt; SELECT user,host,password FROM mysql.user&lt;span class="p"&gt;;&lt;/span&gt;
+------+--------------+----------+
&lt;span class="p"&gt;|&lt;/span&gt; user &lt;span class="p"&gt;|&lt;/span&gt; host         &lt;span class="p"&gt;|&lt;/span&gt; password &lt;span class="p"&gt;|&lt;/span&gt;
+------+--------------+----------+
&lt;span class="p"&gt;|&lt;/span&gt; root &lt;span class="p"&gt;|&lt;/span&gt; localhost    &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; root &lt;span class="p"&gt;|&lt;/span&gt; iz2853tmsqfz &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; root &lt;span class="p"&gt;|&lt;/span&gt; 127.0.0.1    &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; localhost    &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; iz2853tmsqfz &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
+------+--------------+----------+

&lt;span class="c1"&gt;# 设置root用户密码  &lt;/span&gt;
mysqladmin -u root password &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;  

&lt;span class="c1"&gt;# 使用root用户登录后创建新用户  &lt;/span&gt;
mysql&amp;gt; CREATE USER &lt;span class="s1"&gt;&amp;#39;demouser&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span class="s1"&gt;&amp;#39;demopassword&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 授权  &lt;/span&gt;
mysql&amp;gt; GRANT ALL PRIVILEGES ON demodb.* to demouser@localhost&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt; FLUSH PRIVILEGES&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 使用新创建的用户登录后创建数据库  &lt;/span&gt;
mysql&amp;gt; CREATE DATABASE demodb&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;拉取项目代码并安装所需包&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安装数据库MySQL  &lt;/span&gt;
yum install mysql  

&lt;span class="c1"&gt;# 拉取项目代码(示例使用git),假设项目名为proj  &lt;/span&gt;
git clone 代码库地址  

&lt;span class="c1"&gt;# 安装requirements.txt中所有的包  &lt;/span&gt;
pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;注意&lt;/em&gt; 如果出现以下错误：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;_mysql.c:2654: error: &amp;#39;_mysql_ResultObject&amp;#39; has no member named &amp;#39;converter&amp;#39;
    _mysql.c:2654: error: initializer element is not constant
    _mysql.c:2654: error: (near initialization for &amp;#39;_mysql_ResultObject_memberlist[0].offset&amp;#39;)
    _mysql.c:2661: error: &amp;#39;_mysql_ResultObject&amp;#39; has no member named &amp;#39;has_next&amp;#39;
    _mysql.c:2661: error: initializer element is not constant
    _mysql.c:2661: error: (near initialization for &amp;#39;_mysql_ResultObject_memberlist[1].offset&amp;#39;)
    _mysql.c: In function &amp;#39;_mysql_ConnectionObject_getattro&amp;#39;:
    _mysql.c:2680: error: &amp;#39;_mysql_ConnectionObject&amp;#39; has no member named &amp;#39;open&amp;#39;
    error: command &amp;#39;gcc&amp;#39; failed with exit status 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一般上述错误可以使用&lt;code&gt;yum install mysql-devel&lt;/code&gt; 解决，但是由于这里添加了源来安装MySQL，所以版本会不正确，出现以下错误：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devel&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x86_64&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           &lt;span class="n"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;
           &lt;span class="n"&gt;Installed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x86_64&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;remi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remi&lt;/span&gt;
           &lt;span class="n"&gt;Available&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x86_64&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;
 &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;broken&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;around&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt;
 &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Va&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;nofiles&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;nodigest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决方法：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum --enablerepo=remi,remi-test install mysql-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置gunicorn&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# gunicorn_start.sh  &lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;DJANGODIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/your/project/
&lt;span class="nv"&gt;SOCKFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/gunicorn.sock
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;user
&lt;span class="nv"&gt;GROUP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;group
&lt;span class="nv"&gt;NUM_WORKERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;span class="nv"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;demo.settings
&lt;span class="nv"&gt;DJNAGO_WSGI_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;demo.wsgi

&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$D&lt;/span&gt;JANGODIR
&lt;span class="nb"&gt;source&lt;/span&gt; /path/to/your/venv/bin/activate
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$D&lt;/span&gt;JANGO_SETTINGS_MODULE
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$D&lt;/span&gt;JANGODIR:$PYTHONPATH

&lt;span class="nb"&gt;exec&lt;/span&gt; /path/to/your/venv/bin/gunicorn demo.wsgi:application &lt;span class="se"&gt;\&lt;/span&gt;
    --name $NAME &lt;span class="se"&gt;\&lt;/span&gt;
    --workers $NUM_WORKERS &lt;span class="se"&gt;\&lt;/span&gt;
    --bind&lt;span class="o"&gt;=&lt;/span&gt;unix:$SOCKFILE &lt;span class="se"&gt;\&lt;/span&gt;
    --log-level&lt;span class="o"&gt;=&lt;/span&gt;debug &lt;span class="se"&gt;\&lt;/span&gt;
    --log-file&lt;span class="o"&gt;=&lt;/span&gt;/path/to/logs/bootcamp_gunicorn.log
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置supervisor&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install supervisor

echo_supervisord_conf &amp;gt; /path/to/conf/supervisord.conf  

&lt;span class="c1"&gt;# 将以下配置加入supervisord.conf中  &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;program:demo&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sh /path/to/gunicorn_start.sh
&lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; user
&lt;span class="nv"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /path/to/logs/gunicorn_supervisor.log
&lt;span class="nv"&gt;redirect_stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8,LC_ALL&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8

&lt;span class="c1"&gt;# 启动supervisord&lt;/span&gt;
supervisord -c /path/to/supervisord.conf

&lt;span class="c1"&gt;# 重新加载配置&lt;/span&gt;
supervisorctl -c /path/to/supervisord.conf reload

&lt;span class="c1"&gt;# 重启程序  &lt;/span&gt;
supervisorctl -c /path/to/supervisord.conf restat demo  

&lt;span class="c1"&gt;# 查看程序运行状态  &lt;/span&gt;
supervisorctl -c /path/to/supervisord.conf status demo
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置Nginx&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安装Nginx  &lt;/span&gt;
yum install nginx

&lt;span class="c1"&gt;# /etc/nginx/conf.d/demo.conf文件中写入以下配置  &lt;/span&gt;
upstream demo_server &lt;span class="o"&gt;{&lt;/span&gt;
    server unix:/path/to/gunicorn.sock &lt;span class="nv"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;

      listen       8888&lt;span class="p"&gt;;&lt;/span&gt;
      server_name  example.com&lt;span class="p"&gt;;&lt;/span&gt;
      access_log   /path/to/logs/nginx/access.log&lt;span class="p"&gt;;&lt;/span&gt;
      error_log    /path/to/logs/nginx/error.log&lt;span class="p"&gt;;&lt;/span&gt;

      location  /static/ &lt;span class="o"&gt;{&lt;/span&gt;
          root /path/to/demo&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      location  / &lt;span class="o"&gt;{&lt;/span&gt;
          proxy_redirect        off&lt;span class="p"&gt;;&lt;/span&gt;
          proxy_set_header      Host             $host&lt;span class="p"&gt;;&lt;/span&gt;
          proxy_set_header      X-Real-IP        $remote_addr&lt;span class="p"&gt;;&lt;/span&gt;
          proxy_set_header      X-Forwarded-For  $proxy_add_x_forwarded_for&lt;span class="p"&gt;;&lt;/span&gt;
          client_max_body_size  10m&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;!-f $request_filename&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              proxy_pass http://demo_server&lt;span class="p"&gt;;&lt;/span&gt;
              break&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# 启动/重启Nginx&lt;/span&gt;
  /etc/init.d/nginx start&lt;span class="p"&gt;|&lt;/span&gt;restart

  &lt;span class="c1"&gt;# reload 配置  &lt;/span&gt;
  /etc/init.d/nginx reload
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数据表创建与静态文件处理&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建数据库  &lt;/span&gt;
mysql&amp;gt; create database demo&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# migrate  &lt;/span&gt;
python manage.py migrate  

&lt;span class="c1"&gt;# collectstatic&lt;/span&gt;
python manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Wed, 28 Sep 2016 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2016-09-28:deploy-django-on-centos.html</guid><category>Web</category></item><item><title>RESUME</title><link>http://blog.everlose.com/resume.html</link><description>&lt;p&gt;2012年大三末期走上『码农』之路，立志将技术路线走到底，直到现在未曾改变。也一直在寻找有技术追求，有挑战，有意思的公司，为互联网做出自己的贡献。  &lt;/p&gt;
&lt;h3&gt;工作经历&lt;/h3&gt;
&lt;p&gt;2015年7月 — 至今  华三通信技术公司  云计算开发  &lt;/p&gt;
&lt;p&gt;1、负责产品后端虚拟化开发，管理平台前端开发。&lt;br /&gt;
2、后端技术栈：Python、Django、DjangoREST、KVM、MySQL、Redis、Celery。&lt;br /&gt;
3、前端技术栈：AngularJS、Webpack、Gulp、Bootstrap、jQuery&lt;br /&gt;
4、学习并掌握了大公司的工作模式，进一步增强了沟通与团队协作能力，团队管理方面也积累了一些经验。虚拟化、网络、服务器管理等方面得到了加强与提高。  &lt;/p&gt;
&lt;p&gt;2014年4月 — 2015年7月  巴比特  全栈工程师  &lt;/p&gt;
&lt;p&gt;1、创业公司，负责公司所有项目的开发工作。&lt;br /&gt;
2、区块元项目， 技术栈：Python、Flask、MongoDB、Celery、Redis，与前端一起完成了整个网站的设计、开发、部署与维护。&lt;br /&gt;
3、基于Celery开发了队列系统，基于业务在其基础上做了定制开发，方便研发人员的使用与部署。&lt;br /&gt;
4、爬虫系统，爬取了微博、Twitter、GitHub、Coinmap、GoogleTrends等网站的爬取及后续处理分析工作，部分基于Scrapy。&lt;br /&gt;
5、深度了解了创业公司的工作方式，一个人负责所有项目，锻炼了技术选型、预研、项目评估、开发进度把握、问题的解决与处理等能力，综合能力得到了很大的提高。&lt;/p&gt;
&lt;p&gt;2012年6月 — 2014年4月  杭州先临科技  Web工程师  &lt;/p&gt;
&lt;p&gt;1、负责内部OA管理系统及公司网站。对内部需求进行收集、分析，并进行开发、优化与维护。&lt;br /&gt;
2、OA系统技术栈：Python、Django、NodeJS、PostgreSQL、jQuery、jQueryUI等。&lt;br /&gt;
3、公司主站以及一些宣传网站的开发。&lt;br /&gt;
4、完成了从学生到员工的转变，通过负责大量的的工作，很快使自己成为可以独挡一面的工程师。  &lt;/p&gt;
&lt;h3&gt;技术栈&lt;/h3&gt;
&lt;p&gt;Python：    ★★★★★  能编写高质量代码，熟悉Django、Flask、Tornado、Pyramid等Web框架及第三库的使用，也能根据需求编写业务所需模块。&lt;br /&gt;
MongoDB：   ★★★★ 折腾过大量数据，踩过很多坑。&lt;br /&gt;
MySQL：     ★★★★ 熟练使用，可进行查询优化。&lt;br /&gt;
PostgreSQL：★★★★ 熟练使用，可进行查询优化。&lt;br /&gt;
JavaScript：★★★★★ 可独立编写前端项目&lt;br /&gt;
AngularJS： ★★★★ 有实际项目经验&lt;br /&gt;
HTML&amp;amp;CSS：  ★★★★★  &lt;br /&gt;
Linux：     ★★★★★&lt;br /&gt;
GIT：       ★★★★★ &lt;br /&gt;
Java：      ★★★  &lt;br /&gt;
Go：        ★★★  &lt;/p&gt;
&lt;h3&gt;教育经历&lt;/h3&gt;
&lt;p&gt;2009年 — 2013年  安徽工业大学   本科   计算机科学与技术&lt;br /&gt;
英语水平：  CET-6    &lt;/p&gt;
&lt;h3&gt;期望工作&lt;/h3&gt;
&lt;p&gt;这些年的工作经历，中型公司 — 创业  — 大型公司，从各个方面积累与加强了技术能力与工作经验，可以胜任主力开发与项目管理工作。希望工作有足够的前景，有技术追求，想沉心在某一公司或领域不断深入，成长为标准的T型人才。  &lt;/p&gt;
&lt;h3&gt;自我评价&lt;/h3&gt;
&lt;p&gt;有良好的沟通能力、自学能力，能够独立解决问题。技术上不容含糊，不懈追求最佳解决方案。永远保持活力，不断挑战。爱折腾，爱Linux，爱Mac，爱互联网！相信努力与坚持不一定成功，但一定能对得起自己。    &lt;/p&gt;
&lt;h3&gt;联系方式&lt;/h3&gt;
&lt;p&gt;GitHub： https://github.com/mutoulbj&lt;br /&gt;
Email: flt0426@gmail.com&lt;br /&gt;
Phone: 15168259404&lt;br /&gt;
QQ: 393324321&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Wed, 13 Apr 2016 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2016-04-13:resume.html</guid><category>other</category></item><item><title>【译】测试Python 里的竞态条件</title><link>http://blog.everlose.com/python-race-condition.html</link><description>&lt;p&gt;&lt;a href="http://www.oreills.co.uk/2015/03/01/testing-race-conditions-in-python.html"&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;测试Python 里的竞态条件&lt;/h1&gt;
&lt;p&gt;不论何时，当有多于一个进程或者线程访问相同数据的时候，竞态条件都是一个危险的事情。本文探讨了发现竞态条件之后怎么去进行测试。  &lt;/p&gt;
&lt;h2&gt;Incrmt&lt;/h2&gt;
&lt;p&gt;（假设）你目前在一个只做一件事情并做的很好的热门初创企业Incrmt里工作。  &lt;/p&gt;
&lt;p&gt;你部署了一个全球的计数器和一个加号的标志。人们可以点击那个加号，然后计数器增加1。它非常简单且让人上瘾。这是未来一个了不起的事情。  &lt;/p&gt;
&lt;p&gt;投资者们都在登船旅行，但是你有了一个麻烦。  &lt;/p&gt;
&lt;h2&gt;竞态条件&lt;/h2&gt;
&lt;p&gt;在内测的时候，Abraham和Belinda太兴奋了，分别点击了加号按钮100次。你的服务器日志显示接收了200次请求，但是计数器却只显示173。有一些并没有被加上。  &lt;/p&gt;
&lt;p&gt;为了把”Incrmnt原来是Excrmnt”抛到脑后，你检查了以下代码。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# incrmnt.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;incremnt&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;new_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你的Web服务器使用了大量的进程来增加吞吐量，所以这个方法可能 同时再2个不同的线程中执行。如果在执行的时间线上你不够走运，下面的情况就会发生。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 线程1和线程2同一时间在两个不同的进程中执行  &lt;/span&gt;
&lt;span class="c1"&gt;# 为了方便展示把他们并排放在一起  &lt;/span&gt;
&lt;span class="c1"&gt;# 垂直方向用来展示在某个时间点是那条语句在运行  &lt;/span&gt;
&lt;span class="c1"&gt;# 线程 1                                                    # 线程 2  &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                                                                 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# get_count  return 0&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                                                                      &lt;span class="c1"&gt;# get_count return 0 again&lt;/span&gt;
                                                                      &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;new_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;# set_count called with 1&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                                                      &lt;span class="n"&gt;new_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                                                                      &lt;span class="c1"&gt;# set_count called with 1 again&lt;/span&gt;
                                                                      &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以，虽然&lt;code&gt;count&lt;/code&gt;应该是被增加了2次，实际上只增加了1。  &lt;/p&gt;
&lt;p&gt;你知道你能修复这个代码让它是线程安全的，但是在你做这些之前，你想要写个测试来证明竞态存在。  &lt;/p&gt;
&lt;h2&gt;重现竞态&lt;/h2&gt;
&lt;p&gt;尽可能接近得重现上面的情况是最理想的，关键的竞态是：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;get_count&lt;/code&gt;调用都必须在&lt;code&gt;set_count&lt;/code&gt;调用之前，这样&lt;code&gt;count&lt;/code&gt;在两个线程中才拥有同一个值。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;set_count&lt;/code&gt;在什么时候调用无所谓，只要他们都在另一个&lt;code&gt;get_count&lt;/code&gt;调用之后就行。  &lt;/p&gt;
&lt;p&gt;简单起见，来试着重现这个情况，让线程2在线程1的&lt;code&gt;get_count&lt;/code&gt;调用之后执行:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 线程 1                                                  # 线程 2&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# get_count returns 0&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                                                                &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                                                                    &lt;span class="c1"&gt;# get_count returns 0 again&lt;/span&gt;
                                                                    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                                                                    &lt;span class="c1"&gt;# set_count called with 1&lt;/span&gt;
                                                                    &lt;span class="n"&gt;new_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                                                                    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# set_count called with 1 again&lt;/span&gt;
    &lt;span class="n"&gt;new_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/before_after/"&gt;before_after&lt;/a&gt;库提供了一些功能可以帮助我们来重现这个情况。它能在方法的前面或者后面插入一些代码。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;before_after&lt;/code&gt;依赖&lt;a href="https://pypi.python.org/pypi/mock"&gt;mock&lt;/a&gt;库来获取方法。如果你对他们不熟悉的话建议阅读&lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;这些文档&lt;/a&gt;。其中重要的部分是&lt;a href="http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch"&gt;Where To Patch&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;我们想要在线程1调用了&lt;code&gt;get_count&lt;/code&gt;之后执行线程2，然后重新唤醒线程1继续执行。  &lt;/p&gt;
&lt;p&gt;可以编写以下测试:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_incrmnt.py  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;before_after&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;incrmnt&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestIncrmnt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unitest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_increment_race&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 在调用get_count之后，调用increment&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;before_after&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;incrmnt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# 调用increment产生竞态  &lt;/span&gt;
            &lt;span class="n"&gt;incrmnt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在第一次&lt;code&gt;get_count&lt;/code&gt;调用之后，我们使用了&lt;code&gt;before_after&lt;/code&gt;的&lt;code&gt;after&lt;/code&gt;上下文管理器来调用&lt;code&gt;increment&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;before_after&lt;/code&gt;默认只调用一次&lt;code&gt;after&lt;/code&gt;方法一次。这对大多数情况都是有用的，否则我们就需要清理栈了（&lt;code&gt;increment&lt;/code&gt;调用&lt;code&gt;get_count&lt;/code&gt;会循环再次调用&lt;code&gt;increment&lt;/code&gt;,这又会继续调用&lt;code&gt;get_count&lt;/code&gt;…）。  &lt;/p&gt;
&lt;p&gt;这个测试失败了，因为&lt;code&gt;count&lt;/code&gt;等于1而不是2.现在我们重现了竞态条件，接下来对它进行修复。  &lt;/p&gt;
&lt;h2&gt;减少竞态&lt;/h2&gt;
&lt;p&gt;我们使用一个简单的锁来解决这个问题，这样可以用&lt;code&gt;before_after&lt;/code&gt;来做一个更好的示例，另外&lt;code&gt;before_after&lt;/code&gt;对于多线程应用的测试并不好用。显然这不是个理想的解决方案，最好是在数据存储层使用原子操作来进行数据更新。  &lt;/p&gt;
&lt;p&gt;在&lt;code&gt;incrmnt.py&lt;/code&gt;中添加一个新方法:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# incrmnt.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;locking_increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_lock&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这保证了同一时间只有一个线程对counter进行读写操作。当一个线程试图获取已经被另一个线程占用的锁时，将会抛出&lt;code&gt;CouldNotLock&lt;/code&gt;异常。  &lt;/p&gt;
&lt;p&gt;现在可以添加以下测试:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_locking_increment_race&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;erroring_locking_increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# 再试图获取被另一线程占用的锁时触发CouldNotLock异常&lt;/span&gt;
        &lt;span class="c1"&gt;# 这里捕获这个异常，否则测试将会失败&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CouldNotLock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;incrmnt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locking_increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;before_after&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;incrmnt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;erroring_locking_increment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;incrmnt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locking_increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在在某个时间点只有一个线程能使计数器增长了。  &lt;/p&gt;
&lt;h2&gt;减轻竞态&lt;/h2&gt;
&lt;p&gt;这里还有一个问题，当两次请求碰撞的时候，有一个会被丢弃。为了解决这个问题，我们可以进行重试(使用像&lt;a href="http://funcy.readthedocs.org/en/stable/flow.html#retry"&gt;funcy retry&lt;/a&gt;这样的库实现起来非常简洁):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# incrmnt.py  &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retrying_locking_increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nd"&gt;@retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CouldNotLock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_increment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;locking_increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们需要比这个方法提供的结果更严苛的时候，可以把数据的增长交给数据库的原子更新或传输来做，不在应用层面进行处理。    &lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;Incrmnt现在从竞态中解脱了，人们可以一整天都开心地进行点击而不用担心计数的问题。  &lt;/p&gt;
&lt;p&gt;这是一个简单的例子，但是&lt;code&gt;before_after&lt;/code&gt;可以在更复杂的竞态中使用来保证我们的方法正确地处理了这种情况。可以对使用线程的环境进行测试和重现能让我们在正确处理竞态条件时更加地自信。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 29 Jun 2015 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2015-06-29:python-race-condition.html</guid><category>python</category></item><item><title>【译】为什么我喜欢Basic Auth</title><link>http://blog.everlose.com/why-i-love-basic-auth.html</link><description>&lt;p&gt;&lt;strong&gt;原文:&lt;/strong&gt;&lt;a href="http://www.rdegges.com/why-i-love-basic-auth/"&gt;Why I Love Basic Auth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我发现了近些年一个让我比较不爽的趋势，越来越多的API服务支持了OAuth，却慢慢地放弃了HTTP基本验证（HTTP Basic Authentication 也叫Basic Auth）的支持。  &lt;/p&gt;
&lt;p&gt;我作为一个：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用了多年的REST API服务  &lt;/li&gt;
&lt;li&gt;开发过很多的REST API服务  &lt;/li&gt;
&lt;li&gt;曾经创建并运营了一家提供REST API服务的公司  &lt;/li&gt;
&lt;li&gt;目前在一家大型面向开发者提供REST API的公司工作  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;的人，我不由自主地感觉到这是一件坏事情。  &lt;/p&gt;
&lt;p&gt;因为OAuth（现在非常流行）无论对API服务的开发者和使用者来说都是巨大的痛点。  &lt;/p&gt;
&lt;p&gt;OAuth复杂，难理解，广泛滥用，缺乏统一的实现。几乎可以肯定的说，它有它的用处，但是大多数情况下感觉是负担。  &lt;/p&gt;
&lt;p&gt;而Basic Auth简单，很好理解，并且从90年代开始每一种语言和框架都支持。  &lt;/p&gt;
&lt;h2&gt;Basic Auth是如何工作的&lt;/h2&gt;
&lt;p&gt;谈谈Basic Auth：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它拥有明确的&lt;a href="http://tools.ietf.org/html/rfc2617"&gt;规范&lt;/a&gt;。  &lt;/li&gt;
&lt;li&gt;从1996年开始广泛使用。  &lt;/li&gt;
&lt;li&gt;超级简单。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是一个简短的示例，展示了它是如何工作的。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你是个开发者。  &lt;/li&gt;
&lt;li&gt;你拥有API钥匙对：一个API Key ID 和一个API Key Secret。两者都是随机生成的字符串（一般是&lt;a href="http://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;uuid&lt;/a&gt;）  &lt;/li&gt;
&lt;li&gt;想要进行API服务的验证时，所有你需要做的只是将你的验证信息塞进&lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"&gt;HTTP Authorization Header&lt;/a&gt;里。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是使用命令&lt;a href="http://curl.haxx.se/"&gt;cURL&lt;/a&gt;来进行Basic Auth验证的例子：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl —user ‘xxx:yyy’ https://api.someapi.com/v1/blah
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面用Python来展示它的工作过程：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;api_key_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;api_key_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;yyy&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, auth=(api_key_id, api_key_secret))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果觉得这些还不够，下面是Node.js版本，也能很好的展示：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;api_key_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;api_key_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;yyy&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//api.someapi.com/v1/blah&amp;#39;,&lt;/span&gt;
    &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;api_key_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;pass&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;api_key_secret&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是不是很简单？  &lt;/p&gt;
&lt;p&gt;Basic Auth你所需要做的只是指定你的凭证（在较高的抽象级别）。仅此而已。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 是的，我知道在技术层面上比这复杂。它使用了&lt;code&gt;base64&lt;/code&gt;编码，这是HTTP Authorization的头格式，等等。但是因为这些对于本文不重要，为避免歧义我就不说了。  &lt;/p&gt;
&lt;p&gt;Basic Auth对开发者非常友好，因为它简单，直观，易用。  &lt;/p&gt;
&lt;p&gt;假设你正在集成一项API服务，所有你需要做的只是创建一个API钥匙对，然后开始创建请求。  &lt;/p&gt;
&lt;p&gt;如果你意外的泄露了你的钥匙对怎么办？这会带来风险嘛？好吧......这时候你只需要创建一个新的API钥匙对，添加进你应用的代码中，旧的钥匙对就没用了。  &lt;/p&gt;
&lt;p&gt;正确的使用时，Basic Auth对于加强REST API的安全性是一个很好的选择。  &lt;/p&gt;
&lt;h2&gt;简单&lt;/h2&gt;
&lt;p&gt;我最喜欢Basic Auth的就是简单。  &lt;/p&gt;
&lt;p&gt;不像OAuth一样，你不需要一个中间步骤来获取&lt;code&gt;access token&lt;/code&gt;，你只需要你的钥匙对。  &lt;/p&gt;
&lt;p&gt;对于开发效率来说，这是一个巨大的差异。  &lt;/p&gt;
&lt;p&gt;你不需要花大把的时间来弄明白你需要被授予什么范围，什么权限，设置重定向页面、web 服务，所有的这些只是将事情弄的复杂而已。你只需要把你的API钥匙对放进HTTP Authorization头和BAM里就行。  &lt;/p&gt;
&lt;p&gt;因为它非常简单，所以你能快速地完成大量的工作和测试。  &lt;/p&gt;
&lt;p&gt;同样，你不再需要担心像下面的这样的事：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;token过期。  &lt;/li&gt;
&lt;li&gt;提供者更改他们的实现。几乎每一个OAuth提供者都好多次地更改他们的实现，搞挂成千上万开发者的应用。  &lt;/li&gt;
&lt;li&gt;获取你数据的流程非常复杂。OAuth2有4种不同的授权方式，每一种都有不同的目的和不同的使用方式。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一次我使用像&lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;这样的服务时，都再次被提醒要是使用Basic Auth该多方便啊。能做到下面的这些真的很爽：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用命令行生成和销毁API keys。  &lt;/li&gt;
&lt;li&gt;不论我目前在开发什么都能简单的把API keys塞进去。  &lt;/li&gt;
&lt;li&gt;能使用命令行或者像&lt;a href="https://www.runscope.com/"&gt;Runscope&lt;/a&gt;这样的API工具来进行测试。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我只是喜欢。  &lt;/p&gt;
&lt;h2&gt;安全性&lt;/h2&gt;
&lt;p&gt;Basic Auth获得了不安全的坏名声，但是这不一定是正确的。  &lt;/p&gt;
&lt;p&gt;有非常多的事情你可以去做来使API服务（使用Basic Auth）尽可能地安全：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的请求都使用HTTPs。如果你没有使用SSL，那么不管你使用什么验证协议，都是不安全的。除非你使用HTTPs，否则你的所有证书在网络上都是明文传输的，可怕的事情。  &lt;/li&gt;
&lt;li&gt;使你的开发者们能生成尽可能多的密钥对。这样他们就能很方便地一个应用或服务使用一个密钥对。  &lt;/li&gt;
&lt;li&gt;让你的开发者在他们需要的时候能够撤销密钥对。例如：一个开发者意外地在Github上泄露了密钥对，他就能够撤销原来的密钥对，确保其他人也无法使用。  &lt;/li&gt;
&lt;li&gt;使用&lt;a href="http://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;uuids&lt;/a&gt;来随机生成密钥对。这确保了密钥对不会被猜中。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，开发者使用Basic Auth的时候，需要记住下面的事情：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全的保存你的API密钥对。如果你使用的服务支持Basic Auth，确保不做像把密钥对保存在Github repo中这样的事情。  &lt;/li&gt;
&lt;li&gt;不使用不是跑在HTTPs下的API服务—迟早会出事的。  &lt;/li&gt;
&lt;li&gt;每个应用使用不同的API密钥对。这样的话，如果你不小心泄露了一个密钥对，你只需要撤销那一个，更新基于那个密钥对的代码库就行了。从长远看来，这可以让你的生活过的更轻松。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你正寻找一个很好地处理了API密钥的例子，看看&lt;a href="http://aws.amazon.com/"&gt;AWS&lt;/a&gt;吧。  &lt;/p&gt;
&lt;h2&gt;普遍的支持&lt;/h2&gt;
&lt;p&gt;Basic Auth另一个很棒的一点是它只有一种实现，这意味着如何进行请求或者服务端组件都没有任何模糊不清的地方，它总是一样的。  &lt;/p&gt;
&lt;p&gt;它是这么工作的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你获得API Key ID和API Key Secret，然后把他们塞进一个使用冒号分隔的字符串中，比如：&lt;code&gt;’xxx:yyy’&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;然后在前面加上单词&lt;code&gt;’Basic ‘&lt;/code&gt;，就变成了：&lt;code&gt;’Basic xxx:yyy’&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;然后将API key的一部分进行&lt;code&gt;base64&lt;/code&gt;转码，最终得到：&lt;code&gt;’Basic eHh4Onl5eQ==‘&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;最后，在创建HTTP请求的时候将这个值设为HTTP Authorization头部。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你的web服务器接收到请求之后：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base64&lt;/code&gt;解码头部值。  &lt;/li&gt;
&lt;li&gt;根据冒号分割字符串。  &lt;/li&gt;
&lt;li&gt;左边部分是API Key ID，右边部分是API Key Secret。  &lt;/li&gt;
&lt;li&gt;服务器进行验证，然后要么通过请求，要么返回&lt;code&gt;HTTP 401 UNAUTHORIZED&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basic Auth没有任何歧义。这就意味着每一种编程语言都有一流的支持，并且对开发者和使用者都很容易找到可信赖的库。  &lt;/p&gt;
&lt;h2&gt;我的期望&lt;/h2&gt;
&lt;p&gt;我的期望就是，在OAuth继续流行的同时，开发者尽最大的可能继续支持Basic Auth。  &lt;/p&gt;
&lt;p&gt;这不仅仅让我作为开发者更加的简单，也更加的有意思。  &lt;/p&gt;
&lt;p&gt;对任何相信他们开发人员的API服务来说，支持Basic Auth绝对没错。  &lt;/p&gt;
&lt;p&gt;此外，甚至对于那些不相信他们的开发者的服务—也就是像Google，Facebook，Fitbit等第三方服务—支持Basic Auth依然是不错的想法。最起码，可以不用进入OAuth的圈子就能授予他们的用户更实用的获取他们自己的数据的权力。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE：&lt;/strong&gt;我意识到这会是个多少会引起争议的话题。我不再继续写关于这篇文章的东西，会直接丢掉他们，因为他们的范围已经超出太多了。后面我计划写更多文章来讨论关于OAuth和Basic Auth的各式各样的坑，为我的观点提供更深入的技术原因。  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS&lt;/em&gt;: 看到这篇文章，感触颇深。OAuth和Basic Auth应该是各有用处。但是原文作者吐槽的也不无道理。在使用了几次国内的OAuth服务之后，真是心好累。应用审核，调试，并且各种OAuth的认证过程又有着细微的不同，比如微博、QQ、人人等，基本都有区别。调试更是坑了。不管如何，读完这篇文章，对于Basic Auth还是能增进不少了解的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Wed, 25 Mar 2015 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2015-03-25:why-i-love-basic-auth.html</guid><category>Auth</category></item><item><title>在CentOS 6.4上设置Python 2.7.6和3.3.3环境</title><link>http://blog.everlose.com/set-up-python-on-centos.html</link><description>&lt;p&gt;&lt;code&gt;写在前面&lt;/code&gt;: 虽然我也认为目前使用Ubuntu用作服务器系统不存在任何问题,但是很多时候基于安全性与稳定性考虑还是难免会选择红帽系列。更多时候作为小码农也没有权力做技术决策吧[无奈状]。话说回来,感觉难受只是因为不熟悉,熟悉也就好了。作为Ubuntu党,这些天一直在与CentOS打交道,一通折腾下来,畅快很多。于是想写篇博客记录,却发现Digital Ocean上的一篇博文写的不能再好了(Digital Ocean上的文章都是精品)。所以,还是直接翻译吧。&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-python-2-7-6-and-3-3-3-on-centos-6-4"&gt;原文链接&lt;/a&gt;。  &lt;/p&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;为了让应用在特定的环境中运行,管理服务器常常是作为开发者的责任之一。当面临选择操作系统时(尤其是生产环境),基于安全等方面的考虑,CentOS会是呼声最高的操作系统之一。  &lt;/p&gt;
&lt;p&gt;然而,当你开始使用CentOS时就会傻眼了,CentOS内置的Python版本还是2.6(甚至2.4.3),这用于应用显然是不合适的。&lt;code&gt;注:由于Linux系统很多方面都依赖Python,所以一般是不能直接替换版本的&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;这篇文章将会讲述如何下载和设置Python(2.7.6和3.3.3)而不破坏内置的2.6(或2.4)版本的Python。这非常重要,因为一些像YUM等一些系统工具是依赖内置版本的。同时将安装&lt;code&gt;pip&lt;/code&gt;和&lt;code&gt;virualenv&lt;/code&gt;这两个非常流行的Python组件。  &lt;/p&gt;
&lt;p&gt;读完这篇文章,你将能同时使用任意版本的Python,创建虚拟环境以及为任意版本的Python下载和管理开发包。  &lt;/p&gt;
&lt;h2&gt;CentOS及它的设计理念&lt;/h2&gt;
&lt;p&gt;开始安装之前,先来说说CentOS。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么CentOS使用旧版本的应用?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CentOS是源于RHEL(Red Hat Enterprise Linux)的一个社区发行版。而RHEL是面向商业用户的,因此需要保证长期的支持和稳定性。  &lt;/p&gt;
&lt;p&gt;因此,追求系统的稳定性是最重要的原因,所有的软件都是通过了测试,更加稳定的版本。这背后的哲学就是:&lt;code&gt;如果没有崩溃,不要去修复。(if it ain't broke,don't fix it)&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么开发版的库和应用需要另外安装并与内置版本共存?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认的CentOS版本身并不带有很多的工具,而那些内置的工具往往是系统依赖的(如:YUM)。如果需要任何时候都保持系统的稳定性,不破坏系统的任何东西,在改动他们的时候就需要格外的小心了。  &lt;/p&gt;
&lt;p&gt;不要认为系统发行版中的工具都可以为你所用而养成按照自己的需要进行设置的习惯。  &lt;/p&gt;
&lt;p&gt;使用这篇简单易用的说明,你将可以使用任意版本的Python,同时你也能从中学会如何安装其他应用(使用源码包)。  &lt;/p&gt;
&lt;h2&gt;系统准备,安装Python&lt;/h2&gt;
&lt;p&gt;像其他的程序一样,在CentOS中安装Python需要简单的几个步骤:更新系统,获取所需版本的Python,进行设置。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;提示&lt;/code&gt;: 你可以在Python的&lt;a href="http://www.python.org/download/releases/"&gt;发行页面&lt;/a&gt;中查看和选择你所需要的版本,使用本教程你可以安装其中任意版本或所有版本。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;注&lt;/code&gt;: 本教程适用于CentOS 6.5、5.8以及6.4版本。  &lt;/p&gt;
&lt;h2&gt;更新内置CentOS应用&lt;/h2&gt;
&lt;p&gt;开始安装之前,确保已经将内置的应用升级到最新的可用版本。&lt;br /&gt;
使用以下命令即可进行升级:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum -y update
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;系统准备&lt;/h2&gt;
&lt;p&gt;CentOS是简洁的,甚至太简洁了也不为过。这就意味着很多你想使用的应用和工具默认都没有安装。  &lt;/p&gt;
&lt;p&gt;这是设计哲学决定的,我们需要一些库和工具(比如:development [related] tools)默认都没有在发行版中安装。因此,再我们继续下一步之前需要先下载和安装他们。  &lt;/p&gt;
&lt;p&gt;使用包管理工具&lt;code&gt;yum&lt;/code&gt;我们有两种方法在系统中安装这些工具:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择1&lt;/strong&gt;(不推荐)一个个的下载和安装这些工具(如:make,gcc等)。这样很可能再安装其中一个工具的时候发现它依赖另一个库或者工具,这时会抛出错误,而你不得不回头重新下载和安装。  &lt;/p&gt;
&lt;p&gt;正确和推荐的方法是&lt;strong&gt;选择2&lt;/strong&gt;,使用简单的yum命令一次性安装所有的软件组。  &lt;/p&gt;
&lt;h2&gt;YUM Software Group&lt;/h2&gt;
&lt;p&gt;yum的软件组是由一些常用的工具包组成的,只需要知道软件组的名称就能使用一个命令就能同时安装和执行所有的软件。甚至可以一次性同时下载和安装多个软件组。  &lt;/p&gt;
&lt;p&gt;我们现在所需要的软件组就是&lt;code&gt;Development Tools&lt;/code&gt;。  &lt;/p&gt;
&lt;h2&gt;怎样使用YUM在CentOS中安装Development Tools&lt;/h2&gt;
&lt;p&gt;使用下面的命令安装所需的development tools:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum groupinstall -y development
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum groupinstall -y &lt;span class="s1"&gt;&amp;#39;development tools&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;注&lt;/code&gt;:一些包在旧版本的CentOS中不能正常工作。  &lt;/p&gt;
&lt;p&gt;安装一些附加的包:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y zlib-dev openssl-devel sqlite-devel bzip2-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;提示&lt;/code&gt;:以上这些附加的包虽然是可选的,但是在大部分的任务中它们都是很常用的,或者以后会用到。除非你使用其他高级的方法进行了安装,否则Python在编译的过程中将不能链接他们,这样在使用过程中可能会出现一些问题。  &lt;/p&gt;
&lt;h2&gt;源码安装Python&lt;/h2&gt;
&lt;p&gt;在系统中设置Python需要以下3个步骤和4个工具:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下载&lt;/strong&gt; 下载源码压缩包(wget）  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解压&lt;/strong&gt; 解压缩安装包(tar)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置&lt;/strong&gt; 和 &lt;strong&gt;构建&lt;/strong&gt; (autoconf(configure)/make)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;GNU wget&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;GNU的wget工具可以使用多种协议(HTTP,FTP)下载文件。尽管之前旧版本的CentOS都缺失,但是现在是自带的工具了。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用示例: wget &lt;span class="o"&gt;[&lt;/span&gt;URL&lt;span class="o"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;GNU Tar&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;GNU的Tar工具是基本的压缩文件和解压缩的工具.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用示例: tar &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;argments&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;GNU autoconf and GNU make&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;autoconf和make是两个不同的工具,常一起使用来进行软件的编译与安装。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用./configure&lt;/strong&gt;在安装前构建源码  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 make&lt;/strong&gt;进行库链接工作  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 make install&lt;/strong&gt; 安装软件  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;下载,构建(编译),安装Python&lt;/h2&gt;
&lt;p&gt;本节将所有的介绍都可以换成你所需的Python版本。完成之后你将能同时使用多个版本的Python,只是有时候你需要明确指出你所使用的版本,如使用python2.7或者python3.3来代替默认的python命令。  &lt;/p&gt;
&lt;h4&gt;下载源码压缩包&lt;/h4&gt;
&lt;p&gt;使用wget从网上下载所需的安装包,这里使用&lt;code&gt;2.7.6&lt;/code&gt;版本。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.3.3版本: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://www.python.org/ftp/python/3.3.3/Python-3.3.3.tar.xz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(可选步骤):&lt;code&gt;xz&lt;/code&gt;工具:可以看出这里的压缩包是使用&lt;code&gt;XZ&lt;/code&gt;库进行压缩的,你的系统中也许不包括这个工具,如果没有可以使用下面的命令进行安装:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install xz-libs
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;解压源码包&lt;/h4&gt;
&lt;p&gt;这里的解压的包括两个步骤:先解压&lt;code&gt;xz&lt;/code&gt;包,再解压&lt;code&gt;tar&lt;/code&gt;包。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xz -d Python-2.7.6.tar.xz

tar -xvf Python-2.7.6.tar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.3.3版本示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xz -d Python-3.3.3.tar.xz
tar -xvf Python-3.3.3.tar
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;编译与安装&lt;/h4&gt;
&lt;p&gt;在构建源码之前需要确保所有的依赖和工具都已经准备好了。构建过程是自动的。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 进入源码包目录&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; Python-2.7.6

&lt;span class="c1"&gt;# 开始构建之前指定安装的目录&lt;/span&gt;
&lt;span class="c1"&gt;# 默认会被安装进 /usr/local目录&lt;/span&gt;
&lt;span class="c1"&gt;# 可以使用--prefix参数来进行指定&lt;/span&gt;
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.3.3版本示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; Python-3.3.3
./configure
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为我们已经提前下载了所需的工具和应用,所以这个过程将顺利地自动执行。当完成的时候就可以进入下一步:&lt;em&gt;构建与安装&lt;/em&gt;  &lt;/p&gt;
&lt;h4&gt;构建与安装&lt;/h4&gt;
&lt;p&gt;一般我们应该使用&lt;code&gt;make install&lt;/code&gt;来进行安装,但是为了不覆盖系统默认的版本,我们使用&lt;code&gt;make altinstall&lt;/code&gt;。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 构建源码&lt;/span&gt;
&lt;span class="c1"&gt;# 将持续一段时间&lt;/span&gt;
make

&lt;span class="c1"&gt;# 安装&lt;/span&gt;
make altinstall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.3.3版本示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; make altinstall   &lt;span class="c1"&gt;# 两个命令可以合为一个&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;(可选步骤)将新版本Python目录添加进PATH&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你是完全按照本教程进行操作的,那可以跳过本部分内容。如果你选择了不是/usr/local的目录来安装Python,就需要使用这部分内容来避免每次使用新安装的Python时都输入可执行命令的全路径。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在安装完成之后,我们能够使用全路径来使用可执行的二进制文件,但是只有该版本Python的二进制可执行文件已经添加进了PATH变量之后才能在任意位置使用该可执行文件。   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# example: export PATH=&amp;quot;[/path/to/installation]:$PATH&amp;quot;  &lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/bin:&lt;/span&gt;$&lt;span class="s2"&gt;PATH&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;设置基本的Python组件pip和virtualenv&lt;/h2&gt;
&lt;p&gt;安装完了Python,现在可以来完成最后的进行部署应用的生产环境了。我们需要设置两个常用的Python组件:&lt;code&gt;pip&lt;/code&gt;包管理工具和&lt;code&gt;virtualenv&lt;/code&gt;虚拟环境管理工具。  &lt;/p&gt;
&lt;p&gt;下面这篇文章详细地介绍了这两个工具&lt;a href="https://www.digitalocean.com/community/articles/common-python-tools-using-virtualenv-installing-with-pip-and-managing-packages"&gt; Common Python Tools: Using virtualenv, Installing with Pip, and Managing Packages&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;使用新的Python来安装pip&lt;/h4&gt;
&lt;p&gt;安装&lt;code&gt;pip&lt;/code&gt;之前,需要安装它唯一的依赖:&lt;code&gt;setuptools&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;执行以下命令即可安装Pythoon2.7.6的pip:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 使用wget下载&lt;/span&gt;
wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz

&lt;span class="c1"&gt;# 解压&lt;/span&gt;
tar -xvf setuptools-1.4.2.tar.gz

&lt;span class="c1"&gt;# 进入目录&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; setuptools-1.4.2

&lt;span class="c1"&gt;# 使用刚安装的Python安装&lt;/span&gt;
python2.7 setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;下载pip文件,使用Python2.7进行安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py &lt;span class="p"&gt;|&lt;/span&gt; python2.7 -
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装virtualenv&lt;/h4&gt;
&lt;p&gt;现在已经安装好了pip,就可以使用它来安装virtualenv了。  &lt;/p&gt;
&lt;p&gt;执行下面的命令下载和安装virtualenv:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;以上,就完成了所有的工作。在实际的操作中我发现,目前CentOS6的新版,在编译安装Python时不使用&lt;code&gt;make altinstall&lt;/code&gt;而使用&lt;code&gt;make install&lt;/code&gt;不会出现任何问题,这时,使用&lt;code&gt;python&lt;/code&gt;命令可以进入新安装版本的交互环境,而yum不会出现异常,这倒是个不错的改进。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 01 Nov 2014 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2014-11-01:set-up-python-on-centos.html</guid><category>centos</category></item><item><title>Mac下使用Homebrew安装MySql</title><link>http://blog.everlose.com/mac-homebrew-mysql.html</link><description>&lt;p&gt;Mac下使用Homebrew安装MySql  &lt;/p&gt;
&lt;p&gt;首先需要保证安装了Homebrew。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装MySql  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;$ brew install mysql&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置MySql开机启动  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/Library/LaunchAgents    &lt;span class="c1"&gt;# 首先确认该目录是否存在，若已经存在不用执行本命令  &lt;/span&gt;
$ ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents  
$ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;启动MySql服务  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mysql.server start  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;错误修复&lt;br /&gt;
如果在启动过程中出现如下错误：&lt;code&gt;ERROR! The server quit without updating PID file&lt;/code&gt; ，使用以下方法修复。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chmod -R &lt;span class="m"&gt;755&lt;/span&gt; /usr/local/var/mysql
$ rm -Rf /usr/local/var/mysql/Your-Machine-Name.local.err
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注:将&lt;code&gt;Your-Machine-Name&lt;/code&gt;替换为机器名称。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySql安全性设置  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mysql_secure_installation

Set root password? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; Y
Remove anonymous users? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; Y
Disallow root login remotely? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; Y
Remove &lt;span class="nb"&gt;test&lt;/span&gt; database and access to it? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; Y
Reload privilege tables now? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; Y  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;使用Homebrew卸载MySql  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew remove mysql
$ brew cleanup
$ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
$ rm -Rf ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist  
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sun, 03 Aug 2014 19:51:00 +0800</pubDate><guid>tag:blog.everlose.com,2014-08-03:mac-homebrew-mysql.html</guid><category>mysql</category><category>homebrew</category></item><item><title>不要让别人告诉你是谁</title><link>http://blog.everlose.com/own-my-way.html</link><description>&lt;p&gt;有标准衡量的东西会让人很容易获得安全感。跑步有时间，考试有分数，尺子在那，把自己甩过去，坐标就出来了。除了人心，任何事情都能靠坚持无限靠近甚至达到自己的目标。&lt;/p&gt;
&lt;p&gt;可是，一旦找不到那标尺，迷茫就无法避免。如果恰巧还遇上自己没有天赋、完全不了解甚至厌恶的职业，自卑也接踵而来。没有自信， 便对一切事务失去判断和正确的认知。人云亦云，每遇到一个人灌输思想就无条件的接收。多遇到几个人，灌输了完全相悖的思想，然后开始挣扎却无从判断对错。当然，一切问题都有解决的方法。自己去实践。&lt;/p&gt;
&lt;p&gt;我是幸运的，初入职场遇到很好的主管，有阅历、有技术、有独立思想。近2年的时间，获益良多。但是，自己的道路，自己的思想是没有任何人可以代替的。是否适合一个职业，是否适合一条道路，最切肤的感受只有自己。&lt;/p&gt;
&lt;p&gt;最初的公司是非常正式的职场，在那的每一天都在成长。而一年多之后，莫名其妙的每天无精打采。这些时间，接触的东西多了，业余玩的东西多了，潜意识里已经开始明白我喜欢做什么，而我并不自知。只告诉自己， 我还是菜鸟，身边的同事都比我强，我是最差的。加上嘴笨，无法表达自己。直接后果就是工作效率大打折扣，非常容易分心，情绪一跑就是一整天。感谢当时的主管，最终找我谈话。我心里清楚，公司高层有施压了，是到了我走人的时候。然后，我走了。那晚他跟我说了很多，一切的分析都很有道理，却让我彻底开始怀疑自己。离职那些天，天天在家想，我到底适合什么，该怎么走接下来的路。&lt;/p&gt;
&lt;p&gt;其实很简单，不用考虑适合不适合，是不是马上能靠自己的职业获得比较可观的回报，这些都不考虑。换个完全相反的的思路，不干自己现在的事情，还能做什么？想做什么？对我来说，很简单了。除了编码，我其他的什么都不会，也想不起来想做什么。这样，答案就很明显了。如果，还有其他很多能做的，有很多其他想做的，那也好办，直接去干吧。至少年轻。&lt;/p&gt;
&lt;p&gt;之后，我还是选择了编码的道路。而有了之前的工作经验，业余时间的不断学习，即使都不是很扎实，但找到一份工作还算顺利。好吧，其实是进入了另一个更大的坑。&lt;/p&gt;
&lt;p&gt;中间有个插曲，找工作的时候，获得了好几个offer，最终我居然选择了一个薪水最低，工作时间最长，而技术要求不高的公司。几天时候，对自己的选择深感后悔。事情总无绝人之路，东方没亮，太阳可能真的从西边升起来了。工作不是很如意，却来到了技术氛围很强的区域。周边创业团队很多，语言选择还都是与自己相符的python。&lt;/p&gt;
&lt;p&gt;然后事情也就来了。面对更好的机会，是选择离开还是坚持？多么简单的问题，对我来说却成了天大的难事。考虑的太多，只能给自己带来乱七八糟的负担。傻逼兮兮的好多天心绪不宁，身体状态也变的极差。借助周末出去跑了一趟，终于做出了决定。其实多大个事，忠于自己就行了。&lt;/p&gt;
&lt;p&gt;前段时间有句话很流行，好人谈钱，坏人谈理想。这话有道理，也很极端，而在没有其他条件的时候，这句话是完全可以用作准则的。而码农一般都会有技术梦想与技术追求，所以，技术和兴趣还是最关键的因素。&lt;/p&gt;
&lt;p&gt;初入职场，对未来完全未知，对自己不够自信，受不住老手们的一句句的“忽悠”，是大多数人的通病。而时间会告诉我们一切，我们的心情会告诉我们一切。找到自己，认识自己，不要让别人告诉你是谁。是这几个月摸打滚爬的体会。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Thu, 31 Jul 2014 21:42:00 +0800</pubDate><guid>tag:blog.everlose.com,2014-07-31:own-my-way.html</guid><category>momeries</category></item><item><title>老头与狗狗</title><link>http://blog.everlose.com/old-man-and-dogs.html</link><description>&lt;p&gt;老头不让再养狗是有原因的。他的理由是怕狗掉毛，难得打扫。家里装修过，冠冕堂皇的理由。一年都很少拿起拖把的家伙说起这话怎能让我信服，可惜妈妈还是听话了。作为抵抗，养了一只小白兔。  &lt;/p&gt;
&lt;p&gt;在我看来，老头一定是因为再也无法承受狗狗离开的现实，有2只直接命丧他手，一定心存愧疚。  &lt;/p&gt;
&lt;p&gt;家里先后养过好几条狗，就属老头跟他们最亲。每天收工回到家，30分钟内别想找老头做任何事情，任何人也叫不走他。这半个小时是完全属于他和狗狗的。狗狗在他面前总是无比放肆，趴他身上，拍他，来回跑逗他。6成时间完全是狗狗在玩弄老头。而老头也不是省油的灯，捏狗狗，让狗狗练习2条腿走路，折起耳朵，握住嘴巴，无所不用其极，画面美的无法直视。他们俩像打了兴奋剂一样闹个没完，直到妈妈出面严声呵斥，才悻悻而散。狗狗通常难以迅速从疯狂的状态中抽离，这时就会挨妈妈几下“揍”了。老头看着，哈哈笑几声后开始洗手准备吃饭。  &lt;/p&gt;
&lt;p&gt;狗狗只会在老头面前无比放肆，主动趴到老头的身上。妈妈那它可不敢，我想玩的时候也得先招呼它才行。就这么总想跟狗狗腻在一起的家伙，居然会嫌弃掉的那几根狗毛？鬼才信。老头太爱他们了，出去吃饭，总不顾一切的想方设法打包一堆剩饭菜带给狗狗。我小时候，爸爸从外回来都见不着带棒棒糖的。最后一只狗狗却因此而丧命，让老头很是悲伤。同样一次饭局之后，老头看见有一整条鱼没动过，便照例带回了家。到家立马给狗狗吃，那肥狗太狠，整个吞下，悲剧发生。鱼刺直接扎破食道，老头救治不及，就这样，那条狗狗离开了。  &lt;/p&gt;
&lt;p&gt;有过一只狗狗在家生过宝宝。发现狗狗要生了的人自然还是老头，发现迹象后，欣喜无比。立刻开工给狗狗造了一个舒适的产房，然后站在一边守着，直到2个宝宝顺利出生。那天我放学回到家，老头立马告诉了我这个喜讯，那开心的样子，简直了。我无法控制的直接映射到我他见我出生时的模样。  &lt;/p&gt;
&lt;p&gt;那段时间，老头常常“失踪”。在我遍寻不着的时候，妈妈就会告诉我，去狗窝看看吧。到了狗窝前，我只能看到老头的屁股，上身全钻进狗窝了，一看能看半小时！！等俩小宝宝稍大，老头会将他们从狗窝抱出，放在地上，喋喋不休的跟他们说话，教育他们一些作为狗的生存之道。特么的，跟我都没说过那么多好嘛！狗宝宝一天天长大，老头开始发愁了。跟我一起央求妈妈将他们都留下，谈判的结果不算完全失败，妈妈同意留下一只。老头取舍的时候决定很快，留下了小男生。老头有俩儿子，挑起狗狗来还是挑了个男生啊。我问原因，他说因为那小男生胖乎乎的更可爱。  &lt;/p&gt;
&lt;p&gt;他的朋友来挑狗的时候，一眼选中了爸爸预留下的小男生。老爸赶忙说，那只说什么也不行，他已经留下了的。哈哈，这个时候谈什么友情，与他跟狗狗的感情相比完全不堪一击。  &lt;/p&gt;
&lt;p&gt;在他喂鱼将狗狗喂死之后，家里还养过一条。非常的乖巧可爱。从不栓它，但它在老头和妈妈不在的时候连前院都不去，一直乖乖待在小窝里。只在家里有人的时候才出来玩耍。并且一直都在一楼玩耍，从来不上2楼。因为家中2楼出现了老鼠，妈妈买了鼠药放在一个房间。有一天妈妈在去那个房间的时候，小乖狗狗居然跟着去了。等妈妈发现，小狗狗已经吃完了所有的鼠药。妈妈赶紧抢救，最终还是无济于事。  &lt;/p&gt;
&lt;p&gt;狗狗离开后，后事都是老头处理。每次都能感受到他内心那种心痛，从他抽烟的频率很容易能感受出来。一段时间内，我知道他都难以从那种状态中抽离，每天回到家没有了狗狗的迎接，没有狗狗陪他一起犯二。所以，从那之后，他不再允许家里养狗狗，不论妈妈带给他看的狗狗多么的可爱，多么的好看，他都会说不行，然后转身开始忙自己的事情。老头的内心，比我们都更柔软。  &lt;/p&gt;
&lt;p&gt;妈妈最终妥协，现在养了一只小白兔，电话告诉我，在喊小白兔名字的时候，它都会竖起耳朵蠢蠢的望着你；买胡萝卜的时候也再也不嫌贵了。我都不用想，跟小白兔玩的最热乎的，还是老头！  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sun, 06 Jul 2014 12:50:00 +0800</pubDate><guid>tag:blog.everlose.com,2014-07-06:old-man-and-dogs.html</guid><category>memories</category></item><item><title>明天又是一个什么天</title><link>http://blog.everlose.com/what-is-the-day-tomorrow.html</link><description>&lt;p&gt;半个月，一直在到处跑。跑的我精疲力竭，绕了一圈，回到杭城。终于在走进这个小窝之后，倒在床上，再也睁不开眼。还算争气的身体，终于是没有出现一点问题，一杯咖啡过后，还能坐下安静的敲打键盘。    &lt;/p&gt;
&lt;p&gt;明天，会在这座陌生又熟悉的城市再找一个小窝，再次开始我的生活。做这个决定，没有2年前那么坚决。一度开始迷惑我到底需要什么，金钱开始有了莫大的诱惑力。纠结的时间那么长，而决定只用了那么几秒，然后是这么地坚定。有人说，这是星座决定的，去它的星座。  &lt;/p&gt;
&lt;p&gt;有很多理由让我离开，或许能够拥有更好的生活。而留下的理由只有一个，烂在我心里。告诉我，每年多个几万人民币有什么用处？我可以再买个mbp，换个手机，再换个平板，买个超大的屏幕？是的，我自身就这么点追求。我依然不知道明天会是一个什么天。在我想说话的时候，是不是可以有人帮我说。   &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上面都在扯淡。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"有些爱情像指甲,有些却像牙齿。" &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很早因为这篇《指甲牙齿》认识李碧华，那段日子沉迷她的文字，一口气读了很多。一度认为我对她已经很熟悉。10多年过去了，今天听到她的歌，我坚定的认为一定是两个人。Google之后才知道我错了，他们就是同一人。瞬间意识到我目前最大的问题。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;很多东西以为我自己很了解，其实却都只是皮毛，自己还傻逼一样的坚定不移的自以为是。 
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;其实我要说的是技术。&lt;br /&gt;
前2天回到学校，老师问我有想过我现在是在写代码吗？&lt;br /&gt;
“完全没有想过”。没有任何思考，我脱口而出。是的，怎么可能想过。我不知道，有多少人最终是走的是自己而是理想中的道路，反正我没有。但我觉得我现在很好。在技术上我一点不牛，合格甚至是我的目标。  &lt;/p&gt;
&lt;p&gt;想知道的太多了，折腾的太多了，感兴趣的太多了！但是，多么痛的但是，我深入的太少。&lt;br /&gt;
什么东西，我都只知皮毛，除了扯淡，还是只能用来扯淡！当得到了较高薪水的工作时，一点也不兴奋，只有担心。Hold不住是这个时代最大的痛，不论是工作，生活，还是TMD感情。  &lt;/p&gt;
&lt;p&gt;还好，有人的存在，让我可以坚定的选择留在这个我开始的地方；还好，这个地方有能让我生存的条件；还好，这个地方会有你们的存在，你的存在。一觉过后，我也可以听着《时间都去哪儿了》仔细回想我的时间都去哪儿了。最重要的，居然想明白了，我以后时间要去哪儿了。    &lt;/p&gt;
&lt;p&gt;明天又是一个什么天？反正我不再认为Everyday is a lame！  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 05 Apr 2014 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2014-04-05:what-is-the-day-tomorrow.html</guid><category>memories</category></item><item><title>没有别离,成长何附</title><link>http://blog.everlose.com/leave-growth.html</link><description>&lt;blockquote&gt;
&lt;p&gt;没有别离，成长将无所附丽  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是很早我一直记得的话，那时我才10几岁，没经历过别离，更不知什么是别离。而这句话依然深深印入我脑海。  &lt;/p&gt;
&lt;p&gt;那时说别离，只能想到爷爷的遗体推进火葬场燃烧炉那唯一一幕。而之前爷爷病重，我有空依然惦念自己的足球。一次答应老爸去医院看爷爷，半路依然溜去踢球。到家挨了老爸结实一顿。就在那天，爷爷离开了。我依然不知道怎么回事，没感觉，没概念。  &lt;/p&gt;
&lt;p&gt;殡仪馆见到爷爷的遗体，有很多人再哭，我没有。我觉得他更好看了，我没见过爷爷那么好的脸色。  &lt;/p&gt;
&lt;p&gt;多年之后，我才明白，因为上了妆。  &lt;/p&gt;
&lt;p&gt;追悼会过后，我一个人跑开，趴在一个窗子上，就那样趴着。之后，我看见爷爷的遗体被推了进来，推进了燃烧炉。瞬间，我泪如雨崩，等我意识过来，立马跑开，躲进一没人的角落，嚎啕大哭。  &lt;/p&gt;
&lt;p&gt;别离，就是有些人有些事有些地方，会烧成粉末，随风扬了，之后需要靠思念去拼凑，拼凑出那让人心成粉末的东西。  &lt;/p&gt;
&lt;p&gt;多年之后，当深刻体会到什么是别离，却已经忘记了这句话。成长？  &lt;/p&gt;
&lt;p&gt;过年时，在家乱翻，找出之前写的乱七八糟的小本，一眼看到了这句话。就一直被纠缠着。  &lt;/p&gt;
&lt;p&gt;年间一如往常，除了与几位朋友喝酒扯淡，只宅家。一直睡觉却比任何时候累。假期临近结束，许久不见的朋友见了一面，那么匆匆，却留下那么狠的挂念。  &lt;/p&gt;
&lt;p&gt;大学离开家，大三逃离校园。一个人在这陌生城市生活近2年。手机偶尔响起，是推销电话，偶尔我也会接起，胡说几句。  &lt;/p&gt;
&lt;p&gt;太多的事情，只要撑过，就好了。  &lt;/p&gt;
&lt;p&gt;离开家，回来上班之后，我告诉朋友。  &lt;/p&gt;
&lt;p&gt;我说，“我喜欢上个女孩，可能是寂寞”。  &lt;/p&gt;
&lt;p&gt;他说，“你不是那种人”。  &lt;/p&gt;
&lt;p&gt;我开始坚信，我是因为寂寞，我说，我过段时间就好了。  &lt;/p&gt;
&lt;p&gt;然后，没好，我跟一自称我人生导师的忽悠君说。  &lt;/p&gt;
&lt;p&gt;我说，“我喜欢上个女孩，blablabla”。  &lt;/p&gt;
&lt;p&gt;他说，“blablabla，你只是在追求那种单纯，blablabla”。  &lt;/p&gt;
&lt;p&gt;然后，我接着安心学习与工作。我知道我可以按照自己的计划去走，只是需要让人带我从情绪抽离。  &lt;/p&gt;
&lt;p&gt;13号晚上，我熬了一夜做了一个页面，只有一个心情，让他人知道。当我做完，我突然发现，我要表达的已经表达完了。谁知与不知我已不在意，我知道了。   &lt;/p&gt;
&lt;p&gt;一直没法去做自己擅长的事情，当hr姐姐问，你数学差怎么做程序员时，我愕然了。很早就知道这个道理，到了大学才开始正式接触电脑，踌躇了2年才无奈的决意走上这条道路，想要把头从这么深的水中冒出会是多艰难。而我已经与过去别离，过去的一切都不再属于我，即使总是去回忆，去拼凑。  &lt;/p&gt;
&lt;p&gt;我害怕，那些来自他人的东西。从小，我可以从容擦去自己跌倒后身上的血，却无法忍受弟弟一点难受流下的泪水。  &lt;/p&gt;
&lt;p&gt;我有很多事情要做，未来未可知。在与众多过去别离别离之后，往前，只有这一条路在四周。  &lt;/p&gt;
&lt;p&gt;今晚的这些，是因某人流露出的那一些伤感。从已经睡下的弟弟口袋中掏出他的烟，给自己点上。  &lt;/p&gt;
&lt;p&gt;我没有那些年，就会勇敢去偷采郁金香。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Fri, 21 Feb 2014 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2014-02-21:leave-growth.html</guid><category>memories</category></item><item><title>Ubuntu MySQL Django环境配置备忘</title><link>http://blog.everlose.com/ubuntu-django-mysql-envs.html</link><description>&lt;h2&gt;设置virtualenv&lt;/h2&gt;
&lt;p&gt;安装virtualenv  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install virtualenv    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装virtualenvwrapper  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install virtualenvwrapper    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开机启动virtualenvwrapper，在&lt;code&gt;.bashrc&lt;/code&gt;或&lt;code&gt;.profile&lt;/code&gt;等此类文件中写入如下代码   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$HOME/.virtualenvs        
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$HOME/Devel      
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以每次使用之前运行&lt;code&gt;source /usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;MySQL安装与简单设置&lt;/h2&gt;
&lt;p&gt;安装MySQL  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建数据库  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -p  
// 输入密码      
create database database_name&lt;span class="p"&gt;;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装Django  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;相关依赖&lt;/h2&gt;
&lt;p&gt;python-mysqld  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install python-mysqld 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;libmysqld-dev    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libmysqld-dev  
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 23 Nov 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-11-23:ubuntu-django-mysql-envs.html</guid><category>django</category><category>ubuntu</category><category>mysql</category></item><item><title>扩展Django的ORM</title><link>http://blog.everlose.com/django-orm-extend.html</link><description>&lt;p&gt;注：译文，&lt;a href="http://blog.safaribooksonline.com/2013/11/06/extending-the-django-orm/"&gt;原文地址&lt;/a&gt;http://blog.safaribooksonline.com/2013/11/06/extending-the-django-orm/  &lt;/p&gt;
&lt;p&gt;Django的对象关系映射(ORM)在代码和数据库之间搭起了一架桥梁。这篇文章中我打算简要的说下什么是ORM以及该怎么去使用它。最重要的是怎么使用专门的SQL定制和扩展ORM。
最后，我会说几点为什么在不选择标准ORM时需要特别的小心。现在开始吧。  &lt;/p&gt;
&lt;h2&gt;ORM的什么吸引我?&lt;/h2&gt;
&lt;p&gt;首先，也是最重要的，ORM会将业务逻辑封装进应用中，而不是使用数据库。将应用的业务逻辑放进ORM让我们的代码更容易理解和维护。他让我们不用再一直去猜应用到底是怎么工作的。  &lt;/p&gt;
&lt;p&gt;ORM帮我们在数据库返回和插入数据时进行验证。在对数据的完整性和安全性非常关心的应用中，这一步是起决定性作用的。虽然数据库中的类型检查也非常的棒，但是Django的ORM能帮助
我们在数据没有到达数据库的时候验证业务规则。此外，也能保证数据库返回的数据是我们所期望的。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyModelClass.objects.all()&lt;/code&gt; 是ORM的一个非常简单的使用ORM的例子。这行代码返回数据表中的所有内容，与&lt;code&gt;select * from MyModelTable&lt;/code&gt;结果一样。还有很多其他的&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#queryset-api"&gt;用法&lt;/a&gt;,
这不是这篇文章的关注的。在你开始使用定制的SQL语句之前你将会非常想知道ORM是怎么工作的。  &lt;/p&gt;
&lt;h2&gt;为什么我需要定制ORM?&lt;/h2&gt;
&lt;p&gt;在实践中，我见过几个例子。首先是当没有明显的查询方法的时候你会这么想。然而这对于定制ORM不是一个很好的假定。当你需要使用SQL的时候，试着使用对象和对象关系来思考，而不是使用数据表。
这可能会得到一个很好的查询方法。举个例子，很多的SQL用户也许想写下面的语句:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
&lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;last_login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;level&amp;quot;&lt;/span&gt;  
&lt;span class="k"&gt;FROM&lt;/span&gt;  
&lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt;  
&lt;span class="ss"&gt;&amp;quot;address_address&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;address_address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;user_user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;address_address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;street&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果这些数据模型创建的正确的话，相应的Python代码非常简单:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;address_street&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于倾向使用SQL的用户，我建议常常往回退一步。对于Python/Django的重度用户，我建议记住用SQL的思维来想想将会创建的是什么。使用SQL来扩展和定制的原因更正确的说应该是：
有一个非常特殊的逻辑或者能获得更好的ORM不能提供的性能。  &lt;/p&gt;
&lt;h2&gt;我怎么定制查询?&lt;/h2&gt;
&lt;p&gt;第一个定制查询的选择是使用&lt;code&gt;extra&lt;/code&gt;方法，文档很详细。Django文档中提供了很棒的&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#extra"&gt;例子&lt;/a&gt;。
我将会使用&lt;code&gt;raw&lt;/code&gt;来完成一个很好的用例，&lt;code&gt;raw&lt;/code&gt;的&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/sql/#executing-raw-queries"&gt;文档&lt;/a&gt;同样很棒。然而这些例子都不怎么重要。
我想让你通过ORM来使用用先进数据库特性的优势。  &lt;/p&gt;
&lt;p&gt;举个例子，现在你的应用需要展现一个聚合了很多值的大数据，需要创建大量的SQL语句。第一步，你将创建一个存储过程来封装这个查询，然后创建一个SQL function来让方便调用这个查询（你同样需要
创建一个数据表，但那都是标准的SQL）。为了性能，你也许你将这个逻辑移到了数据库中去处理。所以，这时候你的应用只能在数据库完成数据聚合的时候才能处理业务逻辑。  &lt;/p&gt;
&lt;p&gt;我们同样假设你有一个名为&lt;code&gt;aggregate_profile_metrics&lt;/code&gt;的SQL方法来帮助你的应用提高性能。使用标准的ORM的话你就没这么幸运了。SQL方法只有在使用views和tables的时候才能使用。现在看看&lt;code&gt;raw&lt;/code&gt;
查询的威力。首先定义一个model。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProfileMetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;avg_posts_per_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;avg_comments_per_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;avg_respondees_per_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;managed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fake_table_name&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# This is the trickier part  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意这个model是完全与数据相关的，我们能够在我们所有不同的数据表中进行聚合调用。当数据库足够大，你拥有数十个表和数百万用户的时候，这个表就有一定规模了。由于这些数据很可能随时更新，这时候SQL方法
的效率优势就显示出来了。现在进入最有趣的部分，使用下面的方法你将很容易达到调用SQL方法的目的。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;select avg_posts_per_day, avg_comments_per_day, avg_respondees_per_day &lt;/span&gt;
         &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aggregate_profile_metrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  &lt;/span&gt;

&lt;span class="n"&gt;profile_metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProfileMetric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;283844238&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用上面的查询你能够调用SQL方法，但是这太痛苦了。注意，这个SQL方法调用了一个参数&lt;code&gt;user_id&lt;/code&gt;来获取数据，但是我们没有将参数直接传递进去。如果你的SQL方法不需要调用参数，你应该使用数据库的&lt;code&gt;view&lt;/code&gt;。
使用这个方法，你现在可以使用&lt;code&gt;profile_metics&lt;/code&gt;,除了一些细小的区别外，就像使用一个一般的queryset一样（查看&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.raw"&gt;RawQUeryset和一般Queryset的区别&lt;/a&gt;）。  &lt;/p&gt;
&lt;p&gt;除了这点，Django还允许用户不通过model进行数据库操作。我极力反对这么做。记住不使用model直接进行数据库操作是没多少理由的。那些使用了这个的例子都是非常极端的情况。只要使用了不基于model的raw查询，
ORM的作用就消失了。从这点来说，就没有使用Django的必要了。  &lt;/p&gt;
&lt;p&gt;当使用&lt;code&gt;.raw&lt;/code&gt;的时候，需要记住一下几点。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确认这些查询不能使用Django的ORM完成。  &lt;/li&gt;
&lt;li&gt;确认需要去创建定制的SQL(比如:为了获得SQL function的性能或者是在遗留应用中进行的操作)。  &lt;/li&gt;
&lt;li&gt;通过QuerySet中的&lt;code&gt;.raw&lt;/code&gt;来创建你定制的SQL调用。  &lt;/li&gt;
&lt;li&gt;不要直接使用&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/sql/#connections-and-cursors"&gt;connection&lt;/a&gt;的&lt;code&gt;curser.execute&lt;/code&gt;。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在，你知道Django的ORM是非常强大的。当你想使用SQL语句和命令的时候记住这一点。记住下面关于何时使用raw SQL的建议。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要使用raw SQL(当你能用其他办法解决的时候)。  &lt;/li&gt;
&lt;li&gt;使用ORM中的对象关系。  &lt;/li&gt;
&lt;li&gt;试着在使用raw前使用extra，  &lt;/li&gt;
&lt;li&gt;将raw作为最后一个选择。 &lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 11 Nov 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-11-11:django-orm-extend.html</guid><category>django</category><category>orm</category></item><item><title>记一次业余项目经历</title><link>http://blog.everlose.com/quit-a-project.html</link><description>&lt;p&gt;昨天做了一个决定，放弃已经做了近4个月的业余项目，一个基于Django的社区。从一开始的无限激情到最终在挣扎中放弃，遗憾之余也有获得成长的愉悦。  &lt;/p&gt;
&lt;h3&gt;关于我&lt;/h3&gt;
&lt;p&gt;我不敢称自己为geek，但也存在码农的“劣根性”---爱造轮子。虽然我造不出高级的轮子，但我造轮子的意愿那是相当强烈。  &lt;/p&gt;
&lt;p&gt;工作在一个很小团队，拥有相当大的自主权，可以选择自己喜欢的组件，自己想要的方式去进行开发。当然，最终的决定权还在我的领导。在团队中，我做的东西是改动最大的，菜鸟总归是菜鸟，经验上的缺乏导致我总会考虑不周。可是我有自虐症，喜欢被领导和同事指出错误和不足时的心服口服外加哑口无言，就跟喜欢自己的方案被采纳和夸奖时的感受一样一样的。  &lt;/p&gt;
&lt;p&gt;一句话总结就是，码农的命却得了想做优秀产品的病。  &lt;/p&gt;
&lt;h3&gt;关于项目&lt;/h3&gt;
&lt;p&gt;这是一个私人的项目，当初联系的时候虽然对方有一些产品的构思和一些设计图，但是允许我可以自主开发，除了数据库指定了MySQL之外没有任何要求。我一想，这不是挺好嘛，这正投我所好啊，我能做出一个自己的产品了，还可以顺带练练手的，太棒了。于是答应了下来。  &lt;/p&gt;
&lt;p&gt;当我收到设计图和关于产品的文档时，我傻了。这是设计图吗？简直就是小孩子的涂鸦呀，有很多还是其他网站的截图，文档几乎啥也没有啊。然后之后的转念一想直接给现在的放弃埋下了伏笔。我想，既然啥都没，我就更能自我发挥了不是么？  &lt;/p&gt;
&lt;p&gt;项目大致是要做一个职业相关的社区，基本功能与其他社区大同小异。  &lt;/p&gt;
&lt;p&gt;几天后，我得知对方是一名产品经理，第一反应是“我去！”。我没有直接跟产品经理打交道的经历，但网上这类的吐槽大家也都知道。我不会也碰到所谓的极品吧。  &lt;/p&gt;
&lt;h3&gt;从开始到放弃&lt;/h3&gt;
&lt;p&gt;起初的我那是非常有激情，每天的业余时间都放在这上面。从设计到实现，一点一点非常用心，进展也顺利。算是过了一段蜜月期。  &lt;/p&gt;
&lt;p&gt;当搭出基本的框架，设计渐渐实现的时候，麻烦开始了。首先是对方要求我将重心放在功能的实现，前端样式不必太关心，他后期会找美工和前端工程师来做处理。后来前端的改动却是最大的，一次又一次的改，要求也变成了要我做到结束后能达到上线的需求。我不排斥前端，甚至喜欢，爱美之心人皆有之呀，能做出看起来很美的页面不是很快乐的事情嘛。但是直到现在也没见前端工程师的影子。  &lt;/p&gt;
&lt;p&gt;然后，又不知从哪里找来了一个人，跟我一同开发。好嘛，协作开发挺好的。那些天，我每天还要做代码的merge，各种冲突折腾的我有点难以承受。没几天，那人再也联系不上了。他做的那些功能我也没法融进项目中，不得已我还是自己重新写了一遍。这些都正常，毕竟没有契约关系，也没报酬，有人退出理所当然。  &lt;/p&gt;
&lt;p&gt;我一个人每天坚持开发，终于，项目有点模样了。对方开始给我留言，要我按照他的要求进行修改。要命的是，我总是没法看懂他的留言，三言两语的让我常常摸不到头脑，每天在琢磨他意思上花费了不少时间。即使我琢磨了，觉得我理解了，当我实现了之后，对方说“no,不是的，不是那样的，而是......”。好吧，我再次一头雾水。  &lt;/p&gt;
&lt;p&gt;几次之后，我在琢磨不明白的时候，就直接联系他，让他给解释解释，这真是太痛苦了。我完全不能理解他在说什么啊。因为对方每次总是说“看设计图，然后参考这个、这个、那个、那个网站，你看一下就明白了”。神啊，那设计图，要参考您给一个参考啊，给这么多网站，我怎么参考呢？我真的没办法看一下就明白，臣妾做不到啊。来来回回，等我完全理解他意思的时候，我发现，这这，要这样的话为什么不早说呢，要改我几乎得推翻重来啊！而且，在我看来，很多做法是不正确的。唉，怎么办呢，这是人家的东西，人家还是产品经理。改呗，抄呗，抄还得一个网站抄一点。唉。  &lt;/p&gt;
&lt;p&gt;之后，我有要求对方在要求我做修改的时候给我截图，对方一直不愿意做。总是语言描述，似乎他很自信，而我实在是听不明白，是我太笨吗？多少次我对自己的智商都产生了怀疑。  &lt;/p&gt;
&lt;p&gt;慢慢的我发现了，对方对技术虽然有了解，但是应该很浅，很多东西他还是不知道。当我偶尔耐不住性子了，开始抱怨改动太多的时候，他说“没改很多啊，调整的地方都是界面的一点点调整啊。”哥啊，那是你只看到界面的调整啊！  &lt;/p&gt;
&lt;p&gt;就这样我开始煎熬，一直在改，而越改越偏离了我想要的样子，去各个网站抄我实在接受不了。我开始萌生了退意，但是毕竟是自己从头做起来的项目，写的时候每行代码都尽自己所能做到最好，也答应了对方要做好这个项目，责任心也在，于是还坚持着。  &lt;/p&gt;
&lt;p&gt;直到昨天，我把所有网站功能都完成了。对方又提出了一堆我看不明白，明白的没法认同的需求。我又再次听到很多“参考设计图，参考XX网站，看下不就明白了吗”的话。我实在忍不住了，提出了退出。这个时候，项目已经完全达到了最初上线版本的要求，我离开也不是什么大事了，他的需求，前端工程师都能很好的处理。  &lt;/p&gt;
&lt;p&gt;就这样，我退出了。虽然，之后一些需求我还是会跟进。现在感觉一身轻松，我不用再去写我不认同的代码，不用再去抄来抄去了。关键是，我能做自己想做的事，写自己想写的代码啦！  &lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;产品经理真的是可怕的生物。强势之极还有些傲气凛然啊。&lt;br /&gt;
选择合作伙伴是件很重要的事情，跟自己理念不同而又没法彻底说服自己的人一起合作是很痛苦的。&lt;br /&gt;
做，就做自己喜欢的事情。写代码就得写自己喜欢的代码。&lt;br /&gt;
经历过总是很好的事情，不管那经历是美好或是噩梦。&lt;br /&gt;
明天，我又能自由地写自己的代码啦。&lt;br /&gt;
哦，还有，我还是太嫩了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Fri, 08 Nov 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-11-08:quit-a-project.html</guid><category>memories</category></item><item><title>Python中的变量绑定</title><link>http://blog.everlose.com/python-argument-buinding.html</link><description>&lt;p&gt;原文&lt;a href="http://alon.horev.net/blog/2013/10/20/argument-binding-in-python/"&gt;地址&lt;/a&gt;:http://alon.horev.net/blog/2013/10/20/argument-binding-in-python/  &lt;/p&gt;
&lt;p&gt;在最近一次关于pythono中的变量绑定的争论之后,我决定从正反两方面列出一些在不同方法中python的变量绑定情况。我们先从可行的方法开始吧。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="n"&gt;add5_partial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;add5_partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 15  &lt;/span&gt;

&lt;span class="n"&gt;add5_lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;add5_lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 15  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;我对partial的抱怨&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;partial&lt;/code&gt;不是function[译注:我觉得这样的术语还是直接用英文比较准确],并且经常得不到一个function应该得到的结果。&lt;code&gt;partial&lt;/code&gt;用纯python很容易实现,但我只能猜想,考虑到性能,它是用C来实现的。来看一些例子:  &lt;/p&gt;
&lt;h3&gt;1.Partial在methods里不能工作：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;  
    &lt;span class="n"&gt;set_alive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;set_dead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;这是为什么？&lt;/h4&gt;
&lt;p&gt;你知道&lt;code&gt;self&lt;/code&gt;总是在调用实例方法的时候被赋值为该实例吗？这是使用descriptors机制来是实现的。为了实现这个功能,function类型需要实现&lt;code&gt;__get__&lt;/code&gt;方法。  &lt;/p&gt;
&lt;p&gt;以下表示了方法调用是怎么工作的:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;My name is &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Neo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# 方法调用  &lt;/span&gt;
&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Neo&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 那么函数(function)和方法(method)的区别是什么呢？  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 这个method封装了实例和函数  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;  
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x109d7bb90&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;im_self&lt;/span&gt;    &lt;span class="c1"&gt;# 这是self隐藏的地方  &lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x109d7bb90&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;im_func&lt;/span&gt;    &lt;span class="c1"&gt;# 这是function隐藏的地方  &lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x106163950&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          &lt;span class="c1"&gt;# 与method.im_func(method.im_self)结果相同  &lt;/span&gt;
&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Neo&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 从function到method传递了些什么?  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 触发 __getattribute__(&amp;#39;speak&amp;#39;)  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# __getattribute__从实例的__dict__中搜索属性  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 然后__getattribute__从类的__dict__中搜索属性  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 当它找到之后,它会检查这个值(function)是不是实现了一个__get__方法  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 如果没有实现__get__，返回这个值  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 如果实现了__get__,返回__get__所返回的值,不管是什么  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Neo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f8527ccbad0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.partial不能检查:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getargspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getargspect&amp;#39;&lt;/span&gt;  

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;    &lt;span class="c1"&gt;# 没有保持被包裹的function的__doc__  &lt;/span&gt;
&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;
    &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.partial能够更安全,验证变量的数量和名称:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 为什么在这里不检查信号?!  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;partial的替代品&lt;/h2&gt;
&lt;p&gt;你可以实现一个你自己的返回一个function的partial:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_func&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;备注:不要使用上面的代码,它没有保证键的变量唯一。  &lt;/p&gt;
&lt;p&gt;你也可以使用lambda:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;  
   &lt;span class="n"&gt;set_alive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;set_dead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;关于lambdas,我的问题&lt;/h2&gt;
&lt;p&gt;就像我的朋友@EyalIl说的:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lambdas获取变量,partial获取值。&lt;br /&gt;
后者一般更有用。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有一个例子可以说清这个问题:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;callbacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为什么发生了这个?  &lt;/p&gt;
&lt;p&gt;因为python支持闭包(一个通常很好的东西):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;span class="c1"&gt;# 但是，但是python是怎么知道的？好吧，function能够hold住外部变量的一个引用  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_closure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#  (&amp;lt;cell at 0x101bdfb40: int object at 0x7fd3e9c106d8&amp;gt;,)  注:我不知道这作者是怎么得出来的,我的测试未得出这样的结果,而是抛出TypeError: &amp;#39;NoneType&amp;#39; object is not callable的错误  &lt;/span&gt;

&lt;span class="c1"&gt;# 这些cells是什么?cell是一个指向某个外部范围某个名称的一个指针。它hold住了一个允许改变的反射，甚至是改变不可变的数据类型。  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_closure&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cell_contents&lt;/span&gt;  &lt;span class="c1"&gt;# 2  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[注:上面这段代码我在python2.7.3和python3.3.1下测试都没得到作者所说的结果,如果有懂的望赐教.]  &lt;/p&gt;
&lt;p&gt;将不是函数(function)参数的变量绑定为函数(function)变量是一个解决方法:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;callbacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;我们能做到更好嘛？&lt;/h2&gt;
&lt;p&gt;我打算提一个跟&lt;code&gt;Javascript&lt;/code&gt;的&lt;code&gt;Function.bind&lt;/code&gt;功能相似的一个机制。  &lt;/p&gt;
&lt;p&gt;这是我想它所起的作用(这只是一个建议,这些代码不能真正的工作):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="n"&gt;add5_partial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# 需要一次import&lt;/span&gt;
&lt;span class="n"&gt;add5_lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 太长了  &lt;/span&gt;

&lt;span class="n"&gt;add5_bind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 最短的  &lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;ArgSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;varargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getargspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add5_bind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# works with inspect&lt;/span&gt;
&lt;span class="n"&gt;ArgSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;varargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你想深挖&lt;code&gt;bind&lt;/code&gt;，请回复/投票。如果有了足够的反馈,那我就有动力去写一个PEP啦.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 26 Oct 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-10-26:python-argument-buinding.html</guid><category>python</category></item><item><title>Django Admin消息定制</title><link>http://blog.everlose.com/django-admin-messages-custom.html</link><description>&lt;p&gt;Django admin 真是一个强大的东西，轻轻松松就能搭好一个网站的后台，大部分的功能都能满足。它也自带了操作后的消息提醒。具体可以查看文档&lt;a href="https://docs.djangoproject.com/en/1.5/ref/contrib/admin/actions/"&gt;Admin actions&lt;/a&gt;。文档中有非常简单的给用户发送消息的方法，即：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这样的消息都是“操作成功”的消息，消息前面带的是一个绿色勾的图标。而很多时候需要对错误的操作和未成功的操作给出提示，这也的提示消息显然不行。  &lt;/p&gt;
&lt;p&gt;这也很简单，Django中带有messages模块，可以做出各种消息定制。Django真是一个大而全的框架。  &lt;/p&gt;
&lt;p&gt;直接上代码：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Topic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Applicant&lt;/span&gt; 
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicantAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;applicant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reason&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;join_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;list_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;join_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pass_apply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reject_apply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pass_apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; 通过申请 @fanlintao &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;can_treat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;processing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;can_treat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;can_treat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;manager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 将申请人加进小组管理员&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;member&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 将申请人加进组员&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;已经通过所有申请&amp;quot;&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;只有状态为processing的记录能操作,请确认!&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pass_apply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;通过申请&amp;quot;&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reject_apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; 拒绝申请 @fanlintao &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;can_treat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;processing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;can_treat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;can_treat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;已经驳回所有申请&amp;quot;&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;只有状态为processing的记录能操作,请确认!&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;reject_apply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;拒绝申请&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Applicant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ApplicantAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用定制的&lt;code&gt;add_message&lt;/code&gt;方法就能完成一个错误的消息提醒啦。虽然还是比较简陋，只是消息前换了个红色的图标，但对于后台也够用啦。  &lt;/p&gt;
&lt;p&gt;PS:看来还要好好看看Django的messages模块了。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Thu, 26 Sep 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-09-26:django-admin-messages-custom.html</guid><category>django</category></item><item><title>Django中对静态文件的支持</title><link>http://blog.everlose.com/django-staticfiles-system.html</link><description>&lt;p&gt;原文地址:[http://agiliq.com/blog/2013/03/serving-static-files-in-django/]  &lt;/p&gt;
&lt;p&gt;处理静态文件，尤其是在开发时，是一件蛋疼的事情。在这篇文章中，我们将会讨论一些设置，目录结构和他们之间的相互影响。设置好&lt;code&gt;DEBUG = True&lt;/code&gt;然后我们开始开发吧。  &lt;/p&gt;
&lt;p&gt;我们将会创建一个Django项目，这样可以让我们更好的了解我们讨论的这些这些文件在什么目录中。我们将会使用Django1.4，这些都也能在Django1.3中工作，因为没有在Django1.2下进行测试，所以对1.2版本下是否有问题不是很清楚。&lt;/p&gt;
&lt;h2&gt;创建项目&lt;/h2&gt;
&lt;p&gt;如果你不需要这部分，可以直接跳到&lt;strong&gt;处理静态文件&lt;/strong&gt;这一节。只要保证你看过了这节底部的目录结构并对其有了解，这样你阅读后面的内容会更舒服。  &lt;/p&gt;
&lt;p&gt;我们将在命名为&lt;strong&gt;staticvirt&lt;/strong&gt;的虚拟环境中做所有事情，所以我们需要命令  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ virtualenv staticvirt  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来我们需要在这个虚拟环境中创建一个Django项目。确保你进入了虚拟环境的目录，并且激活了该环境。同时也要保证在这个虚拟环境中安装了Django，因为我们不想污染系统的包环境。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ &lt;span class="nb"&gt;cd&lt;/span&gt; staticvirt/  
~/staticvirt$ &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate  
&lt;span class="o"&gt;(&lt;/span&gt;staticvirt&lt;span class="o"&gt;)&lt;/span&gt;~/staticvirt$ pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.4  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建一个Django项目。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin.py startproject test_project  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入项目所在系统。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; test_project/  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们看看现在的目录结构。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticvirt&lt;span class="o"&gt;)&lt;/span&gt;~/staticvirt/test_project$ tree  
. 
&lt;span class="p"&gt;|&lt;/span&gt;-- manage.py   
*-- test_project   
&lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py 
&lt;span class="p"&gt;|&lt;/span&gt;-- settings.py   
&lt;span class="p"&gt;|&lt;/span&gt;-- urls.py   
*-- wsgi.py    
&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;5&lt;/span&gt; files  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在查看下&lt;code&gt;test_project/settings.py&lt;/code&gt;的内容。搜索所有包括&lt;strong&gt;static&lt;/strong&gt;的行，下面我列出所有包括static的行。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;STATIC_ROOT = &amp;#39;&amp;#39;   

STATIC_URL = &amp;#39;/static/&amp;#39;  

STATICFILES_DIRS = ()  

STATICFILES_FINDERS = (  
&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;,     
&amp;#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#39;,   
&amp;#39;django.contrib.staticfiles.finders.DefaultStorageFinder&amp;#39;, 
)   


INSTALLED_APPS = (    
....   
....   
&amp;#39;django.contrib.staticfiles&amp;#39;,   
....   
)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然而，这里所看到的都是Django提供的默认设置，我们没有做任何的设置。  &lt;/p&gt;
&lt;p&gt;我们创建一个app，我们将会在里面创建一个&lt;strong&gt;template&lt;/strong&gt;，然后会写一些静态文件，比如样式文件，然后在模板中使用这个样式文件。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py startapp some_app  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将&lt;code&gt;some_app&lt;/code&gt;添加进&lt;code&gt;test_project/settings.py&lt;/code&gt;中的&lt;code&gt;INSTALLED_APPS&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;我们需要一个&lt;code&gt;urls.py&lt;/code&gt;文件来为&lt;code&gt;some_app&lt;/code&gt;定制路由。项目的urls.py应该包括&lt;code&gt;some_app&lt;/code&gt;中的urls.py。所以，我们在&lt;code&gt;test_project/urls.py&lt;/code&gt;中添加以下一行。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^some_app/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some_app.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;some_app&lt;/code&gt;的urls.py文件中添加以下内容。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^home$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some_app/home.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建一个名为&lt;strong&gt;templates&lt;/strong&gt;的目录，然后将其添加进&lt;code&gt;TEMPLATE_DIRS&lt;/code&gt;。我在manage.py同级目录下创建&lt;strong&gt;templates&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;将&lt;strong&gt;templates&lt;/strong&gt;添加进&lt;code&gt;TEMPLATE_DIRS&lt;/code&gt;我需要做以下设定，如果你也使用跟我一样的目录结构，你也需要同样的设定。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PROJECT_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们需要为&lt;code&gt;some_app&lt;/code&gt;创建home.html文件，然后你需要进入&lt;strong&gt;templates&lt;/strong&gt;目录。所以创建&lt;strong&gt;templates/come_app/home.html&lt;/strong&gt;，在文件中写入以下内容。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is home for some_app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在查看一下项目的目录结构，便于消除一些不清楚的地方。   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/staticvirt/test_project$ tree -I *.pyc 
. 
&lt;span class="p"&gt;|&lt;/span&gt;-- manage.py 
&lt;span class="p"&gt;|&lt;/span&gt;-- some_app 
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py   
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- models.py   
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- tests.py   
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- urls.py   
&lt;span class="p"&gt;|&lt;/span&gt; *-- views.py      
&lt;span class="p"&gt;|&lt;/span&gt;-- templates   
&lt;span class="p"&gt;|&lt;/span&gt; *-- some_app   
&lt;span class="p"&gt;|&lt;/span&gt; *-- home.html   
*-- test_project   
&lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py   
&lt;span class="p"&gt;|&lt;/span&gt;-- settings.py   
&lt;span class="p"&gt;|&lt;/span&gt;-- urls.py   
*-- wsgi.py    

&lt;span class="m"&gt;4&lt;/span&gt; directories, &lt;span class="m"&gt;11&lt;/span&gt; files  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们不想想是.pyc文件，所以将他们做了过滤。  &lt;/p&gt;
&lt;p&gt;启动服务。请确保你做好了你的数据库设定。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticvirt&lt;span class="o"&gt;)&lt;/span&gt;~/staticvirt/test_project$ python manage.py runserver  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在浏览器中打开&lt;code&gt;http://127.0.0.1:8000/some_app/home&lt;/code&gt;。从现在开始，我们称这个页面为some_app的home，你应该能够看到你刚写下的html的内容。  &lt;/p&gt;
&lt;h2&gt;处理静态文件&lt;/h2&gt;
&lt;p&gt;让我们编辑下&lt;code&gt;some_app&lt;/code&gt;中的home.html文件，并且在其中添加样式，现在还不存在任何样式文件，我们将在编辑好home.html中的代码后添加。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{STATIC_URL}}styles.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is home for some_app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刷新&lt;code&gt;some_app&lt;/code&gt;的home页面。你将不会看到任何变化，因为我们还没有创建样式文件。  &lt;/p&gt;
&lt;p&gt;同样，访问&lt;code&gt;http://127.0.0.1/static/style.css&lt;/code&gt;，你将会看到一个404页面。  &lt;/p&gt;
&lt;p&gt;现在开始创建样式文件。因为我们想要在&lt;code&gt;some_app&lt;/code&gt;的template中使用这个样式，所以我们将在&lt;code&gt;some_app&lt;/code&gt;的&lt;strong&gt;static/&lt;/strong&gt;的子目录中创建。所以创建&lt;code&gt;some_app/static/style.css&lt;/code&gt;，添加以下内容。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;body  
{  
background-color: red;  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再刷新&lt;code&gt;some_app&lt;/code&gt;的home页面，你将会看到页面背景变成了红色。同样，访问&lt;code&gt;http://127.0.0.1/static/style.css&lt;/code&gt;，你看到的不再是404页面，而是样式文件的内容。如果你看到这些变化，请确认你将&lt;code&gt;some_app&lt;/code&gt;添加进了&lt;code&gt;INSTALLED_APPS&lt;/code&gt;，并且重启了服务。  &lt;/p&gt;
&lt;h3&gt;需要注意的地方&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们没有对Django的默认静态文件设置做任何改变。我们完全保留了Django的settings.py中关于静态文件的设置。  &lt;/li&gt;
&lt;li&gt;在开发中，你不需要在urls.py中关于静态文件做任何改变，不需要添加&lt;strong&gt;staticfiles_urlpatterns()&lt;/strong&gt;，我经常对此感到疑惑。  &lt;/li&gt;
&lt;li&gt;在开发中，你不需要执行&lt;code&gt;python manage.py collectstatic&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;内部是怎么工作的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，检索settings.py中所有关于静态文件的设置。  &lt;/li&gt;
&lt;li&gt;他们是&lt;code&gt;STATIC_URL, STATIC_ROOT, STATICFILES_FINDERS, STATICFILES_DIRS&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;同样我们已经将&lt;strong&gt;'django.contrib.staticfiles'&lt;/strong&gt;添加进了&lt;code&gt;INSTALLED_APPS&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;现在先不管&lt;code&gt;STATIC_ROOT&lt;/code&gt;和&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;。即使你将他们注释或者删除，你的项目依然能够像现在一样工作。   &lt;/li&gt;
&lt;li&gt;我们需要将&lt;strong&gt;'django.contrib.staticfiles'&lt;/strong&gt;添加进&lt;code&gt;INSTALLED_APPS&lt;/code&gt;，如果我们想要使用Django默认的静态文件处理服务。  &lt;/li&gt;
&lt;li&gt;所谓的Django默认的静态文件处理服务就相当于需要使用Django提供的&lt;code&gt;python manage.py runserver&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;Django默认会在&lt;code&gt;STATIC_URL&lt;/code&gt;下处理静态文件。注意&lt;code&gt;STATIC_URL&lt;/code&gt;已经设置为&lt;strong&gt;'/static/'&lt;/strong&gt;。这就是为什么我们获取到了我们的静态文件，举个例子，样式文件在这个url下&lt;code&gt;http://127.0.0.1:8000/static/styles.css&lt;/code&gt;。&lt;br /&gt;
如果你访问&lt;code&gt;http://127.0.0.1:8000/static_changed/styles.css&lt;/code&gt;，你将会得到一个404页面。如果你想要在&lt;code&gt;http://127.0.0.1:8000/static_changed/styles.css&lt;/code&gt;提供，需要设置&lt;code&gt;STATIC_URL = '/static_changed/'&lt;/code&gt;。现在动手试试吧。这只是为了举例说明STATIC_URL的用处，现在都改回默认设置，即&lt;code&gt;STATIC_URL = '/static/'&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;下一个问题是，Django是怎么知道从哪里去读取静态文件的，或者说怎么知道去哪里找到静态文件呢？这就是&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;的作用了。&lt;br /&gt;
在&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;中我们有两条记录:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你可以先不管FileSystemFinder，如果你愿意，你可以先注释掉这一行。AppDirectoriesFinder告诉Django从&lt;code&gt;INSTALLED_APPS&lt;/code&gt;中每一个app下的static/ 子目录下去寻找静态文件。记住，我们是将style.css放在了&lt;code&gt;some_app&lt;/code&gt;中static/子目录下，这就是为什么Django能够找到它，并且进行正确的处理。如果你将'static/'子目录修改为其他名字，你的静态文件就不能被正确处理了。动手试一试吧。注释掉&lt;strong&gt;AppDirectoriesFinder&lt;/strong&gt;这一行，然后访问&lt;code&gt;http://127.0.0.1:8000/static/styles.css&lt;/code&gt;，现在样式文件不能被正确地处理了。好，尝试过后去掉注释。  &lt;/p&gt;
&lt;p&gt;现在，我们知道了&lt;code&gt;STATIC_URL&lt;/code&gt;和&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;的作用。我们现在仍然不需要用到&lt;code&gt;STATIC__ROOT&lt;/code&gt;和&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;为了了解一些其他的事情关于静态文件的处理，我们需要另一个app。  &lt;/p&gt;
&lt;p&gt;创建一个。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py startapp other_app  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改项目的urls.py，将&lt;code&gt;other_app&lt;/code&gt;包括进去。现在项目的urls.py包括两行。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^some_app/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some_app.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;   
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^other_app/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;other_app.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们需要在&lt;code&gt;other_app&lt;/code&gt;的urls.py中添加几行，比如，在&lt;code&gt;other_app/urls.py&lt;/code&gt;中:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^home$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;other_app/home.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在在templates目录下创建&lt;code&gt;other_app/home.html&lt;/code&gt;。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is home for other_app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看一下现在的目录结构。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/staticvirt/test_project$ tree -I *.pyc 
. 
&lt;span class="p"&gt;|&lt;/span&gt;-- manage.py  
&lt;span class="p"&gt;|&lt;/span&gt;-- other_app  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- models.py  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- tests.py  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- urls.py  
&lt;span class="p"&gt;|&lt;/span&gt; *-- views.py  
&lt;span class="p"&gt;|&lt;/span&gt;-- some_app  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- models.py  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- static  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; *-- styles.css  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- tests.py  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- urls.py  
&lt;span class="p"&gt;|&lt;/span&gt; *-- views.py  
&lt;span class="p"&gt;|&lt;/span&gt;-- templates  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- other_app  
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; *-- home.html  
&lt;span class="p"&gt;|&lt;/span&gt; *-- some_app   
&lt;span class="p"&gt;|&lt;/span&gt; *-- home.html  
*-- test_project  
&lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py   
&lt;span class="p"&gt;|&lt;/span&gt;-- settings.py   
&lt;span class="p"&gt;|&lt;/span&gt;-- urls.py  
*-- wsgi.py  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将&lt;code&gt;other_app&lt;/code&gt;添加进&lt;code&gt;INSTALLED_APPS&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;现在访问url:&lt;code&gt;http://127.0.0.1:8000/other_app/home&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;为other_app的home页面添加样式。假设我们想让它的背景颜色为蓝色，我们创建&lt;code&gt;other_app/static/other_style.css&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;body{  
background-color: blue;  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将样式文件添加进other_app的home页面的模板中，将&lt;code&gt;templates/other_app/home.html&lt;/code&gt;改为:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{STATIC_URL}}other_style.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is home for other_app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刷新&lt;code&gt;http://127.0.0.1:8000/other_app/home&lt;/code&gt;，你将会看到蓝色背景。你也许需要重启服务才能看到变化。同样，我们能够在&lt;code&gt;http://127.0.0.1:8000/static/other_style.css&lt;/code&gt;中看到样式文件的内容。  &lt;/p&gt;
&lt;p&gt;同时，访问&lt;code&gt;http://127.0.0.1:8000/some_app/home&lt;/code&gt;，验证下some_app的home页面依然是红色背景。  &lt;/p&gt;
&lt;h3&gt;这里发生了什么&lt;/h3&gt;
&lt;p&gt;当我们发起一个&lt;code&gt;/static/other_style.css&lt;/code&gt;的请求，Django知道&lt;code&gt;STATIC_URL&lt;/code&gt;设置为'/static/'，这跟url提供的第一个部分相匹配，因此它推断我们想要将其作为静态文件处理，所以它进入所有app的static/子目录中进行查找，因为&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;包含了&lt;strong&gt;'django.contrib.staticfiles.finders.AppDirectoriesFinder'&lt;/strong&gt;。当它在&lt;code&gt;other_app&lt;/code&gt;中的static/目录下找到一个名为&lt;code&gt;other_style.css&lt;/code&gt;的文件，就对它进行处理。  &lt;/p&gt;
&lt;p&gt;然而，这带来了另一个问题，你一定注意到了我们将&lt;code&gt;other_app&lt;/code&gt;中的样式文件命名为&lt;code&gt;other_style.css&lt;/code&gt;。如果我们想要它的名称也为style.css会发生什么呢？试试看。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv other_app/static/other_style.css other_app/static/styles.css  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时，我们需要修改other_app的home文件来引入这个样式文件。我们必须做这个，因为我们将&lt;code&gt;other_style.css&lt;/code&gt;改名为了style.css。&lt;code&gt;other_app&lt;/code&gt;的home文件修改如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{STATIC_URL}}styles.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is home for other_app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在查看两个我们创建的页面。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://127.0.0.1:8000/some_app/home  
http://127.0.0.1:8000/other_app/home  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你会发现现在两个页面的背景都变成了红色。这依赖于&lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;中app的排列顺序。如果&lt;code&gt;some_app&lt;/code&gt;在&lt;code&gt;other_app&lt;/code&gt;的前面，两个页面都会是红色背景。如果&lt;code&gt;other_app&lt;/code&gt;在&lt;code&gt;some_app&lt;/code&gt;的前面，那么两个页面背景都是蓝色。在我的设置中，&lt;code&gt;some_app&lt;/code&gt;在&lt;code&gt;other_app&lt;/code&gt;之前，所以背景都是红色的。  &lt;/p&gt;
&lt;h3&gt;为什么这会发生&lt;/h3&gt;
&lt;p&gt;两个页面都想引用一个名为style.css的静态文件。Django尝试在&lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;中列出的所有app中的static/子目录下寻找这个文件。一旦它在&lt;code&gt;some_app&lt;/code&gt;的static/子目录中找到了，就会进行处理并且不再继续在&lt;code&gt;other_app&lt;/code&gt;中进行寻找。因此，&lt;code&gt;some_app&lt;/code&gt;中static/子目录下将背景设置为红色，那么两个页面都被设置为红色背景了。  &lt;/p&gt;
&lt;h3&gt;怎么避免&lt;/h3&gt;
&lt;p&gt;那么，如果我们想在两个app中样式文件都叫做style.css怎么做？这时候，我们需要在没一个app下的static/目录下增加一层目录，将其命名为各自app的名称。像下面这么做:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir some_app/static/some_app   
mv some_app/static/styles.css some_app/static/some_app    
mkdir other_app/static/other_app   
mv other_app/static/styles.css other_app/static/other_app/   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们在每一个app下的static/子目录下创建一个与各自app相同的目录。然后将样式文件移到这个目录下。  &lt;/p&gt;
&lt;p&gt;同理，也需要修改各自的模板文件。  &lt;/p&gt;
&lt;p&gt;修改&lt;code&gt;templates/some_app/home.html&lt;/code&gt;中的stylesheet路径，新的内容如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{STATIC_URL}}some_app/styles.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is home for some_app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对&lt;code&gt;templates/other_app/home.html&lt;/code&gt;做相似的改动。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;STATIC_URL&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;other_app/styles.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is home for other_app&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在再次查看两个页面。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://127.0.0.1:8000/some_app/home  
http://127.0.0.1:8000/other_app/home  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将会发现一个背景是红色，另一个是蓝色。  &lt;/p&gt;
&lt;h3&gt;这里发生了什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;some_app&lt;/code&gt;的模板需要引用&lt;code&gt;http://127.0.0.1:8000/static/some_app/styles.css&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;Django发现这个url以'/static/'开头，这跟&lt;code&gt;STATIC_URL&lt;/code&gt;匹配，推测这需要处理静态文件&lt;strong&gt;some_app/style.css&lt;/strong&gt;。  &lt;/li&gt;
&lt;li&gt;它开始在所有app的static/子目录中寻找文件&lt;code&gt;some_app/style.css&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;它最终在&lt;code&gt;some_app&lt;/code&gt;的static/子目录中找到了它，并进行处理。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;other_app&lt;/code&gt;的模板需要引用&lt;code&gt;http://127.0.0.1:8000/static/other_app/styles.css&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;Django开始在所有app的static/子目录中寻找文件&lt;code&gt;other_app/style.css&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;它最终在&lt;code&gt;other_app&lt;/code&gt;的static/子目录中找到了它，并进行处理。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望你现在对于&lt;strong&gt;STATIC_URL&lt;/strong&gt;, &lt;strong&gt;STATICFILES_FINDERS&lt;/strong&gt;和静态文件是怎么处理的更加清楚了。  &lt;/p&gt;
&lt;h2&gt;关于STATICFILES_DIRS&lt;/h2&gt;
&lt;p&gt;到现在我们假定我们在&lt;code&gt;some_app&lt;/code&gt;和&lt;code&gt;other_app&lt;/code&gt;是需要各自独立的静态文件，所以我们为他们写了不同样式文件。  &lt;/p&gt;
&lt;p&gt;假定我们项目中一些样式需要保持一致，没一个app都没有特殊。这也的话，我们不需要将这些样式文件放进任何一个app的static/子目录中。我们在manage.py的同级目录中创建一个目录，然后将项目共同的静态资源放在这个目录中。  &lt;/p&gt;
&lt;p&gt;然我们看看是怎么做的。  &lt;/p&gt;
&lt;p&gt;在manage.py的同一级下创建一个名为&lt;strong&gt;project_static&lt;/strong&gt;的目录。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir project_static  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建一个名为base.css的文件，放进去。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch project_static/base.css  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑这个页面，包含以下内容:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h1  
{  
font-style: italic;  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们想让项目中所有h1标签中的内容斜体显示。  &lt;/p&gt;
&lt;p&gt;Django现在还不知道这个文件，也不知道怎么进行处理。要让Django知道它，需要将包含这个文件的目录添加进&lt;strong&gt;STATICFILES_DIRS&lt;/strong&gt;。所以编辑&lt;code&gt;test_project/settings.py&lt;/code&gt;,将需要的目录添加进STATICFILES_DIRS。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../project_static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试着访问&lt;code&gt;http://127.0.0.1:8000/static/base.css&lt;/code&gt;，你应该能看到刚才写的样式。请确保在&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;中你设置了:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;否则你将得到一个404页面。  &lt;/p&gt;
&lt;h2&gt;这里发生了什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Django服务器收到一个关于静态文件的请求，因为是一个以'/static/'开头的url。  &lt;/li&gt;
&lt;li&gt;它开始在&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;设定的所有目录中寻找这个静态文件，比如base.css。  &lt;/li&gt;
&lt;li&gt;由于我们在&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;中指定了一个目录，即&lt;code&gt;project_static&lt;/code&gt;，Django服务器在这个目录中尝试寻找这个文件。它在这个目录中进行搜索时找到了这个文件，然后进行处理。  &lt;/li&gt;
&lt;li&gt;如果没有在&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;指定的目录中找到这个文件，它将会在&lt;code&gt;INSTALLED_APPS&lt;/code&gt;下所有app的static/子目录尝试寻找。  &lt;/li&gt;
&lt;li&gt;注意，这时候依然没有不需要添加&lt;code&gt;staticfiles_urlpatterns()&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了在模板中使用这个文件，我们需要引用这个样式。在所有模板中添加进下面这行。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{STATIC_URL}}base.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刷新两个页面的url，你将会看到这些页面中h1标签中的字体都为斜体。  &lt;/p&gt;
&lt;p&gt;让我们查看最终的目录结构，如果你有什么问题可以有帮助。   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticvirt&lt;span class="o"&gt;)&lt;/span&gt;~/staticvirt/test_project$ tree -I *.pyc   
.      
&lt;span class="p"&gt;|&lt;/span&gt;-- manage.py     
&lt;span class="p"&gt;|&lt;/span&gt;-- other_app     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- models.py     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- static     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; *-- other_app     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; *-- styles.css     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- tests.py     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- urls.py     
&lt;span class="p"&gt;|&lt;/span&gt; *-- views.py     
&lt;span class="p"&gt;|&lt;/span&gt;-- project_static     
&lt;span class="p"&gt;|&lt;/span&gt; *-- base.css     
&lt;span class="p"&gt;|&lt;/span&gt;-- some_app     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- models.py     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- static     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; *-- some_app     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; *-- styles.css     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- tests.py     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- urls.py       
&lt;span class="p"&gt;|&lt;/span&gt; *-- views.py     
&lt;span class="p"&gt;|&lt;/span&gt;-- templates     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;-- other_app     
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; *-- home.html     
&lt;span class="p"&gt;|&lt;/span&gt; *-- some_app     
&lt;span class="p"&gt;|&lt;/span&gt; *-- home.html     
*-- test_project     
&lt;span class="p"&gt;|&lt;/span&gt;-- __init__.py     
&lt;span class="p"&gt;|&lt;/span&gt;-- settings.py     
&lt;span class="p"&gt;|&lt;/span&gt;-- urls.py     
*-- wsgi.py     

&lt;span class="m"&gt;11&lt;/span&gt; directories, &lt;span class="m"&gt;20&lt;/span&gt; files  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;关于STATIC_ROOT&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果在开发阶段你使用Django的runserver，你将永远不会需要STATIC_ROOT。  &lt;/li&gt;
&lt;li&gt;一旦你需要进入生产，你能在服务器中使用它。Django提供了一个静态文件管理的命令叫做&lt;strong&gt;collectstatic&lt;/strong&gt;，它将收集所有的静态资源，（如在&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;中找到的和在所有app下的static/子目录中找到的静态资源），将它们放进一个&lt;code&gt;STATIC_ROOT&lt;/code&gt;定义的位置。  &lt;/li&gt;
&lt;li&gt;STATIC_ROOT只有在你使用collectstatic命令的时候才会有用处。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们验证一下，创建一个名为&lt;code&gt;static_resources&lt;/code&gt;的目录.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir static_resources  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改settings.py，添加以下几行.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../static_resources&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在运行命令：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py collectstatic  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它会请求你确认，输入'yes'，然后你将会看见所有的静态资源被收集进一个你在&lt;code&gt;STATIC_ROOT&lt;/code&gt;定义的目录中。  &lt;/p&gt;
&lt;p&gt;然后在生产服务器中你可以设置所有的静态文件请求都进入&lt;code&gt;STATIC_ROOT&lt;/code&gt;定义的目录中进行查找。  &lt;/p&gt;
&lt;p&gt;再说一次，关于&lt;code&gt;STATIC_ROOT&lt;/code&gt;的部分只是附带着说说。在开发阶段你都不需要用到它。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 16 Sep 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-09-16:django-staticfiles-system.html</guid><category>django</category></item><item><title>VirtualBox 安装win8 RTM</title><link>http://blog.everlose.com/install-win8-in-virtualbox.html</link><description>&lt;p&gt;最近win8.1 RTM流传到了网上，不折腾一下对不起自己啊。  &lt;/p&gt;
&lt;p&gt;我选择的是win8.1 professional 64bit,即64位专业版。安装完后出现如下错误:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Your PC needs to restart.  
Please hold down the power button.  
Error code: 0x000000C4  
Parameters:  
0×0000000000000091  
0x000000000000000F  
0xFFFFF801E5962A80  
0×0000000000000000  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一翻搜索之后，发现是CPU的问题,安装windows8.1，CPU需要支持&lt;code&gt;CMPXCHG16b&lt;/code&gt;,&lt;code&gt;PrefechQ&lt;/code&gt;和&lt;code&gt;LAHF/SAHF&lt;/code&gt;。解决方法如下:  &lt;/p&gt;
&lt;p&gt;进入终端，我的主机是MacPro，windows主机需要进入cmd。首先列出所有你安装的虚拟机:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VBoxManage list vms  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在列出的虚拟机中找到你的win8的名称，我的是&lt;code&gt;win8&lt;/code&gt;。接下来，先关闭你的虚拟机，输入如下命令:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VBoxManage setextradata &lt;span class="o"&gt;[&lt;/span&gt;vmname&lt;span class="o"&gt;]&lt;/span&gt; VBoxInternal/CPUM/CMPXCHG16B &lt;span class="m"&gt;1&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将[vmname] 换成你的win8虚拟机名称，我为&lt;code&gt;win8&lt;/code&gt;。 &lt;/p&gt;
&lt;p&gt;Bingo,一切OK啦。  &lt;/p&gt;
&lt;p&gt;在安装过程中我的mac风扇都要疯了，win8确实漂亮很多，但是有我在虚拟机中感觉有点慢。对windows依然是无爱。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 09 Sep 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-09-09:install-win8-in-virtualbox.html</guid><category>virtualbox</category><category>win8</category></item><item><title>vim for Python</title><link>http://blog.everlose.com/vim%20for%20Python.html</link><description>&lt;p&gt;&lt;a href="https://github.com/klen/python-mode"&gt;python-mode&lt;/a&gt;是一个vim的插件，能让我们使用pyline,rope,pydoc,pyflakes,pep8和mccabe等，对于pythoner是不可缺少的神器。  &lt;/p&gt;
&lt;p&gt;安装和使用方法文档都说的很清楚，只需要一步步的跟着做就好。项目的github地址在此:https://github.com/klen/python-mode。  &lt;/p&gt;
&lt;p&gt;安装好后打开vim时如果遇到如下错误:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E117: Unknown &lt;span class="k"&gt;function&lt;/span&gt;: pathogen#infect  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是因为你没有将pathogen的自动加载脚本添加进.vim目录。注:&lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt;是vim的一个包管理。这时候这么做:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/tpope/vim-pathogen.git  
$ &lt;span class="nb"&gt;cd&lt;/span&gt; vim-pathogen  
$ cp -r autoload ~/.vim  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次打开vim，错误就没有啦。  &lt;/p&gt;
&lt;p&gt;为了随时能使用这个配置，我在github建了一个repo:&lt;a href="https://github.com/mutoulbj/my-vim"&gt;my-vim&lt;/a&gt;，包括python-mode和.vimrc文件。  &lt;/p&gt;
&lt;p&gt;后期再慢慢地进行其他的配置。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Tue, 03 Sep 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-09-03:vim for Python.html</guid><category>vim</category></item><item><title>正确开始一个Django 1.4项目</title><link>http://blog.everlose.com/start-django1.4-right-way.html</link><description>&lt;h3&gt;原文:&lt;a href="http://www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way/"&gt;Start a Django 1.4 Project the Right Way&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;开始一个项目时是一个具有决定性作用的阶段。所做的每一个决定都会对项目产生长远的影响。虽然有很多关于如何开始一个基于Django框架项目的教程，但是很少有讨论怎么使用专业的、业内已经形成共识的最佳实践方法来使用Django，保证项目在开发过程中平衡的成长的。一些很少的计划可以让你未来的生活变得轻松。  &lt;/p&gt;
&lt;p&gt;当你读完这篇文章，你将会获得：&lt;br /&gt;
1. 一个功能完备的Django 1.4项目&lt;br /&gt;
2. 使用版本控制管理所有的文档(使用git或者Mercurial)&lt;br /&gt;
3. 自动的回退和单元测试(使用unittest library)&lt;br /&gt;
4. 一个安装了你项目的独立环境(使用virtualenv)&lt;br /&gt;
5. 自动的部署和测试(使用Fabric)&lt;br /&gt;
6. 自动的数据库迁移(使用South)&lt;br /&gt;
7. 一个均衡你网站的工作流  &lt;/p&gt;
&lt;p&gt;所有的这些(也许除了第一点)，在官方教程中都没有说明。&lt;strong&gt;他们应该有的&lt;/strong&gt;。如果你正在想着开始一个新的，能够投入生产的Django 1.4项目，赶紧读下去吧。  &lt;/p&gt;
&lt;h2&gt;预备知识&lt;/h2&gt;
&lt;p&gt;假定你拥有Python的实战经验，同样，如果你之前拥有关于Django的一些使用经验将会非常有帮助，但是这不是必需的。你需要&lt;a href="http://www.git-scm.com/"&gt;git&lt;/a&gt;(注:有墙)或者&lt;a href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt;用作版本控制。就是这些!  &lt;/p&gt;
&lt;h2&gt;准备开始安装&lt;/h2&gt;
&lt;p&gt;我假定你已经安装好了Python。如果你没有，可以先去&lt;a href="http://www.python.org"&gt;python.org&lt;/a&gt;，找到关于你所用系统的安装说明。我将会使用托管在&lt;a href="https://www.linode.com"&gt;Linode&lt;/a&gt;的一个64位的Ubuntu server。  &lt;/p&gt;
&lt;p&gt;那么，第一步是什么呢?安装Django，是吗？不完全是这样。如果直接在你当前site-packages内安装包的话，一旦在你的机器中有多个不是Django的基于Python的项目，你也许会陷入项目和安装的包之间的依赖问题。基于此，我们将会使用&lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;和它非常棒的扩展&lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt;来管理我们的Django。这对于Django和Python用户是非常常见和值得推荐的方法。  &lt;/p&gt;
&lt;p&gt;如果你使用pip来安装包(我想不出任何你不用它的理由)，你只需非常简单的安装virtualenvwrapper，它会自动安装virtualenv。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install virtualenvwrapper  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装好之后，将下面几行代码添加进你shell的自启动文件(.zshrc,.bashrc,.profile,etc)。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$HOME/.virtualenvs  
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$HOME/directory-yo-do-development-in  
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper .sh  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新载入你的自启动文件(e.g. &lt;code&gt;source .zshrc&lt;/code&gt;)，这样你就可以继续啦。  &lt;/p&gt;
&lt;h2&gt;创建一个新的环境&lt;/h2&gt;
&lt;p&gt;创建一个新的虚拟环境非常的简单。只需要输入命令:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv django_project  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里"django_project"是任何一个你想要的给项目取的名字。  &lt;/p&gt;
&lt;p&gt;你将会发现马上发生了一些事情：你的shell的提示符前加上了"django_project"，pip也被自动安装上了。  &lt;/p&gt;
&lt;p&gt;这是virtualenvwrapper非常有帮助的地方：在它为你创建好虚拟环境之后能马上让你使用pip来安装包。命令行提示符前加上了"django_project"是提示你正在使用的是虚拟环境，而不是你系统的Python环境。想要退出虚拟环境非常简单，输入命令&lt;code&gt;deactivate&lt;/code&gt;即可。当你想要重新回到项目的虚拟环境，只需要输入&lt;code&gt;workon django_project&lt;/code&gt;。注意:在任何路径下都可以使用这些命令，这与virtualenv不一样。   &lt;/p&gt;
&lt;h2&gt;安装Django&lt;/h2&gt;
&lt;p&gt;"等一下，安装Django?我已经安装好Django了!"奇怪的是，你将不会用到你现在系统中已经安装好的。我们将会用一个使用virtualenv管理的Django，它不会将其他用户(或者你自己)在机器上其他地方所使用到的Django弄得混乱。安装一个虚拟环境下的Django，只需要输入命令:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install Django  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将在你的虚拟环境中安装一个最新版本的Django。你可以使用以下命令进行确认:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which django-admin.py  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将指向你的&lt;code&gt;$HOME/.virtualenvs/&lt;/code&gt;目录。如果没有看到这样的结果，请确认你的命令提示符前有"django_project"。如果没有，使用&lt;code&gt;workon django_project&lt;/code&gt;激活你的虚拟环境。  &lt;/p&gt;
&lt;h2&gt;项目设置&lt;/h2&gt;
&lt;p&gt;在实际开始项目之前，我们还需要讨论一些小事情。在过去的几个月，我跟很多Django新手都说过，这些新手有一个最大的不同之处就是不使用版本控制系统。许多新手没有接触过版本控制，其他的则是认为"这是个小项目"不需要版本控制。&lt;strong&gt;错&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只有使用了版本控制系统才不会在未来付出沉重的代价。&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;以前，关于(D)VCS我只说过git。然而，这是个基于Python的项目，Mercurial也是一个非常有价值的选择。在网上他们都非常的流行，有着大量的资料。确认你已经安装了git或者Mercurial。他们基本都能通过你的包控制系统(package control system)安装。  &lt;/p&gt;
&lt;p&gt;如果你准备使用git,显然&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;是你进行代码托管的选择。对于Mercurial，Atlassian的&lt;a href="https://bitbucket.org/"&gt;Bitbucket&lt;/a&gt;是一个好选择(它也支持git，所以两种情况你都可以使用它)。  &lt;/p&gt;
&lt;h2&gt;（source）控制你的环境&lt;/h2&gt;
&lt;p&gt;虽然到现在我们还没有做任何事情，我们知道我们想让一切都进行版本控制。我们有两类"东西"要提交：我们的代码(包括templates,etc)和像数据库管理，South迁移文件(后面详述)，requirements文件等文件。在过去的文章中，我推荐提交你实际的virtualenv环境，但是有一些很好的理由不去这么做，至少这不是必需的。使用requirements文件可以让你不需要保存所有的环境。  &lt;/p&gt;
&lt;p&gt;我们继续，现在开始创建我们的项目目录。使用新&lt;code&gt;django-admin.py&lt;/code&gt;的&lt;code&gt;startproject&lt;/code&gt;命令来创建项目。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-damin.py startproject django_project  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们将会看到创建了一个&lt;em&gt;django_project&lt;/em&gt;目录，在&lt;em&gt;django_project&lt;/em&gt;目录里，有另一个包含了&lt;em&gt;settings.py&lt;/em&gt;,&lt;em&gt;urls,py&lt;/em&gt;和&lt;em&gt;wsgi.py&lt;/em&gt;的&lt;em&gt;django_project&lt;/em&gt;目录，还有一个&lt;em&gt;manage.py&lt;/em&gt;文件。  &lt;/p&gt;
&lt;h3&gt;插曲：Project vs. Apps&lt;/h3&gt;
&lt;p&gt;你也许想知道为什么除了已经存在的&lt;code&gt;startapp&lt;/code&gt;命令之外添加了新的&lt;code&gt;startproject&lt;/code&gt;命令。答案就在于Django的"projects"和"apps"的不同，在Django 1.4中有描述。简单的说，"project"是一个完整的网站或者应用。"app"是一个小的，(最好是)独立的Django应用，它可以用在任何Django项目中。比如你要创建一个叫做"Super Blogger"的博客应用，那么"Super Blogger"就是你的Django project。如果"Super Blogger"支持读者进行投票，那么"polls"就是"Super Blogger"使用的一个Django app。主要在于你的"polls"这个"app"可以被其他需要投票功能的Django项目进行重用，而不是只能在"Super Blogger"中使用。一个project是使用各自特有的逻辑将apps组合起来，而app可被用于多个project。  &lt;/p&gt;
&lt;p&gt;如果你的"Super Blogger"中有很多特殊的逻辑和信息在"polls"这个app中,避免这个有很多好处。基于&lt;strong&gt;松耦合&lt;/strong&gt;法则，编写独立完整的app能够避免你项目中设计上的决定和bugs直接影响你的app。这也意味着你可以将一些app的开发给其他的开发者去做而不需要他们进入或者修改你的主项目。  &lt;/p&gt;
&lt;p&gt;像很多软件工程中的法则一样，这只需要多做一点点却能在以后带来很大的好处。  &lt;/p&gt;
&lt;h3&gt;设置repos&lt;/h3&gt;
&lt;p&gt;由于现在在项目中已经有了一些代码(事实上只有一些脚本和空的配置文件)，现在是初始化我们的repositors的好时机。下面是使用git和Mercurial的步骤。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这创建了一个git版本库在当前的目录。现在让所有文件保存进git用于提交。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add django_project  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在将他们提交进新的版本库:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s1"&gt;&amp;#39;Initial commit of django_project&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Mercurial&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg init  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这创建了一个Mercurial版本库在当前目录。现在将所有文件保存进Mercurial用于提交。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg add django_project  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在将他们提交进新的代码库：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg commit -m &lt;span class="s1"&gt;&amp;#39;Initial commit of django_project&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你准备使用GitHub或者Bitbucket的服务，现在可以push他们了。  &lt;/p&gt;
&lt;h2&gt;使用South用于数据库迁移&lt;/h2&gt;
&lt;p&gt;一个Django中最让人蛋疼的事情就是models改动之后怎么同步的数据库了。在&lt;a href="http://south.aeracode.org/"&gt;South&lt;/a&gt;的帮助下，你只需要创建一个独立的应用而不需要任何关于数据库的特殊代码，models的变动就能被监测到并且使用South创建的&lt;em&gt;migration file&lt;/em&gt;可以自动同步到数据库。它能让你同步新的数据结构变动，也能&lt;strong&gt;回退&lt;/strong&gt;来撤销一个或者一系列改动。它让你的变得如此轻松，很奇怪为什么它没有被Django收录(有一些传言说Django中将会包含一些数据库迁移的工具，但到目前还没有)。  &lt;/p&gt;
&lt;p&gt;仍然是在我们的虚拟环境中，安装South:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install south  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启用South需要将它添加进&lt;code&gt;settings.py&lt;/code&gt;的INSTALLED_APPS中。现在添加它，同时设置好项目的数据库，然后运行&lt;code&gt;python manage.py syncdb&lt;/code&gt;。你会被提示创建一个超级用户的用户名和密码。更重要的是，South已经设置好了它需要的数据表。  &lt;/p&gt;
&lt;p&gt;你也许注意到了刚才我们只是运行了&lt;code&gt;syncdb&lt;/code&gt;而没有添加任何这这个项目的app。我们先做这个是因为South需要在最开始就被安装，我们所有apps的数据库迁移将会使用South来操作，包括数据的初始化。  &lt;/p&gt;
&lt;p&gt;由于我们刚做了相当大的变化，现在也是一个提交代码的时候。你应该养成频繁提交代码的习惯，因为你提交的越频繁，当出错的时候你选择回退点的时候会更游刃有余。  &lt;/p&gt;
&lt;p&gt;在提交的时候，让我们看看都发生了哪些改变。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(git)&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git status    
&lt;span class="c1"&gt;# On branch master  &lt;/span&gt;
&lt;span class="c1"&gt;# Changes not staged for commit:  &lt;/span&gt;
&lt;span class="c1"&gt;#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)  &lt;/span&gt;
&lt;span class="c1"&gt;#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)  &lt;/span&gt;
&lt;span class="c1"&gt;#  &lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   django_project/settings.py  &lt;/span&gt;
&lt;span class="c1"&gt;#  &lt;/span&gt;
&lt;span class="c1"&gt;# Untracked files:  &lt;/span&gt;
&lt;span class="c1"&gt;#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)  &lt;/span&gt;
&lt;span class="c1"&gt;#  &lt;/span&gt;
&lt;span class="c1"&gt;#       django_project/.settings.py.swp  &lt;/span&gt;
&lt;span class="c1"&gt;#       django_project/__init__.pyc  &lt;/span&gt;
&lt;span class="c1"&gt;#       django_project/settings.pyc  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;(Mercurial)&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg status  
M django_project/django_project/settings.py    
? django_project/django_project/.settings.py.swp  
? django_project/django_project/__init__.pyc  
? django_project/django_project/settings.pyc     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在git和Mercurial中，也许你都发现了有一些文件我们是不想提交的，比如上面的Python的编译后文件.pyc和vim的临时文件.swp等。想要忽略这些文件需要创建&lt;code&gt;.gitignore&lt;/code&gt;或者&lt;code&gt;hgignore&lt;/code&gt;，放在项目的根目录下，然后按照shell的正则表达式写入匹配这些你想忽略的文件。举个例子，我的ignore文件内容如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*.pyc  
.*swp  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在提交之前，我们还有一点信息需要去追踪:我们所安装Python包。我们想追踪他们的名称和版本以便于我们在生产中无缝地创建我们的环境。幸运的是，pip有一个命令可以完全满足我们这个需求。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze &amp;gt; requirements.txt  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我将这些通过管道输出到一个叫做&lt;code&gt;requirements.txt&lt;/code&gt;的文件中，将它加进版本控制中以便于我们经常性地更新这个列表。  &lt;/p&gt;
&lt;p&gt;将&lt;code&gt;settings.py&lt;/code&gt;和&lt;code&gt;requirements.txt&lt;/code&gt;提交:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="o"&gt;(&lt;/span&gt;git/hg&lt;span class="o"&gt;)&lt;/span&gt; add django_project/settings.py requirements.txt  
$ &lt;span class="o"&gt;(&lt;/span&gt;git/hg&lt;span class="o"&gt;)&lt;/span&gt; commit -m &lt;span class="s1"&gt;&amp;#39;Added South for database migrations&amp;#39;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建我们的APP&lt;/h2&gt;
&lt;p&gt;用一般的方法使用&lt;code&gt;manage.py&lt;/code&gt;创建一个app(&lt;code&gt;python manage.py startapp myapp&lt;/code&gt;)，然后将其添加进&lt;code&gt;settings.py&lt;/code&gt;中的&lt;code&gt;INSTALLED_APP&lt;/code&gt;。在添加models之前我们需要做的事情是告诉South我们想要用它来做数据迁移:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py schemamigration myapp --initial  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这行命令创建了一个数据迁移的文件，我们可以用它来同步数据结构的变化(如果有数据表的话)，也可以用来进行回退。我们这样使用这个文件来通过数据库变化(即使是空的):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate myapp  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;South非常的智能化，知道从哪里找迁移文件(migration file)，同时也记下了我们的上一次数据库迁移操作。你能设定独立的迁移文件，但是一般我们不需要这么做。  &lt;/p&gt;
&lt;p&gt;当我们最终改动了model，我们可以这样让South创建一次数据迁移:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py schemamigration myapp --auto  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将检查myapp中的models，然后自动地对数据库进行相应的添加、删除和修改。这些改动可以使用上面同样的命令同步到数据库。  &lt;/p&gt;
&lt;h2&gt;我们的开发目录&lt;/h2&gt;
&lt;p&gt;一个你需要养成的习惯是要在一个与你线上文件隔离的目录中进行开发，原因是显而易见的。git和Mercurial能让这变得简单并且对我们的部署也有帮助。在你部署django_project的其他地方创建一个目录作为你的开发目录(我一般命名为dev)。  &lt;/p&gt;
&lt;p&gt;在你的开发目录中，使用git和Mercurial将你的当前项目clone过来:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="o"&gt;(&lt;/span&gt;git/hg&lt;span class="o"&gt;)&lt;/span&gt; clone /path/to/my/project/  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这两个工具都会准确的将项目拷贝过来，包括所有的改动、分支(branches)和历史记录。从现在起，你应该在你的开发目录中工作。  &lt;/p&gt;
&lt;p&gt;由于git和Mercurial的分支使用起来都非常的简便，当你的开发与你的线上项目有交叉的时候，可以创建一个分支。使用下面的分别是两种版本控制系统的操作方法:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(git)&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout -b &amp;lt;branchname&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将创建一个已经命名了的分支，同时切换到该分支上。你所做的所有开发基本都应该在一个分支上进行，这样主分支(master)就能作为生产环境下主分支(master)的一个备份，任何你想恢复的时候都能够使用它。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(Mercurial)&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg branch &amp;lt;branchname&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，在Mercurial社区中分支是一个存在争议的话题，虽然有很多有用的选择，但是没有一个“显然正确”的答案。在这里，我使用一个命名了的分支，这是最安全和有用的创建分支的风格。在这个分支下所做的一切提交都只在这个分支有效。  &lt;/p&gt;
&lt;h2&gt;使用Fabric来部署&lt;/h2&gt;
&lt;p&gt;现在我们做好了一个Django应用，该怎么部署它呢？&lt;a href="http://docs.fabfile.org/en/1.7/"&gt;Fabric&lt;/a&gt;。对于一个规模合理的项目来说，讨论其他的都是浪费时间。Fabric有很多的用途，但在项目部署上是一个亮点。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install fabric  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fabric需要一个命名为&lt;code&gt;fabfile.py&lt;/code&gt;的文件&lt;em&gt;fabfile&lt;/em&gt;，它定义了所有我们能做的操作。现在开始，在&lt;code&gt;fibfile.py&lt;/code&gt;中写入如下内容，然后放在项目的根目录下。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare_development&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brance_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python manage.py test django_project&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add -p &amp;amp;&amp;amp; git commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# or local(&amp;#39;hg add &amp;amp;&amp;amp; hg commit)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码会运行测试代码然后提交变更，但是&lt;em&gt;仅在通过了你的测试代码&lt;/em&gt;的情况下。这时候，当你在生产环境下做"pull"操作的时候就变作了一次部署。让我们为实际部署时的文件多添加一些代码:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/path/to/my/prod/area/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="c1"&gt;# with git…  &lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git pull /my/path/to/dev/area/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# with Mercurial  &lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hg pull /my/path/to/dev/area/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hg update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# with both  &lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python manage.py migrate myapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python manage.py test myapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/my/command/to/restart/webserver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码将从你开发环境下的主分支拉取代码，运行一些数据库迁移文件，运行你的测试代码，然后重启web服务器。所有的这些在终端中一行命令就能够搞定。一旦这些步骤中某一步出错，这个脚本就会停止执行并且给出提示信息。一旦你修复好，不需要手动运行这些步骤。你可以简单的重新运行部署命令，一切就都好了。  &lt;/p&gt;
&lt;p&gt;注意：上面这些代码是假定你的开发环境和部署环境是在同一台机器上的，如果不是这样，代码大部分也是相同的，但是需要使用Fabric的&lt;code&gt;run&lt;/code&gt;方法代替&lt;code&gt;local&lt;/code&gt;。具体可以阅读&lt;a href="http://docs.fabfile.org/en/1.7/"&gt;Fabric的文档&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;现在我们创建好了&lt;code&gt;fabfile.py&lt;/code&gt;，该怎么部署呢？简单，只需要运行:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab prepare_deployment  
$ fab deploy  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从技术上来说，这两个命令可以合二为一，但是我发现将准备部署和实际部署操作分开能让你更加理解你到底在做什么。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sun, 01 Sep 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-09-01:start-django1.4-right-way.html</guid><category>django</category></item><item><title>Messenger弹窗组件的使用</title><link>http://blog.everlose.com/jquery-messenger-plugin.html</link><description>&lt;p&gt;Messenger跟它的&lt;a href="http://github.hubspot.com/messenger/"&gt;官方文档&lt;/a&gt;介绍的一样,是一个非常酷的弹框组件,&lt;strong&gt;Alerts for 21st century&lt;/strong&gt;，名不虚传.  &lt;/p&gt;
&lt;h2&gt;依赖&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;jQuery    &lt;/li&gt;
&lt;li&gt;Backbone.js  &lt;/li&gt;
&lt;li&gt;可以和Bootstrap完美融合,但Bootstrap并不是必须的  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JS文件和基本的CSS文件&lt;/h2&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/build/js/messenger.min.js  
/build/css/messenger.css
/build/css/messenger-theme-future.css
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;有四种主题可选,弹出框有6个位置可供选择&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Future 对应 &lt;code&gt;messenger-theme-future.css&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;Block  对应 &lt;code&gt;messenger-theme-block.css&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Air    对应 &lt;code&gt;messenger-theme-air.css&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Ice    对应 &lt;code&gt;messenger-theme-ice.css&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择哪种主题,就需要加入该主题的css文件.弹出框的位置和demo可以参看&lt;a href="http://github.hubspot.com/messenger/"&gt;官方文档&lt;/a&gt;.   &lt;/p&gt;
&lt;h2&gt;用作提示框&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;使用messenger来做各种的弹框是非常合适的,他的ui非常的美观,而且使用非常的简单.  &lt;br /&gt;
首先,设定弹出框的默认形式,弹出位置和主题,以Block为主题，再顶部弹出,代码如下:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_messengerDefaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;extraClasses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;messenger-fixed messenger-theme-block messenger-on-top&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若是使用django的话,将该行代码放进base模板中,则每个页面的弹框样式就指定了.此外,默认的样式可以更改,在使用时重新指定后,默认的样式就会被覆盖.     &lt;/p&gt;
&lt;p&gt;以下一行代码就能实现一个美观的弹出窗口.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your request has succeded!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并且,messenger支持ajax和事件,功能非常强大,几乎可以满足网页中所有情况下弹框需求.    &lt;/p&gt;
&lt;h2&gt;用于表单验证&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;因为messenger支持ajax,与jQuery的$.ajax方法结合的非常好,所以我便试着将于用于Django项目的表单验证.    &lt;/p&gt;
&lt;p&gt;话不多说,直接上代码.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.btn-register&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_terms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:checked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;  &lt;span class="c1"&gt;// 未同意服务条款不给提交&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pass_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="c1"&gt;// 验证用户名是否重复&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;
                    &lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;服务器错误,请稍后重试!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;hideAfter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;showCloseButton&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                &lt;span class="p"&gt;},{&lt;/span&gt;
                    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/username_check/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;async&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 将字符串转化为字典&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                            &lt;span class="nx"&gt;pass_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;用户名为空或者该用户名已经存在&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="c1"&gt;// 验证邮箱格式&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pass_check&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;
                        &lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;服务器错误,请稍后重试!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^((([a-z]|\d|[!#\$%&amp;amp;&amp;#39;\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;amp;&amp;#39;\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                                &lt;span class="nx"&gt;pass_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                                        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;邮箱为空或者格式错误&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="nx"&gt;hideAfter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="nx"&gt;showCloseButton&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                                    &lt;span class="p"&gt;});&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// 验证邮箱是否已经被注册&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pass_check&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;
                        &lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;服务器错误,请稍后重试!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nx"&gt;hideAfter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nx"&gt;showCloseButton&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                    &lt;span class="p"&gt;},{&lt;/span&gt;
                        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/email_check/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nx"&gt;async&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 将字符串转化为字典&lt;/span&gt;
                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                                &lt;span class="nx"&gt;pass_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; 该邮箱已经被注册&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// 验证密码是否一致&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pass_check&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;
                        &lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;服务器错误,请稍后重试!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;password1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_password1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;password1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;password1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                                &lt;span class="nx"&gt;pass_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                                        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;密码为空或者密码不一致&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="nx"&gt;hideAfter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="nx"&gt;showCloseButton&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                                    &lt;span class="p"&gt;});&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pass_check&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_register_form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// 提交form&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalMessenger&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;请阅读并同意服务条款!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;hideAfter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;showCloseButton&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上代码,在点击提交按钮后先进行表单验证,验证通过后才提交表单.  &lt;br /&gt;
但这里面有个坑,一定要将ajax异步关闭,即&lt;code&gt;async:false&lt;/code&gt;一定要加上,否则在进行一项验证的时候,代码会继续执行,等表单提交后才将标志&lt;code&gt;pass_check&lt;/code&gt;置为&lt;code&gt;false&lt;/code&gt;.  &lt;br /&gt;
&lt;strong&gt;注&lt;/strong&gt;:代码作实例,不够优美.    &lt;/p&gt;
&lt;p&gt;总结:Messenger是一个非常棒的弹框组件,你值得拥有!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Tue, 30 Jul 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-07-30:jquery-messenger-plugin.html</guid><category>jquery</category><category>plugin</category></item><item><title>ubuntu下安装与配置phpMyAdmin</title><link>http://blog.everlose.com/ubuntu-mysql-phpmyadmin.html</link><description>&lt;p&gt;ubuntu下安装和配置phpMyAdmin非常的简单。&lt;br /&gt;
安装:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install phpmyadmin  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在安装过程中会要求输入几次密码，按照提示输入就好。  &lt;/p&gt;
&lt;p&gt;安装完成后将&lt;code&gt;/usr/share/&lt;/code&gt; 下的phpmyadmin文件夹复制到&lt;code&gt;/var/www/&lt;/code&gt; 下。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp -r /usr/share/phpmyadmin /var/www/  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在浏览器中输入http://localhost/phpmyadmin即可访问。  &lt;/p&gt;
&lt;p&gt;如果出现&lt;code&gt;The mysqli extension is missing.&lt;/code&gt;的错误，运行命令  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次打开即可。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sun, 28 Jul 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-07-28:ubuntu-mysql-phpmyadmin.html</guid><category>mysql</category></item><item><title>前端那些事儿</title><link>http://blog.everlose.com/web-staffs.html</link><description>&lt;h3&gt;1.IE10中无端不显示png图片&lt;/h3&gt;
&lt;p&gt;一个纠结了近一个月的问题：公司网站，IE10中突然不显示png图片，图片区域空白。而在其他浏览器以及之前各版本的IE中均正常。查看源码加载完全正确，让人完全摸不着头脑。  &lt;/p&gt;
&lt;p&gt;尝试完各种方法，依然误解。今天使用IE的那个破烂不堪的调试工具(按F12调出),突然有了发现，居然在这里显示的图片路径被篡改了，虽然查看源码中的路径正确。于是断定是js在捣鬼。  &lt;/p&gt;
&lt;p&gt;一翻寻找之后发现了这么一段JS:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*****png透明*****/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;browser&lt;span class="o"&gt;.&lt;/span&gt;msie&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;browser&lt;span class="o"&gt;.&lt;/span&gt;version&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&amp;lt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;some&lt;span class="w"&gt; &lt;/span&gt;code&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;坑啊，这段代码没有考虑到IE版本到10的情况，于是在版本为10时也会执行，其中有将png图片路径修改的代码(定位到另一个图片)，用于处理png在IE中的透明问题。这样IE10中的所有png图片都透明了。坑死人啊。  &lt;/p&gt;
&lt;p&gt;将代码改成如下，解决了问题(但这种处理方法只能用于jquery&amp;lt;1.9的情况):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*****png透明*****/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;browser&lt;span class="o"&gt;.&lt;/span&gt;msie&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;parseFloat&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;browser&lt;span class="o"&gt;.&lt;/span&gt;version&lt;span class="o"&gt;)&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;some&lt;span class="w"&gt; &lt;/span&gt;code&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里主要就是要判断IE的版本，在不需要png透明处理的IE版本中不执行该代码。&lt;br /&gt;
&lt;a href="http://www.jquery4u.com/browsers-2/check-ie-version/"&gt;这里&lt;/a&gt;可以查看判断IE版本的多个方法。  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;IE很坑爹，但这次是写js大意了。&lt;/em&gt;  &lt;/p&gt;
&lt;hr /&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Wed, 10 Jul 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-07-10:web-staffs.html</guid><category>css</category><category>js</category></item><item><title>Django中的那些事儿</title><link>http://blog.everlose.com/django-staffs.html</link><description>&lt;h3&gt;xgettext: command not found&lt;/h3&gt;
&lt;p&gt;今天在mbp上做django的国际化，使用命令&lt;code&gt;django-admin.py makemessages -l zh_CN&lt;/code&gt;却出现如下错误：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="n"&gt;happened&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;xgettext&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;  
&lt;span class="sr"&gt;/bin/s&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xgettext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install gettext  
brew link gettext  --force  
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Tue, 09 Jul 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-07-09:django-staffs.html</guid><category>django</category></item><item><title>那些我喜欢的话语</title><link>http://blog.everlose.com/words-i-like.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.生命若给我无数张面孔，我永远选择最疼痛的一张去触摸。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.我想去相信一个人，非常想。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.要有最朴素的生活，与最遥远的距离，即使明日天寒地冻，路远马亡。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.因为是血肉相连的亲人。所以许多话反而成为禁忌。交流是羞耻，亲近是羞耻。唯有通过相互苛求和中伤来表达对彼此的爱，才是理所当然，这是多可悲的事实。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.我见过你最深情的面孔和最柔软的笑意，在炎凉的世态之中，给与我苟且的能力，边走边爱。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6.在青春之书里，我们同在一行字之间。被窝是青春的坟墓。关于少年时代，冷暖自知，最朴素的生活，与最遥远的梦想。这一切将在被回忆肆意篡改的书写下，渐渐抽象成一些雾一样的尘埃，浮在梦境之外的空茫黑暗中，日日夜夜不停坠落，终会尘埃落定。在我们希望和愿欲的深处，隐藏着对青春的默识。如同种子在雪下静静梦想。所以你要知道我将在更大的沉默中归来。青春是生活最温暖的被窝，是生命最华丽的裙袂。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7.我清醒，他因为信任我，使我成为他内心秘密的第一个知情者。他是一个喜欢男孩的男孩，那些年我在寂寞而伤感地想念着他的时候，他也同样，甚至更为艰苦卓绝的，想念着另一个无法企及的人。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8.若得其情，哀矜勿喜。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;9.你不会忘记我，你不需要忘记我，我对于你来说是那么轻，你可以将我当作周日下午的棉花糖一样，不时吃一下，调调生活的味儿。你一个的时候会想念我，想念我对你的执念，想：我遇到过一个热烈的女子，我却要话一生的时间去忘记，去与想念与希望作斗争；事情从来就不会公平，我玩一场必输的赌局，赔上一生的情动。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10.也许一个人要走很长的路，经过生命中无数突如其来的繁华和苍凉才会变得成熟。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11.太阳尚远，但必有太阳。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12.在每一段赤诚的叙述或者会议之前，都是困顿。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;13.十禾说，给我一条路，我来教你怎么走。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;14.有时候明白人的一生当中，深刻的想念是维系自己与记忆的纽带，它维系着所有的过往，悲喜，亦指引我们深入茫茫命途，这是我们宿命的背负，但我始终甘之如饴的承受。它的沉沉重量，用以平衡平浮的生。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;15.只有记忆成了身外之物，我们才可以在这陵园一样的人间，走得远些。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16.我们明明都会料到事情的结局，却要走很长一段很远的行程去探求它的意义。我们的路途，不过是毫无意义的上演一个闹剧的圆。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;17.这个城市没有草长莺飞的传说，他永远活在现实里面，快速的鼓点，匆匆的身影，麻木的眼神，虚假的笑容。而我，正在被同化。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;18.想念只是一种仪式，真正的记忆与生俱来。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.如果没有别离，成长也就无所附丽。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20.在这个把回头看作软弱和耻辱的世界上。走的再远，也终究到达不了想要的永远。走的再近，也终究回不到想要的梦境。人永远是一种被内心的遗憾和憧憬所奴役的生物，夹在生命的单行道上，走不远也回不去。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;21.一些事情渐渐变得淡灭，你知道他存在过，但却忘记他怎样存在过。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;22.陌路尽头，撒去一抹惨淡暗白的骨灰，有多少淡漠的人情能够留得住厚养薄葬的遗憾，在倍于的挽歌的尾音上，给这尊尊沉默的青坪下孤孑的魂灵叩首，而在这朝生暮死之间，有多少尸骨未寒的魂灵遁入空寂，却在人世间再也捞不起一丝纪念。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;23.我开始相信，每个人都有自己要背负的十字架。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;24.遇到你，我尚是一张白纸。你不过在纸上写了第一个字，给了一生的情动，心底有了波澜。但我知道波澜总归与平静。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;25.我说人生啊，如果尝过一回痛快淋漓的风景，写一篇杜鹃啼血的文章，写一个赏心悦目的人错看，也就够了…    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;26.Some how I will show you that you are my night sky.   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;27.人事音书，亦不过是冷漠，那些苍白的反抗之后，有更苍白的妥协接踵而来。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;28.两个人最好是不要在一起。。。。也不要在一起。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;29。浅浅的睡眠，沉沉的梦幻。醒来，你已在彼岸。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;30.那是从来不曾悲伤的坐在我身边的你，那是从来不曾快乐的坐在你身边的我--可悲的是，在曲终人散之后，我才恍悟，原来再也不能有你坐在身边，这才是我真正的不快乐。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;31.我们都对了还是错了，我们都爱了还是忘了，走的时候你是哭了还是怎的，我只是疼了但还是笑了。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-07-01:words-i-like.html</guid><category>memories</category></item><item><title>终于毕业了</title><link>http://blog.everlose.com/graduate-college.html</link><description>&lt;p&gt;等了四年，终于等来了毕业的时候。是的，当我四年前踏进大学的校门的时候就开始盼望毕业。&lt;br /&gt;
从公司回学校一眨眼快要一个月了，而我还要再等几天，等拿到那两张证书。我对两张纸没有任何兴趣，只是我需要用他们来给父母一个交代。  &lt;/p&gt;
&lt;p&gt;如果可以重来一次，我也不知道我会在哪里过完这宝贵的四年，我也不知道我会在做什么。如果有如果，或许一切完全会不一样。回来这些天，想明白了一件事情，过于执着不会有什么好处，人生应该该坚持坚持，该放弃放弃。  &lt;/p&gt;
&lt;p&gt;大学前两年，我还一直想着心里的梦想，太过执着，感觉世界都变了。那些日子，看什么都不顺眼，为什么老天如此不公。我恨学校，恨自己，恨爸妈，恨整个世界。最终的结果只是让自己越来越消沉。短短几个月，让我原来跑完1万米都毫无压力的我，爬个楼梯都气喘嘘嘘。整天郁郁寡欢，整个一神经病。&lt;br /&gt;
那几百天，我没有好好去上一节课，没好好看一页书，没好好跟同学说一句话。我想的就是赶紧过完这四年，我可以再次选择我的道路。&lt;br /&gt;
到了大三，或许是年龄的增长，或许是看到父母的不易，更重要的是看到父母那对我依然满满的期待，我觉得不能再混下去。一翻摸索之后，我选了一个我最喜欢的编程语言--Python，开始静心学习。从那一刻起，虽心未死，但已经不再执着。  &lt;/p&gt;
&lt;p&gt;事情发展还算顺利，临近大四，我开始了我的实习。我自知，在编程方面没有天赋，可能永远达不到“牛人”这一级别。因为缺乏最原始的动力--爱好。虽然越来越喜欢在电脑前coding，也能一直写着代码到废寝忘食，但每走一步还是战战兢兢，不像做其他事情时那样信心满满。身边的朋友也一直在鼓动我改行，而我确实不知道除了编程我还能干嘛。此外，除了偶尔回家跟老朋友一起打场篮球，只有编程能带给我些许的快感了。四年，我失去了很多，那些特别宝贵的东西。  &lt;/p&gt;
&lt;p&gt;马上毕业了，如释重负。回到公司工作也不再有学校的事情羁绊，我能完全安心工作。不用待在一个让自己很不开心的城市，身体和心情都会好很多。到了现在，我还不明白大学的意义是什么，对于我来说，完全是浪费。  &lt;/p&gt;
&lt;p&gt;现在我对于很多事情不再执着，不再那么死心眼。四年也让我明白，我不再拥有任何过人之处，只是一个非常非常普通的程序员。我需要从最初级开始，慢慢努力，一步步提高自己的能力。其实一切没那么糟，我能有一份工作，身体还算健康，能基本达到父母的要求，生活没有大的波澜。安静，一直是我喜欢的生活。以前是我心太高，现在我需要认清自己，脚踏实地，一步步向前。  &lt;/p&gt;
&lt;p&gt;回忆大学，满满都是遗憾。我最后悔的是浪费了这宝贵的时光。现在对时间很敏感，甚至跟别人一起走路时，别人走的慢都会觉得太浪费时间而感到恼火。或许这就叫失去了才懂的珍惜，还好来日方长。  &lt;/p&gt;
&lt;p&gt;回校这几天，校园网不支持mac，让我离开了电脑很久。这些时间，我抽空跑去拜访了几位高中挚友，也是一辈子的兄弟。时间都很短，跟他们在一起的时间真是快乐，舒服。感谢你们。  &lt;/p&gt;
&lt;p&gt;最近一直在听庞龙的&lt;code&gt;兄弟，抱一下&lt;/code&gt;,或许几年后，歌词的意境更符合大家的心情。摘录下来，送给你们，我的兄弟，抱一下。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;兄弟你瘦了 看着疲惫啊&lt;br /&gt;
一路风尘盖不住 岁月的脸颊&lt;br /&gt;
兄弟你变了 变得沉默了&lt;br /&gt;
说说吧 那些放在 心里的话&lt;br /&gt;
兄弟我们的青春 就是长在那心底&lt;br /&gt;
经过风吹雨打 才会开的花&lt;br /&gt;
兄弟你说了 以后就不拼了&lt;br /&gt;
只想做爱情的傻瓜 只想安稳有个家&lt;br /&gt;
是啊我们都变了 变的现实了&lt;br /&gt;
不再去说那些年少热血的话&lt;br /&gt;
兄弟我们都像是 山坡滚落的石子&lt;br /&gt;
都在颠碰之中磨掉了尖牙&lt;br /&gt;
兄弟抱一下 说说你心里话&lt;br /&gt;
说尽这些年你的委屈 和沧桑变化&lt;br /&gt;
兄弟抱一下 有泪你就流吧&lt;br /&gt;
流尽这些年深埋的 辛酸和苦辣  &lt;/p&gt;
&lt;p&gt;兄弟你说了 以后就不拼了&lt;br /&gt;
只想做爱情的傻瓜 只想安稳有个家&lt;br /&gt;
是啊我们都变了 变的现实了&lt;br /&gt;
不再去说那些年少热血的话&lt;br /&gt;
兄弟我们都像是 山坡滚落的石子&lt;br /&gt;
都在颠碰之中磨掉了尖牙&lt;br /&gt;
兄弟抱一下 说说你心里话&lt;br /&gt;
说尽这些年你的委屈 和沧桑变化&lt;br /&gt;
兄弟抱一下 为岁月的牵挂&lt;br /&gt;
为那心中曾翻滚的 汹涌的浪花&lt;br /&gt;
为哥们并肩走过的 青春的年华  &lt;/p&gt;
&lt;p&gt;兄弟抱一下 说说你心里话&lt;br /&gt;
说尽这些年你的委屈 和沧桑变化&lt;br /&gt;
兄弟抱一下 有泪你就流吧&lt;br /&gt;
流尽这些年深埋的 辛酸和苦辣&lt;br /&gt;
让深埋的话抚慰那久违的泪花  &lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 24 Jun 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-06-24:graduate-college.html</guid><category>memories</category></item><item><title>python正则表达式---re(1)</title><link>http://blog.everlose.com/python-re-1.html</link><description>&lt;p&gt;正则表达式(regular expression)是一种用形式化语法描述的文本匹配模式。在需要处理大量文本处理的应用中有广泛的使用，我没使用的编辑器，IDE中的搜索常用正则表达式作为搜索模式。玩过*nix系统的都知道如sed，grep,awk这类的命令，他们是非常强大的文本处理工具。几乎所有的语言都有对正则表达式的支持，有的直接在语法中支持，有的使用扩展库的形式。python使用的就是扩展库re。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;re.search(pattern,string,flag=0)&lt;br /&gt;
搜索文本中的匹配的模式是最常用的.以模式和文本作为输入，如果有匹配则返回一个Match对象，反之返回None。&lt;br /&gt;
每个Match对象包括相关的匹配信息:原字符串、正则表达式和匹配的文本在字符串中的位置。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Does this text match the pattern?&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 返回一个Match对象  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;  &lt;span class="c1"&gt;# 要匹配的正则表达式&amp;quot;this&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;      &lt;span class="c1"&gt;# 匹配的文本&amp;quot;Does this match the pattern?&amp;quot;  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# 匹配的开始位置 5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;       &lt;span class="c1"&gt;# 匹配的结束位置 9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;re.compile(pattern,flag=0)&lt;br /&gt;
如果程序中频繁的使用到同一个正则表达式，每次使用的时候都写一遍正则表达式不仅不高效而且会大大增加出错的几率,re提供了compile函数将一个表达式字符串编译为一个RegexObject。&lt;br /&gt;
模块级函数会维护已编译表达式的一个缓存，而这个缓存是的大小是有限制的。直接使用已经编译的表达式可以避免缓存查找的开销，并且在加载模块时就会预编译所有的表达式。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Does this text match the pattern?&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;#返回匹配的字符串   &lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not match&amp;quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;re.findall(pattern, string, flag=0)&lt;br /&gt;
使用search会返回匹配的单个实例，使用findall会返回所有匹配的不重叠的子串。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abbaaabbbbaaaaaa&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 返回[&amp;#39;ab&amp;#39;, &amp;#39;ab&amp;#39;]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;re.finditer(pattern, string, flag=0)&lt;br /&gt;
finditer会返回一个迭代器，会生成Match实例，不像findall()返回字符串.  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abbaaabbbbaaaaaa&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上的例子会分别输出两次匹配结果的起始位置和结束位置。  &lt;/p&gt;
&lt;p&gt;正则匹配默认采用的是贪婪算法，也就是说会re在匹配的时候会利用尽可能多的输入，而使用？可以关闭这种贪心行为，只匹配最少的输入。这之前先说下量词。  &lt;/p&gt;
&lt;p&gt;量词是为了简化正则表达式的读写而定义的，通用的形式是{m,n},这表示匹配的个数至少是m，最多是n，在','之后不能有空格，否则会出错，并且均为闭区间。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{n}     之前的元素必须出现n次&lt;br /&gt;
{m,n}   之前元素最少出现m次，最多n次&lt;br /&gt;
{m,}    之前的元素最少出现m次，无上限&lt;br /&gt;
{0,n}   之前的元素可以不出现，也可以出现，出现的话最多出现n次  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了之上，还有三个常用的量词*,?和+  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;*      等价于{0,}&lt;br /&gt;
+      等价于{1,}&lt;br /&gt;
\?      等价于{0,1}  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有^和$，分别表示段或者字符串的开始与结束。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^travell?er$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;traveler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# True  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^travell?er$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;traveller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# True   &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^ab\*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abbbbbbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# True,返回&amp;quot;abbbbbbb&amp;quot; &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^ab\*?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abbbbbbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# True,返回&amp;quot;a&amp;quot;  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^ab+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abbbbbbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# True,返回&amp;quot;abbbbbbb&amp;quot; &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^ab+?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abbbbbbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# True,返回&amp;quot;ab&amp;quot;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 06 May 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-05-06:python-re-1.html</guid><category>re</category></item><item><title>python正则表达式---re(2)</title><link>http://blog.everlose.com/python-re-2.html</link><description>&lt;p&gt;对于一些预定义的字符集可以使用转义码可以更加紧凑的表示，re可以识别的转义码有3对，6个，分别为三个字母的大小写，他们的意义是相反的。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;\d : 一个数字&lt;br /&gt;
\D : 一个非数字&lt;br /&gt;
\w : 字母或者数字  &lt;br /&gt;
\W : 非字母，非数字&lt;br /&gt;
\s : 空白符（制表符，空格，换行符等）&lt;br /&gt;
\S : 非空白符  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果想指定匹配的内容在文本的相对位置，可以使用锚定，跟转义码类似。   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;^ 字符或行的开始&lt;br /&gt;
$ 字符或行的结束&lt;br /&gt;
\A 字符串的开始&lt;br /&gt;
\Z 字符串结束&lt;br /&gt;
\b 一个单词开头或者末尾的空串&lt;br /&gt;
\B 不在一个单词开头或末尾的空串  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;the_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is some text -- with punctuation&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^\w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# This&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\A\w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# This  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w+\S*$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# punctuation  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w+\S*\Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# punctuation  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w*t\W*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# text --  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\bt\w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# text  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\Bt*\B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# 没有匹配  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用组来解析匹配，简单的说就是在一个正则表达式中有几个小括号()将匹配的表达式分成不同的组，使用group()函数来获取某个组的匹配，其中0为整个正则表达式所匹配的内容，后面从1开始从左往右依次获取每个组的匹配，即每个小括号中的匹配。使用groups()可以获取所有的匹配内容。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;the_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--aabb123bbaa&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;r&amp;#39;(\W+)([a-z]+)(\d+)(\D+)&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# (&amp;#39;--&amp;#39;, &amp;#39;aabb&amp;#39;, &amp;#39;123&amp;#39;, &amp;#39;bbaa&amp;#39;) &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;#39;--aabb123bbaa&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;#39;--&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;#39;aabb&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;#39;123&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;#39;bbaa&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python对分组的语法做了扩展，我们可以对每个分组进行命名，这样便可以使用名称来调用。语法:&lt;code&gt;(?P&amp;lt;name&amp;gt;pattern)&lt;/code&gt;,使用groupdict()可以返回一个包含了组名的字典。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;the_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--aabb123bbaa&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;r&amp;#39;(?P&amp;lt;not_al_and_num&amp;gt;\W+)(?P&amp;lt;al&amp;gt;[a-z]+)(?P&amp;lt;num&amp;gt;\d+)(?P&amp;lt;not_num&amp;gt;\D+)&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# (&amp;#39;--&amp;#39;, &amp;#39;aabb&amp;#39;, &amp;#39;123&amp;#39;, &amp;#39;bbaa&amp;#39;)  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupdict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# {&amp;#39;not_al_and_num&amp;#39;: &amp;#39;--&amp;#39;, &amp;#39;not_num&amp;#39;: &amp;#39;bbaa&amp;#39;, &amp;#39;num&amp;#39;: &amp;#39;123&amp;#39;, &amp;#39;al&amp;#39;: &amp;#39;aabb&amp;#39;}  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;# &amp;#39;--aabb123bbaa&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;# &amp;#39;--&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;# &amp;#39;aabb&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;# &amp;#39;123&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;# &amp;#39;bbaa&amp;#39;   &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;not_al_and_num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;#39;--&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;al&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;# &amp;#39;aabb&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="c1"&gt;# &amp;#39;123&amp;#39; &amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;not_num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# &amp;#39;bbaa&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上的group()方法在使用的时候需要注意，只有在有匹配的时候才会正常运行，否则会抛错，所以在不能保证有匹配而又要输出匹配结果的时候，必须做校验。  &lt;/p&gt;
&lt;p&gt;在re中可以设置不通的标志，也就是search()和compile()等中都包含的缺省变量flag。使用标志可以进行完成一些特殊的要求，如忽略大小写，多行搜索等。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="n"&gt;the_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this Text&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\bt\w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# [&amp;#39;this&amp;#39;]  &lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\bt\w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [&amp;#39;this&amp;#39;, &amp;#39;Text&amp;#39;]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于搜索选项有很多，具体可&lt;a href="http://docs.python.org/2/library/re.html#module-re"&gt;查看文档&lt;/a&gt; http://docs.python.org/2/library/re.html#module-re  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Mon, 06 May 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-05-06:python-re-2.html</guid><category>re</category></item><item><title>我是怎么成为一名pythoner的</title><link>http://blog.everlose.com/to-be-a-pythoner.html</link><description>&lt;blockquote&gt;
&lt;p&gt;题外:&lt;br /&gt;
这篇文是之前打算写来用于参加sae论坛的征文活动的，可是一直没空下来，所幸得五一假期。看了下征文的类型，都多想能写技术类文章，无奈我一菜鸟，仍在不断学习中，懂的越多，不懂也越多，发现自己原来理解里曾有那么多的错误与偏差。不怕贻笑大方，只怕会给新手以误导。还好，可以写所谓&lt;code&gt;程序人生&lt;/code&gt;中的人和事，那么，我就谈谈我自己吧，说说我是怎么会成为一名pythoner的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我身边没有人会想到，我会成为一名程序员。他人不会知道我的理想也不知道我的所长，即使这样，直到现在很多人在知道我是一名程序员之后还会惊讶，就是说，在他们的认识中，我的职业绝对不会跟计算机有任何瓜葛。而我自己回想，也完全不明白，为什么最终我会做一名pythoner，我一直明确的知道自己的理想，虽然有几次的变换，但是计算机一直在千里之外。或许可以说这是中国高考可笑的改变命运之处，而我现在更愿意理解为这些在冥冥中已经注定，即使我一直远离计算机，但它终究会成为我的一部分。  &lt;/p&gt;
&lt;h3&gt;完全不懂计算机&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;我想我的情况会是比较特殊的，小学就接触了计算机，并不算迟。记得那个时候，网吧刚开始风靡，身边大片的同学开始沉迷，红警，CS等等让他们欲罢不能。父母起初对我进行各种关于网吧危害的灌输，但说了两三次之后就没有再说过，他们也发现，电脑对我没有一点吸引力。他们的判断是对的。身边的同学对我进行各种“勾引”，我也去看过两次，但之后没有去过。那些他们说起来津津有味的东西在我看来无聊之极。直到今年我即将大学毕业，我进入网吧的次数屈指可数。小学已经有了&lt;code&gt;信息技术课&lt;/code&gt;,就是大家到学校机房玩一节课。起初条件不好，上一次课老师需要几十分钟来开机，电脑没有鼠标，两个同学一台电脑。虽然，因为老师对我特殊的照顾，我一个人就拥有一台电脑，这点让同学们都很羡慕，但是我几节课之后就把我的电脑让给同学了，自己跑去跟别人一组打酱油。一句话总结，电脑对那时候的我没有一点的吸引力，是我认识浅薄，那是我觉得电脑就是一台高级游戏机，而我是游戏白痴。  &lt;/p&gt;
&lt;p&gt;这样的状态一直持续到初中毕业。其实这期间，web2.0已经进入的很棒的时期，互联网也在发生着日新月异的变化，现在后悔错过，但那时的我完全不在意。同样的，身边的同学基本都有了qq，也一再要求我申请一个，而我根本不知道qq是什么，也没有一点想法。我的qq是初中同学给我申请的，我搁置了近一年，后来才开始使用。我拥有的只有最基础的计算机技能，使用word，学了点frontpage和处理一些简单的问题，再无其他。  &lt;/p&gt;
&lt;p&gt;我并不排斥电脑，也能很容易的接触到电脑，只是不感兴趣，而不感兴趣是因为我有更感兴趣的东西。那时候我是一名运动员，每天两练，习惯了汗珠滴下的感觉。空闲时间啃书，喜欢各类严肃的文学，余秋雨、朱自清、村上之类。一静一动让我无比忙碌与充实。运动员的身份一直保持到高三，之后再没有继续注册，而啃书保持到了高一，之后忙于课业阅读量少的可怜。跑步给我激情，阅读给我思想，两者都是我无比热爱的。所以，开始我的理想是做个优秀的运动员，后来认识到没条件，就决定要考北体，做体育记者，这样两者都不会抛弃，我也一直为之努力着。直到我高三，我还坚定的认为我必须这么走我的人生，从始至终无关it。  &lt;/p&gt;
&lt;h3&gt;一场考试，确实改变了人生&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;曾经多少人告诉我，高考能决定一生。我从来不信，但是现在我信了，好在虽然经历波澜，但是最终归于不惊。  &lt;/p&gt;
&lt;p&gt;至于为什么我大学进入了CS专业，不想多说，大家都懂的，很多时候自己决定不了自己的人生。最终结果是，我进入了一所普通大学的CS专业，虽然我高考分数不低。我不满意专业，更不满意专业，那时的我其他的都不想学。瞬间我的情绪和激情全无。我开始抗拒，我一直认为大一是我到目前为止人生最低落的时期。近一年，我回到了原来啃书的日子，课程我没有一点兴趣，好在大学有图书馆，于是我总是会埋进书堆，那些日子看了很多文字。在学校待的郁闷了就出去转转。日子倒是轻松，没有外界的任何压力，而内心的压力更让人难以招架。我认为我完了。  &lt;/p&gt;
&lt;p&gt;虽然对编程没有一点兴趣，但有了大量的时间，一台电脑和网络，我泡在网上的时间很多。或许是潜移默化，我对这个陌生的领域开始慢慢了解，即使如此也没有完全改变我的想法，我想着混个证书，到时候另谋出路。  &lt;/p&gt;
&lt;p&gt;而或许我是注定会走上coding的道路的，我的性格跟程序员的普遍性格非常的契合。我喜欢安静，超级宅，夜猫子，少言，内向，一个问题不解决或者一本喜欢的书不读完就不睡觉，。。。。。。或许我要感谢windows虽然我一直讨厌它，因为开启我编程之门的钥匙就是一次xp的蓝屏。  &lt;/p&gt;
&lt;p&gt;应该是那一年的愚人节，一位学长给我发了一段恶搞视频，就是前面非常没好最后突然出鬼的那种。而视频带毒，马上我的电脑蓝屏了，重启也没能解决。这下立马超出我的能力范围了。第二天，我去售后，立马坑爹的就来了，虽然我电脑才买了一年，不给免费修不说开出的价格也大大超出了我的预期。我一怒之下决定回去自己修。于是，我借了台电脑，开始了漫漫的搜索学习和修电脑之路。其实，现在看来就是简单的重装系统那么简单的事情，而那时候我折腾了一个礼拜。而就是这一个礼拜，完全开启了我通向编程人生的道路。我想每个programmer在第一次重装系统的时候都会遇到各种状况（当然也会有很多顺利的，大量一键装机光盘啊，都懂的）。那一个礼拜，我逛了大量论坛，读了一个又一个教程，最后电脑完全修复了，但是我开心的不是我修好了电脑，而是在我其中，我知道了Linux。  &lt;/p&gt;
&lt;p&gt;跟很多大牛比起来，我接触linux的时候已经大二，着实晚，而且更不好意思的是我使用的第一个发行版是YLMF OS，哈哈，是不是很亲切的YLMF。回到上文。我修好电脑之后又立马决定不要windows了，就此开始了我的折腾之路。那时候傻傻的买了一堆的空盘，下载了第一个YLMF的iso，刻好就开始安装。安装倒是简单，一路默认确定下去，很快就安装好了。安装完成后我立马被吸引了，原来还可以有这样的系统，于是我又开始折腾3d效果，各种功能，输入法等等，每个都够我折腾的。但是四天后，我看到网上说YLMF OS其实就是Ubuntu，我就想，为什么的不装ubuntu呢。说干就干，立马的又刻了ubuntu的盘，用的版本是10.04的beta版，这下问题来了。开机没法引导了，到了著名的grub界面，我傻眼了。我想每个人都会经历这样的过程吧，有人指导或许还好，而像我这样计算机知识薄弱的完全自己摸索着开始玩linux几乎所有的问题都会过一遍。开机无法引导，分区问题，输入法，网络。。。。因为学校用的是校园网，只有windows的客户端，所以用linux的最大问题就是上网是个很大的障碍，但是即使这样，也没挡住我继续折腾的道路。从此，我逃离了windows，什么杀毒，开机时间对我成了浮云。  &lt;/p&gt;
&lt;p&gt;玩linux，命令行自然是没法跳过的。经过这几番的折腾，我体内的兴趣被激发了，所谓geek精神也开始了（得瑟一下），对于一上编程课就瞌睡的我，居然决定开始学习linux，学习shell。我买了鸟哥的书，图书馆借了一堆linux书开始啃。越学越无法自拔，成了linux的脑残粉然后对windows各种黑。学会了命令行，就开始试着配置samba，ftp等等各种服务器，到了走火入魔的地步。假期在家有了网速保障，几乎就不睡觉，不停的折腾，仅算系统我就安装了几十遍。  &lt;/p&gt;
&lt;p&gt;由于在学校，很多时候没法拜托win，于是我便跑个双系统，日常的任何事情都在ubuntu下处理，就这样，在同学用着VC等等开发调试的时候，我用vim+gdb；用命令处理操作真是又快又爽。这个时候，我已经对编程有了兴趣，买了一堆的书。但是仍然觉得我没办法做这项工作，因为我感觉我学的任何语言都没掌握，写代码的时候异常痛苦。而作为爱好，我觉得是很棒的，计算机能给我带来很多快乐。这个时候，我开始会听一些自己感兴趣的专业课，看很多的专业书籍。  &lt;/p&gt;
&lt;p&gt;那是一个假期，我在家折腾linux的时候，突然看到了python，忍不住就试了试。一试便再也没放开。在我当时的脑子里，代码是必须要编译（java是解释）这一步骤的，变量是必须声明后才能使用的（那时候我觉得shell不算门语言，只是linux里的脚本，见笑），而python的动态性给了我很大的冲击了，这简直不可思议。我是个有了疑惑就立马就会去做的人，所以我立马找了些python的资料和pdf就开始学习。python的好处我就不说了，网上一堆堆的，反正我是被完全的吸引了。渐渐的，我了解了python的强大和无所不能。再后来我又知道了django，flask等web框架，而对我来说，能做一个自己的网站是很cool的事情，而web也是我很感兴趣的方向，于是，我开始想，既然都学了这些，为什么我不能做一个程序员呢？做一名pythoner看起来也是不错的事情。我开始学尝试django，当我跟着教程做出一个小小的web页面，然后在校园网内都能访问的时候，兴奋不已。在我看来，python是必须要学的动态语言，在国内，会django或者其他web框架找个工作不算难，而后期也可以做些高级的python开发，进可攻退可守。更因为那一句&lt;code&gt;Life is short.Use python&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;那之后便一个人自学python，进展很缓慢，因为基础薄弱。期间会不断接触新的东西，比如git等等，也会同步学习。就这样，我进入了大三下。由于我不喜欢学校，一直想早点脱离，所以很多课能修都会早修。到了大三，基本没什么课，我开始考虑寻找工作。我也知道自己当时的能力不济，作为尝试还是努力的寻找机会。很幸运，我发出消息后很快有了很多回应。我选择了我喜欢的杭州，有了我第一份工作，那一刻我正式成为了一名pythoner！并且确定web为我的方向。  &lt;/p&gt;
&lt;p&gt;第一家公司时间很短，一个多礼拜后跟我说公司打算转java，不要python实习了。背后真正的原因我不知道，也不想知道。我只是失落，而就在这时候，我现在的主管知道了，给了我机会。主管是个让我很敬佩的人，不论是技术，职业素养还是为人。我几乎无缝的进入现在的公司，在主管的指导下开始了我的编程生涯，3月在公司转正，虽然我知道我能力还很欠缺，能转正有主管的照顾，但至少现在我可以说我是一名基本合格的python web developer了。  &lt;/p&gt;
&lt;p&gt;最终，我没有实现自己之前一直的理想，而是成了一名pythoner。But I like it！每天的编码让我开心，程序员都很实诚，我喜欢。尤其是，当一个自己曾经在网上关注很久并且自己很敬佩的人突然来到我前面的工位，跟我在一个办公室coding的时候，那感觉真的很奇妙。  &lt;/p&gt;
&lt;h3&gt;就叫总结吧&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;blabla写了挺多，没有技术相关，满篇废话，但也算是我一段人生之路的回顾。人生十有八九不如意，有的时候以为不好的事情也许才是好的，属于哪里也许自己很难明白。现在很多朋友说我石化了，变木了，呆了，是无趣程序猿。但是我想说：I belong to it.是的，我属于这里，也许我成不了大牛，我写的代码会被人吐槽不已，但是我coding的时候充实而开心，这就够了。  &lt;/p&gt;
&lt;p&gt;别说我宅，别说我愣，别说我不懂交流，其实，即使我不做程序员，我也应该是这样的。  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;我是一名Pythoner!&lt;/em&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后记：&lt;br /&gt;
写了很多，追忆下岁月之余希望对现在大学中很多计算机专业的学生能有所启发。很多计算机专业的学生跟我一样，对编程没有兴趣，只想混个毕业证。其实，大家可以仔细审视下自己，然后折腾起来吧，毕竟有很多的时间。也许，渐渐的你也会发现你属于这个领域。当然，高考的事情很难扯，如果你真心不爱，早点退出寻找自己。但是，不管怎么样，试试python吧。嘿嘿。&lt;br /&gt;
PS：打字很累哦。拜托给发个奖呗，纪念品都行啊。哈哈。&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Wed, 01 May 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-05-01:to-be-a-pythoner.html</guid><category>memories</category></item><item><title>django一个form里多个submit的处理</title><link>http://blog.everlose.com/django-form-multi-submit.html</link><description>&lt;p&gt;今天开发中遇到这样一个需求：在一个form里需要有两个submit。一个用于提交保存，另一个提交保存后需要跳到特定的页面。由于在当前的系统中，submit是会自动触发form验证的，而提交并跳转与提交保存的前面的处理相同，所以我想在一个form中写两个submit，然后view中判断点击的是哪个submit，然后进行相对应的处理。  &lt;/p&gt;
&lt;p&gt;当然，实现当前的需求也可以不用两个submit，对另一个按钮进行独立的处理就行，但是这样不仅需要在前端再写一次form的validate调用，而且也需要写两个不同的view来控制，违背了dry的原则，所以我没有考虑。  &lt;/p&gt;
&lt;p&gt;其实在form里使用两个甚至多个submit不是什么难事，后端判断也很简单。在django中如下例子：   &lt;/p&gt;
&lt;p&gt;模板中:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    
    {{ form }}    
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;save&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Save&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;save_and_jump&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Save_And_Jump&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意一定要写添加name，这样才能在view中判断是哪个按钮被点击。  &lt;/p&gt;
&lt;p&gt;view中：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;save&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#如果点击的是save，获取到按钮的value值，如果点击的是save_and_jump，则submit为None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;jump&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里因为只有两个submit，可以如此处理，当有多个submit的时候，可以令他们的那么相同，然后根据获取到的value值来判断是点击了哪个按钮。下面有对应说明。   &lt;/p&gt;
&lt;p&gt;以上方法一般就能解决多个submit的问题了，但是我却没能成功，request.POST里面没有submit的相关的值。查了许久，原来是ajaxSubmit在作怪。因为前端进行了form验证后使用了ajaxSubmit来进行提交和处理，而ajaxSubmit不会将submit和button的值进行传递，即使加上了name也不行。我觉得应该可以对ajaxSubmit的option进行设定来达到目的，但是由于对ajaxSubmit不是很熟悉，作罢。使用了另一个比较笨的办法。添加一个hidden的input，在点击了submit时先跑一下js，改变这个input的name和value。  &lt;/p&gt;
&lt;p&gt;模板中:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {{ form }}  
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit_type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;save&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Save&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;save-form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;save_and_jump&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Save_And_Jump&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;save-form-and-jump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加一段js:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#save-form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;live&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#submit-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;save_and_jump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#save-form-and-jump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;live&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#submit-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;save&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在点击submit的任何一个按钮时，会首先执行该段js中对应的代码，改变hidden的input的value，这也就可以在view中判断是点击的哪个submit按钮了。  &lt;/p&gt;
&lt;p&gt;view中:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;submit_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submit_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;submit_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;save&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;somgthing&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;jump&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有多个submit,只需要对相应的value值进行判断就好了。    &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Fri, 26 Apr 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-04-26:django-form-multi-submit.html</guid><category>django</category><category>form</category></item><item><title>又一年地震，地震局干嘛的？</title><link>http://blog.everlose.com/earthquake-agian.html</link><description>&lt;p&gt;早上我起来的很晚，12点才被舅舅的电话叫醒。一切很平常，只是天气有点冷。  &lt;/p&gt;
&lt;p&gt;当我打开微博的时候，才发现，原来这又是不平常的一天。雅安7级地震，死亡已经超百人。下意识里，我感觉到，又到了到处点蜡烛，到处要募捐的时候了，到处是祈福的时候了。果然，继续刷微博的时候，很多人的头像变灰了，尤其是一些公共帐号，一个又一个的人公布募捐帐号，一个又一个的在喊雅安挺住，一个又一个的在说这一刻我们都是雅安人。我心是丑恶的，但是我诚实的说，看到这些，我没有一点感觉，我也不会去捐钱。  &lt;/p&gt;
&lt;p&gt;汶川地震才过去四年，这几年间，国内各地的大小地震貌似没有间断过。而为什么，还是四川，还是7级这么大的地震，在震前为什么一点消息没有？地震局呢？你们干嘛的？你们就是用来在地震后来不停纠结到底是几级的地震，震后来公布伤亡人数的么？我没经历过地震，我不知道地震是什么感受，但能震倒房屋的地震，震前能检测不到一点异常?我不信。  &lt;/p&gt;
&lt;p&gt;雅安的人是不幸的，对于弱者，我们都有怜悯之心，中国人的骨子里就有这种东西，有的让人感动，有的让人恶心。四年前，我每天都会关注四川，看着一片片废墟，有赶去灾区的冲动，而四年后的今天，我没了，彻底的没了。无意中知道地震的新闻之后，就来到图书馆埋头看书。让自己心安静，才是我应该做的。  &lt;/p&gt;
&lt;p&gt;我相信我的国家，完全有那个人力，完全有那个财力去赈这次的灾难。我相信每个中国人都知道这个事实。但是，地震局你到底是干嘛的？不是说张衡的那几条破龙就能测到地震吗？而现在你们是怎么回事？我不懂，我只是个码农，但是我怎么都不能相信，如果认真去做了，怎么会没有一点的消息呢？如果都是这样，日本是不是早亡国了？  &lt;/p&gt;
&lt;p&gt;这样的文章不想写太多，写多了都是负能量。我只是个普通人，自顾不暇。朋友们保重，很多的事情我们无可奈何。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;晚安中国，我总是恨你，而我真的爱你。&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sun, 21 Apr 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-04-21:earthquake-agian.html</guid><category>memories</category></item><item><title>工作小结-需要提高效率</title><link>http://blog.everlose.com/work-summary.html</link><description>&lt;p&gt;最近一段时间感觉忙了很多，不是因为任务多了多少，只是我感觉我的进度实在没法让人满意。一周下来，我的心思全在代码上，上班写下班也写，睡下的时候也在想着，但是一段时间之后，除了自己感觉异常疲惫之余没有大的进展。我的工作方式和习惯的问题还是比较差劲。  &lt;/p&gt;
&lt;p&gt;思考了许久，认为有如下原因:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自身的基础是严重拖累进度的关键。经过了第一个实验项目，在python的逻辑部分我的进度不算很慢，能较快的整理好逻辑关系，编码的速度也过的去。但是，最近的项目里需要使用JS来实现大量的用户交互，这一下就让我抓瞎了。&lt;br /&gt;
1 最初对于一个功能的实现经常完全没有思路。&lt;br /&gt;
2 弄清了思路在编码实现阶段总是bug和错误不断。&lt;br /&gt;
3 缺乏经验，测试和debug耗费太多时间。&lt;br /&gt;
4 代码质量太低，耦合度太高，导致原本一点小小的修改都需要改动很多的地方，并且总会引入其他错误。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一切的原因都是我对JS的掌握不够，只能使用jquery进行简单的使用。在抽时间补补JS之后，效果比较明显，要学的还有很多，我不能有一丝的松懈。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对业务的理解不够。说理解不够其实都牵强了，我对于业务的理解完全来自于主管的指导，自己对于要做的东西其实想法很少。这些可以说是自己的经验太少，而这不是我可以找的借口，一个合格的程序员一定不能只是代码机器。尤其我做的还是CMS，这方面我太缺乏，平时只对技术感兴趣，长久以来疏于对其他知识的吸收。以后空余时间还需要阅读其他行业诸如管理、金融方面的资料与书籍。平时注意思考、交流和积累。Bob大叔说了，专业的程序员总是会花很多时间去理解业务的。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生活习惯有严重的问题。或许这是IT人的通病，但是绝对不是一个好习惯。长久以来，不注意休息，到了晚上总是异常的清醒。但是其实，这个时候虽然感觉不困，不想睡觉，但是绝对不是编码的好时候，就算喝再多的咖啡和浓茶。同样，Bob大叔也说过：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果感到疲劳或者心烦意乱，千万不要编码。强而为之，最终只能回头返工。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在理解深刻了，这一周来，每次给主管看过之后总会有一堆的修改，一改就是一天多的工作量，而改掉的总是我花了很多的精力写出来的，疲劳时候写出的占大多数。并且，在下午3-4点时，我几乎会变成傻子，低级错误不断，甚至还会将很多正确的代码改错。&lt;br /&gt;
  我需要从现在开始调节作息时间，编码和阅读充电相结合，劳逸结合，努力达到高效率的写出高质量的code。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须学会寻求帮助。虽然主管每次交流的时候，总是要我要严格贯彻2小时工作法：2个起来走动休息，2个小时没解决的问题即使提出来。但是我一直做到，有时候一个问题一埋头就忘记了时间，有时候看同事那么忙也不好意思打扰，还有时候感觉自己有点思路，就动手去尝试，到了最后才开始不可行。如果我能及时的寻求帮助，一定能节省不少时间，提高不少效率。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管是生活还是工作，都需要不停的总结和改进，再过2个月我就毕业了，而现在我已经成为了转正成了公司的一员，应该以一个正式员工来要求。项目一再延期，心里也不是滋味。改进工作方式，从现在开始。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sun, 21 Apr 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-04-21:work-summary.html</guid><category>work</category></item><item><title>搬家</title><link>http://blog.everlose.com/a-new-house.html</link><description>&lt;h2&gt;又一次搬家&lt;/h2&gt;
&lt;p&gt;今天又要搬家了。跟上次不同，虽然这次搬的离公司更远了，但没有不爽。  &lt;/p&gt;
&lt;p&gt;很早舅舅就让我搬去他家住，我却喜欢自由要一个人。最后发现，租房子是个技术活，弄好了，一切顺心，弄不好事事揪心。刚来的时候租的房子房东很好，房子也便宜，导致我第二次租房大意了，没有仔细考虑就匆忙定下。入住之后，各种不如意都来了。其中最烦人的事网经常坏，找房东他总是拖延，这让我很是困扰，没有网，很多的事情我就无法做了。而到了前几天，网直接的没了。还好，我可以搬走了。  &lt;/p&gt;
&lt;p&gt;这次是搬到舅舅家住，虽然会有些不自由，但总比处处受制于人强。回顾来到杭州的8个月时间，没有做出让自己满意的成绩。但也转正了，总算是落了根。接下来要继续拼搏，未来我已在路上。  &lt;/p&gt;
&lt;p&gt;今天下雨，搬家有些麻烦。整理东西去。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 20 Apr 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-04-20:a-new-house.html</guid><category>memories</category></item><item><title>Python2与Python3的对比</title><link>http://blog.everlose.com/difference-between-python2-python3.html</link><description>&lt;p&gt;这篇文章总结了一些与Python2.6相比Python3.0中的新特性.Python3是一个不向后兼容的版本，有了很多的改变，这些对于Python开发者来说是非常重要的，虽然多数人说Python3真正流行起来还需要一段时间，但是Python3确实有了很大的改进，现在也是时间来学习Python3了。在真正理解Python3中的一些变化之后，会发现其实Python3的变化并没有想象的那么多，主要是修复了一些令人讨厌的地方。  &lt;/p&gt;
&lt;p&gt;一般在每一个发行版源码的&lt;code&gt;Misc/NEWS&lt;/code&gt;文件中详细描述了每一个细小的变化。  &lt;/p&gt;
&lt;h2&gt;常见的障碍&lt;/h2&gt;
&lt;h4&gt;Print是一个函数&lt;/h4&gt;
&lt;p&gt;在Python3中&lt;code&gt;print&lt;/code&gt;是个函数，这意味着在使用的时候必须带上小括号,并且它是带有参数的。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The answer is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The answer is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# 末尾加上逗号阻止换行  &lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 使用空格来代替新的一行  &lt;/span&gt;

&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staerr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fatal error&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fatal error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 打印出元组(x, y) &lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 同上,在python3中print(x, y)的结果是跟这不同的  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Python3中还可以定义分隔符，使用参数sep来指定.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;There are &amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;possibilities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面代码的结果如下:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;There are &amp;lt;7&amp;gt; possibilities  
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;注意:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;print()&lt;/code&gt;函数不支持Python2.X中&lt;code&gt;print&lt;/code&gt;中的“软空格”。在Python2.X中,&lt;code&gt;print "A\n", "B"&lt;/code&gt;的结果是"A\nB\n";而在Python3中&lt;code&gt;print("A\n", "B")&lt;/code&gt;的结果是&lt;code&gt;"A\n B\n"&lt;/code&gt;。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在刚开始使用Python3的时候,你会发现你经常在交互模式下你还是经常使用老式的语法&lt;code&gt;print x&lt;/code&gt;,是时候锻炼你的手指用&lt;code&gt;print(x)&lt;/code&gt;来取代它啦。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你的项目比较大,而又想升级到Python3的时候,不用担心,&lt;code&gt;2to3&lt;/code&gt;这个工具会将所有的&lt;code&gt;print&lt;/code&gt;语句转换为&lt;code&gt;print()&lt;/code&gt;函数。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4&gt;使用Views和Iterators代替Lists&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt;的方法&lt;code&gt;dict.keys()&lt;/code&gt;,&lt;code&gt;dict.items()&lt;/code&gt;,&lt;code&gt;dict.values()&lt;/code&gt;不会再返回列表,而是返回一个易读的“views”。这样一来，像这样的语法将不再有用了:&lt;code&gt;k = d.keys();k.sort()&lt;/code&gt;,你可以使用&lt;code&gt;k = sorted(d)&lt;/code&gt;来代替。&lt;code&gt;sorted(d)&lt;/code&gt;在Python2.5及以后的版本中也有用，但是Python3效率更高了。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# dict_keys([&amp;#39;a&amp;#39;])  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# dict_items([(&amp;#39;a&amp;#39;, 1)])  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# dict_values([1])  &lt;/span&gt;
&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# AttributeError: &amp;#39;dict_keys&amp;#39; object has no attribute &amp;#39;sort&amp;#39;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同样，&lt;code&gt;dict.iterkeys()&lt;/code&gt;,&lt;code&gt;dict.iteritems()&lt;/code&gt;,&lt;code&gt;dict.itervalues()&lt;/code&gt;方法也不再支持。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;和&lt;code&gt;filter()&lt;/code&gt;将返回&lt;em&gt;iterators&lt;/em&gt;。如果你真的想要得到列表,&lt;code&gt;list(map(...))&lt;/code&gt;是一个快速的方法，但是更好的方法是使用列表推导(尤其是原代码使用了lambda表达式的时候),或者重写原来的代码,改为不需要使用列表。特别是&lt;code&gt;map()&lt;/code&gt;会给函数带来副作用，正确的方法是改为使用&lt;code&gt;for&lt;/code&gt;循环，因为创建一个列表是非常浪费的事情。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python3中的&lt;code&gt;range()&lt;/code&gt;函数跟Python2.X的&lt;code&gt;xrange()&lt;/code&gt;函数的作用是一样的，这样可以使用任意的数字,Python3中去除了&lt;code&gt;xrange()&lt;/code&gt;函数。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;zip()&lt;/code&gt;在Python3中返回的是一个迭代器。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;比较符&lt;/h4&gt;
&lt;p&gt;Python3简化了比较符。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在使用比较符(&amp;lt;,&amp;lt;=,&amp;gt;=,&amp;gt;)时，当相比较的操作数的排序是没有意义的时候将会抛出&lt;code&gt;TypeError&lt;/code&gt;异常,因此像&lt;code&gt;1 &amp;lt; ''&lt;/code&gt;,&lt;code&gt;0 &amp;gt; None&lt;/code&gt;,&lt;code&gt;len &amp;lt;= len&lt;/code&gt;这样的语句不再合法了。&lt;code&gt;None &amp;lt; None&lt;/code&gt;也会抛出&lt;code&gt;TypeError&lt;/code&gt;异常，而不是返回&lt;code&gt;False&lt;/code&gt;。你应该明白了,胡乱的比较是没有意义的,相比较的元素必须是能够比较的才行。需要注意的是,&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;不包括在内,因为不通类型的,无法比较元素总是不等于另一个的。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;builtin.sorted&lt;/code&gt;和&lt;code&gt;list.sort()&lt;/code&gt;不再有提供比较函数的cmp参数,只有参数&lt;code&gt;key&lt;/code&gt;和&lt;code&gt;reverse&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmp()&lt;/code&gt;函数应该当做被去除了,&lt;code&gt;__cmp__()&lt;/code&gt;特殊方法也不再支持。在需要的时候使用&lt;code&gt;__lt__&lt;/code&gt;,&lt;code&gt;__eg__&lt;/code&gt;和&lt;code&gt;__hash__&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;整型数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从本质上来说,&lt;code&gt;long&lt;/code&gt;重命名了&lt;code&gt;int&lt;/code&gt;,因为在内置只有一个名为&lt;code&gt;int&lt;/code&gt;的整型,但它基本跟之前的&lt;code&gt;long&lt;/code&gt;一样。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像&lt;code&gt;1/2&lt;/code&gt;这样的语句将返回&lt;code&gt;float&lt;/code&gt;，即0.5。使用&lt;code&gt;1//2&lt;/code&gt;来获取整型,这也是之前版本所谓的“地板除”。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除了&lt;code&gt;sys.maxint&lt;/code&gt;,因为整型数已经没了限制。&lt;code&gt;sys.maxsize&lt;/code&gt;可以用来当做一个比任何列表和字符串下标都要大的整型数。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;repr()&lt;/code&gt;中比较大的整型数将不再带有&lt;code&gt;L&lt;/code&gt;后缀。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;八进制数的字面量使用&lt;code&gt;0o720&lt;/code&gt;代替了&lt;code&gt;0720&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Text Vs. Data 代替 Unicode Vs. 8-bit&lt;/h4&gt;
&lt;p&gt;Python3中改变了二进制数据和Unicode字符串。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python3使用文本和(二进制)数据的理念代替之前的Unicode字符串和8-bit字符串,所有的文本默认是Unicode编码。使用&lt;code&gt;str&lt;/code&gt;类型保存文本,使用&lt;code&gt;bytes&lt;/code&gt;类型保存数据。当你混淆文本和数据的时候Python3会抛出&lt;code&gt;TypeError&lt;/code&gt;的错误。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能再使用&lt;code&gt;u"..."&lt;/code&gt;字面量表示unicode文本,而必须使用&lt;code&gt;b"..."&lt;/code&gt;字面量表示二进制数据。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为&lt;code&gt;str&lt;/code&gt;和&lt;code&gt;bytes&lt;/code&gt;不能弄混,所以你必须显式地将他们进行转换。使用&lt;code&gt;str.encode()&lt;/code&gt;将&lt;code&gt;str&lt;/code&gt;转换为&lt;code&gt;bytes&lt;/code&gt;，使用&lt;code&gt;bytes.decode()&lt;/code&gt;将&lt;code&gt;bytes&lt;/code&gt;转换为&lt;code&gt;str&lt;/code&gt;,也可以使用&lt;code&gt;bytes(s, encoding=...)&lt;/code&gt;和&lt;code&gt;str(b, encoding=...)&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt;和&lt;code&gt;bytes&lt;/code&gt;都是不可变的类型，有一个分离的可变类型的&lt;code&gt;bytearray&lt;/code&gt;可以保存缓存的二进制数据,所有能够接受&lt;code&gt;bytes&lt;/code&gt;的API都能够使用&lt;code&gt;bytearray&lt;/code&gt;。这些可变的API是基于&lt;code&gt;collections.MutableSequence&lt;/code&gt;的。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除了抽象类型&lt;code&gt;basestring&lt;/code&gt;，使用&lt;code&gt;str&lt;/code&gt;代替。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件默认使用文本类型打开,这也是&lt;code&gt;open()&lt;/code&gt;函数默认的。如果要打开二进制文件必须使用&lt;code&gt;b&lt;/code&gt;参数,否则会出现错误,而不会默默地提供错误的数据。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件名都使用unicode字符串传入和输出。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一些关于系统的API，如&lt;code&gt;os.environ&lt;/code&gt;和&lt;code&gt;sys.argv&lt;/code&gt;,当系统允许&lt;code&gt;bytes&lt;/code&gt;并且不能正常转换为unicode的话,也会出现问题。所以，将系统的&lt;code&gt;LANG&lt;/code&gt;设置好是最好的做法。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;repr()&lt;/code&gt;函数不再转义非ASCII字符。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码默认为UTF-8编码。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除了&lt;code&gt;StringIO&lt;/code&gt;和&lt;code&gt;cStringIO&lt;/code&gt;。加入了&lt;code&gt;io&lt;/code&gt;模块,并分别使用&lt;code&gt;io.StringIO&lt;/code&gt;和&lt;code&gt;io.BytesIO&lt;/code&gt;分别用于text和data。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;语法改变&lt;/h2&gt;
&lt;h4&gt;新增语法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数变量和返回值&lt;a href="http://www.python.org/dev/peps/pep-3107/"&gt;annotations&lt;/a&gt;。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.python.org/dev/peps/pep-3102/"&gt;Keyword-only&lt;/a&gt;变量。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nonlocal&lt;/code&gt;声明。使用&lt;code&gt;nonlocal x&lt;/code&gt;可以直接引用一个外部作用域的变量,但不是全局变量。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展了迭代的解包。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;   &lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="c1"&gt;# [1,2,3]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;   &lt;span class="c1"&gt;# 4  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;字典推导。&lt;code&gt;{k: v for k, v in stuff }&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;d&lt;/span&gt;     &lt;span class="c1"&gt;# {1: 1, 2: 2}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集合推导。&lt;code&gt;{x for x in stuff}&lt;/code&gt;，与&lt;code&gt;set(stuff)&lt;/code&gt;效果一样,但是更加灵活。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;八进制字面量&lt;code&gt;0o720&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二进制字面量&lt;code&gt;0b1010&lt;/code&gt;,相当于新的内置函数&lt;code&gt;bin()&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字节字面量&lt;code&gt;b&lt;/code&gt;或者&lt;code&gt;B&lt;/code&gt;,相当于新的内置函数&lt;code&gt;bytes()&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改变的语法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;except exc, var&lt;/code&gt;改为&lt;code&gt;except exc as var&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新的元类语法。   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# old  &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;  

&lt;span class="c1"&gt;# new  &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="o"&gt;....&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;列表推导不再支持&lt;code&gt;[... for var in item1, item2, ...]&lt;/code&gt;，必须写成&lt;code&gt;[... for var in (item1, item2,...)]&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;省略号&lt;code&gt;...&lt;/code&gt;作为连续表达式可以用于任何地方,之前只能用于分片中。但是必须连续写,之前带空格的&lt;code&gt;. . .&lt;/code&gt;不再支持。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;移除的语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;移除了元组的解包。不能再写&lt;code&gt;def foo(a, (b, c)): ....&lt;/code&gt;,需要写成&lt;code&gt;def foo(a, b_c):b, c = b_c&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;,使用&lt;code&gt;!=&lt;/code&gt;代替。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exec()&lt;/code&gt;不能再作为关键词,只能作为一个函数。并且&lt;code&gt;exec()&lt;/code&gt;不再支持流变量,如&lt;code&gt;exec(f)&lt;/code&gt;需写成&lt;code&gt;exec(f.read())&lt;/code&gt;。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整型不支持&lt;code&gt;l/L&lt;/code&gt;后缀。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串不支持&lt;code&gt;'u/U'&lt;/code&gt;前缀。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;from module import *&lt;/code&gt;只能用在模块级,在函数中不可使用。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有不以&lt;code&gt;.&lt;/code&gt;开始的import语句均作为绝对路径的import对待。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除了经典类。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 20 Apr 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-04-20:difference-between-python2-python3.html</guid><category>python</category></item><item><title>Mac下使用homebrew安装postgresql及配置</title><link>http://blog.everlose.com/mac-homebrew-postgresql.html</link><description>&lt;p&gt;之前试过macports，但是看网上的评价不怎么样，主要是说会安装一些其他的包，对于我这样有洁癖的来说当然不行了。另外看到&lt;a href="http://mxcl.github.io/homebrew/" title="HomeBrew"&gt;HomeBrew&lt;/a&gt;，便试了下，果然很爽，尤其是对于用惯了apt-get的来说。&lt;a href="http://mxcl.github.io/homebrew/" title="HomeBrew"&gt;主页&lt;/a&gt;上有很方便的安装方法，但是蛋疼的是，在天朝常常会没法连接，没关系，可以打开&lt;a href="https://raw.github.com/mxcl/homebrew/go"&gt;这个地址&lt;/a&gt;，将网页另存为以.rb结尾的文件，然后终端中使用ruby 文件.rb就可以了。但是，有时候就是打开这个raw页面也需要爬墙，唉，无奈。好在爬墙总不是什么困难的事情。  &lt;/p&gt;
&lt;p&gt;安装好HomeBrew之后，使用  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brew update&amp;amp;brew upgrade   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更新后，便可以开始postgresql了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brew install postgresql  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建postgreSql数据库:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;initdb /usr/local/var/postgres  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;启动服务：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;停止服务:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pg_ctl -D /usr/local/var/postgres stop -s -m fast  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自动启动服务:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir -p ~/Library/LaunchAgents&lt;br /&gt;
cp /usr/local/Cellar/postgresql/9.2.4/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;删除自动启动服务:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了，现在基本就算完成了，很简单。这时候下载pgadmin3，安装之后会出现&lt;strong&gt;role 'postgres' does not exist&lt;/strong&gt;的错误，原因你是没有创建postgres用户。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;createuser -d -a -P postgres    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行完这行命令后，postgresl角色就创建好了，再连接就不会报错。  &lt;/p&gt;
&lt;p&gt;导入sql文件，如导入back.sql：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;psql -d database_name -f back.sql  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在linux下需要首先切换到postgres用户再执行该命令:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;su postgres  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;导出数据库到文件:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pg_dump database_name &amp;gt; back.sql  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;卸载postgresql,如果是使用homebrew安装的话，就和简单了:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brew uninstall postgresql  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是下载安装包安装的，有两种方法。&lt;br /&gt;
1. 自动卸载，在安装目录下，mac下是/Applications/Postgresql下有个uninstall-postgresql.app，双击执行就可以了。&lt;br /&gt;
2. 手动删除。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;停止服务  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo /sbin/SystemStarter stop postgresql-9.2  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;移除菜单图标   &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo rm -rf /Applications/PostgreSQL 9.2  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;移除ini文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo rm -rf /etc/postgres-reg.ini  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;移除startup items  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo rm -rf /Library/StartupItems/postgresql-9.2  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;移除数据和安装文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo rm -rf /Library/PostgreSQL/9.2  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;移除postgres用户  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo dscl . delete /users/postgres  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS: &lt;br /&gt;
可参考这两篇blog&lt;br /&gt;
1. http://nextmarvel.net/blog/2011/09/brew-install-postgresql-on-os-x-lion/&lt;br /&gt;
2. http://kidsreturn.org/2012/03/install-postgresql-on-mac-lion-via-homebrew/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 20 Apr 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-04-20:mac-homebrew-postgresql.html</guid><category>postgresql</category><category>homebrew</category></item><item><title>累了</title><link>http://blog.everlose.com/tired.html</link><description>&lt;p&gt;下班的时候真的累了。由于清明放假，连续工作了6天果然有点扛不住，因为新搬了家，还没有完全适应新的生活节奏。虽然只是提前了半个小时起床，差别却大的惊人。很奇怪，早上醒的非常早，而那个时候不适合起床，等再次睡着被闹钟叫醒，会累的不行。我感觉到累了，其实也是一件很好的事情。  &lt;/p&gt;
&lt;p&gt;那时候还是十几岁，我初三。不知道中了什么邪，那时候总感觉我的时间很少很少，而会觉得很少的愿意你竟然是我认为我随时可能死去。然后我一直抗拒睡觉，每天晚上这啊那得弄到一两点，早上很早就起来上学。记得，看《达芬奇密码》，一个晚上一口气看完了，天也基本亮了，于是就起来上学了。那时候年轻，总不知道困倦。  &lt;/p&gt;
&lt;p&gt;最近遇到的问题很多，解决的问题也很多。遇到问题时倍感压力，解决问题后异常充实。事情总是这样。我确实累了，肩膀和背开始疼痛。困了的时候，胡子便会长的很快，我一直都不明白。每天半夜，走进卫生间看到镜子里自己一脸胡茬，笑笑然后离开。我身体累了，精神才正常，这就是我，我都不明白的我。  &lt;/p&gt;
&lt;p&gt;累了我就会学着去休息了，我总把握不了我自己的生活，还尝试去掌握下别人的世界，脑子有病么不是。  &lt;/p&gt;
&lt;p&gt;我越累越睡不着，睡不好就越累，几次循环我就透支。透支是件很好的事情，脑子里什么也放不下，那个CPU已经无法运行了，我就会这样，脑子一片空白的睡着，睡很久很深。醒来之后，体力充沛。继续过。&lt;/p&gt;
&lt;p&gt;这周去买辆自行车，每天蹬个10多公里去上班，晚上再蹬10几公里回家，如果高兴还能多蹬几圈，都由我自己决定。想想都是畅快的事情。  &lt;/p&gt;
&lt;p&gt;下周买个篮球，周末在小区练练手感，得空了，回家欺负欺负基友。想想更是畅快的事情。 &lt;/p&gt;
&lt;p&gt;每一天都不一样。EVERLOSE！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 13 Apr 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-04-13:tired.html</guid><category>memories</category></item><item><title>匆匆20几年</title><link>http://blog.everlose.com/20-more-years.html</link><description>&lt;p&gt;一直想写。一直怕写。之前写过。我删了。怕我会去回想。现在我想，我应该可以控制自己。所以我写下这些文字，并保证不会删去。&lt;/p&gt;
&lt;h2&gt;早年，无邪的快乐&lt;/h2&gt;
&lt;p&gt;我在皖南的一个山村出生。  &lt;/p&gt;
&lt;p&gt;那是真正的山村，没有汽车，没有摩托，没有自行车，腿是唯一的交通工具。初始几年我知道的唯一的交通工具是船。船是通向外面的唯一途径，也是外面进到山村的唯一途径。想出去，必须花半个小时下山，坐船一个多小时，才能来到一个镇上，那里有汽车，可以带我们离开。船是一直在变化的，最初是木蓬船，速度很慢。后来换了钢铁结构的船，更大更快。逢年过节还会开启两台发动机。&lt;/p&gt;
&lt;p&gt;我不知道什么是商店，因为我没有见过。只知道到了夏天，会有人扛着箱子来到山村，卖的是雪糕。每次，妈妈都会毫不犹豫的给我买，而别人的父母总是各种推脱与哄骗，这个时候是我最开心的时候。这也是我当时知道的钱的唯一用途。即使这样，每年的雪糕也吃不到几次，因为只有夏天农闲的时候卖雪糕的才会来。 &lt;/p&gt;
&lt;p&gt;没有玩具，只有一台旧的琴和早年当兵离开家的舅爷给的木枪。而那是我和弟弟最引以为豪的东西，别人家都没有。然而，能带给我乐趣的东西很多，山里的一切都是快乐的源泉。采茶的季节是最快乐的，那季节也是鸟儿繁殖的季节，可以在茶树中很轻松的找到鸟窝，数量是现在的无法想象的。从鸟蛋到成年的鸟儿，全都玩过。我和弟弟会很爱护，但是越是这样他们死的越快。有了小鸟，我们会用尽一切可能去找虫子，蜘蛛，蚯蚓来喂它们，最终可怜的鸟儿都挺着圆鼓鼓的肚子死去了。当然也会养成年的鸟，但我和弟弟都不愿意，成年的鸟儿死的更快，基本上过一晚就会死了，妈妈说是气死的。现在我明白了，山里的鸟儿怎么能习惯笼子的束缚，他们都不是城市中那些笼中的金丝雀，没有了自由唯有一死。  &lt;/p&gt;
&lt;p&gt;我自己做弹弓，可是山村哪来皮筋，只有用橡胶皮代替。制作完后，山前山后到处跑，见着什么打什么。总想打只松鼠或鸟儿，但是一直没有成功，是弹弓不行，我一直这么想，虽然事实也是这样。那些日子，我有一个梦想，我要很多很多的皮筋，做一把真正的弹弓！我自己做弓箭，竹子是很易得的，但是绳子难得。家里的绳子被祸害多了，妈妈不准再用。只好去剥树皮，经过很多次的实践，我找到了最适合做弓箭弦的树皮，后来就可怜那棵树，皮几乎被剥光。后来我害怕了，就给它留一些皮，等新长出来些再去剥。那棵树也一直没有死去，我现在还记得它在哪里，它应该长成参天大树了吧。  &lt;/p&gt;
&lt;p&gt;开始的时候，家里没有电视。村里只有几家有，每天就会准时跑到那些村民家里去看电视。还好，很快家里有了电视。虽然只有1-2个台，也足以让我兴奋不已。那时候最爱看何家劲版的包青天，一直就想成为展昭，因为长的黑，妈妈开始叫我包青天，我很高兴，时不时的还在额头上画个月亮。后来，有了白娘子传，可是播第一集的时候我跑去别人家看包青天了。回到家妈妈夸张的跟我说好大一条蛇，褪皮，变成人，blablabla。弟弟也在一边帮腔，害我怨念了很久。长大后才明白，那是妈妈为了不让我总跑别人家看包青天耍的手段，可恶的是，我中招了，那之后再没去别人家，一直在家看了一个夏天的白蛇。那也是第一次，让我尝到了失去的东西再也没法挽回的滋味。  &lt;/p&gt;
&lt;p&gt;山里的生活是很平静的，人们日出而作，日落而息。有手表的人很少，山脚下河中的游船是我们很好的报时器，那些游船每天都会很准时的到来，从不晚点。平静的生活很舒适，这也许是我喜欢安静的原因，直到现在我还是很害怕拥挤和嘈杂的人群。山里的人们都差不多，不像现在感受到的各种贫富差距。每一家餐桌上的食物大多是一样的，因为所有的食物都是地里的，而山上能种植的作物不多。那时候，青菜是剥着吃的，剥去外边长大的叶子，然后等里面的长大再去剥。到了冬天，地里几乎没有东西了，靠储藏的干粮度日，当然，因为冬天会过年，就会有肉吃。自从离开了山村，再也没感受到过年的那种快乐。  &lt;/p&gt;
&lt;p&gt;过年最大的快乐不是有肉吃，是爸爸会回来了。那时候，爸爸常年不在家，而在过年的时候是肯定会回来的。自然的，会带来很多的好玩意。但是，也会有没有的时候。一次爸爸一到家，弟弟就去翻包，可是什么都没有。那之后，才会说话不久的弟弟会一直嚷嚷着“一个空包”。那种伤心无法用言语描述。而在那之后，我的印象里再没有出现“一个空包”的情况。只是一次爸爸回来，带回了玩具枪，可是只有一把。不言而喻，那是弟弟的，一句我大些让我只能在羡慕中看着弟弟玩。他一起床就找抢，而记性却总不好，一直会忘记把枪丢在什么地方了。于是，在我记忆中，那些日子他总是嘴里喊着“我的枪呢?我的枪呢”到处找枪。这也是我记忆中，我默默承受很多事情的开始，我不得不把东西放在心里，担负着。  &lt;/p&gt;
&lt;p&gt;也不知道是中了什么邪，在山里接触书和学校的机会几乎没有，而当我5岁多的时候，却有想要上学的念头，而且是那么的迫切。我还记得，那时候看大些的孩子去上学是多么的羡慕，而我为了不能上学闷闷不乐很久很久。终于到了开学的时候，妈妈去学校帮我问了，可是因为太小学校不收。我又伤心了很久。这时，小姨来了我家。我已经不记得是怎么开始的，可能是小姨说了带我去外婆家能上学。反正最后，我坐在门槛上哭着闹着，要去上学。直到现在，可能那是我唯一一次为了一件事情会跟妈妈那样的哭闹。最终我成功了，5岁多，我离开了家，到外婆家那边的学校去上学。  &lt;/p&gt;
&lt;p&gt;外婆家那时也在一个山村，去他那要走很久的山路。但是我还是去了，在那里开始了我漫漫的求学路。那时的山村学校只有3个年级，一个老师，一个教室。那样的教学方式，很多人可能无法想象。自然，我学习成绩还不错，但是麻烦的事情还是很多。山村的学校不像现在，每45分钟就下课。都是老师想到休息了就让大家休息下，老师想不到就会一直上课。而在我的印象里，仿佛老师从来就不记得下课。因为我总想尿尿。那时候太小，胆子也小，不敢跟老师说，就一直忍，总是忍不住就直接尿裤子了。那时候铅笔让我很受伤，妈妈会买很多的铅笔放外公家，但外公怕我乱用，放在篮子里再挂到很高的梁上。而我总是很费铅笔的，一次上课没有笔，老师让我回家拿，可我怎么也没办法从篮子里弄出来，只好找了外公的木工笔，扁扁的那种就去写字了。那段时间，我的牙齿也出了问题，疼得我死去活来，可是毕竟不在妈妈身边，就一直忍、忍，就这样扛过来了。直到现在我还记得那种让人直想死去的牙疼的感受。我是多能忍，那时候就开始了。但，在那的生活还是很快乐。有书看，有老师的表扬。每天外公起床就会唱国歌“起来，不愿做奴隶的人们……"来叫我起床。外婆每天在炉子里都会给我炖好吃的，永远是热的，他们很少吃，都给我。有一次，外婆在地里干活的时候，一锄头就打死了一只兔子，回来就给我做了兔子肉。虽然现在已经忘记了那是什么味道，但是还是很难以想象她是怎么办到的。那时候也一直盼望着她什么时候再打死一只，可是再也没有过。外婆很瘦弱，那时的外公是家里的权威，耳朵还没聋。可恶的时光。  &lt;/p&gt;
&lt;p&gt;外婆家待了半年，我就回家了，因为爸爸回来了，而家里小学的老师竟是爸爸的同学，虽然年龄仍然没到，我也能在那上学了。接下来的日子在妈妈的身边，舒服多了。那之后一次，在屯溪林校（现在的黄山学院前身）教书的爷爷来信，让我想要什么东西自己写信告诉他。我高兴极了，要了几本书，给弟弟要了玩具还是什么忘记了。不久书到了，那是我第一本课外的书籍，也从那开始，让我彻底爱上了看书。因为读书，我的命运开始改变了。因为我学习不错，也许还有很多其他的原因，父母决定离开山村，来到屯溪，让我接受更好的教育。我能深刻的理解到父母对我的那种期盼，这也成了之后我很大的负担，但是感谢父母，完全改变了我的人生。  &lt;/p&gt;
&lt;p&gt;离开山村不像现在搬个家那么简单。那时候爸妈已经在老家建了两座房子，在那样的高山上建个房子的成本是非常巨大的，而那时我家的房子是村中最好的，那难度可想而知。而离开意味着这些都要放弃，所有的田地，原来的所有经济来源，一旦离开，前途未卜。而更难的是，到了屯溪，想要上学必须要买户口。户口的价格，而且还是两个，我和弟弟，可想而知。就在那时，爸爸为了这事，跟人喝酒喝伤，骑车摔倒在田沟里，也从那之后，一沾白酒就吐。家庭顿时回到解放前，爸爸安顿好我们还没等到我开学就离家了。妈妈带着我和弟弟靠朋友在别人家里租了一个房间，我们开始了艰难的生活。那之后，日子苦了很多，现在回想不觉痛苦，只感觉妈妈的伟大。  &lt;/p&gt;
&lt;p&gt;就这样，我离开了山村，也离开了那单纯无邪的快乐。之后回去的很少。那个山村，现在已经破败。河里的船，几乎要消失了。那年我不到9岁。  &lt;/p&gt;
&lt;h2&gt;我的小学和中学&lt;/h2&gt;
&lt;p&gt;适应新的生活的很耗费时间的，而我的适应力直到现在还是很差，总是需要很久才能融入新的环境。新的小学在我当时的眼里显得气派，也让我心生胆怯。很长的一段时间总想回老家，只是一直放在心里，不敢对任何人说。我不明白为何我那小小的年纪为什么那么多的害怕和心理负担。可能是看到了妈妈太多的艰难，而我又是哥哥，有了天然的担负？！有必要说说的我妈妈。  &lt;/p&gt;
&lt;p&gt;妈妈是应该算典型的徽州女人，我一直这么认为。从小离开外公和外婆，跟她的外公外婆一起生活。因为她的外公外婆的两个儿子全在抗美援朝的时候当兵离开了家，从那之后几乎没再回来，现在的大舅爷80多岁了还待在东北，而二舅爷在四川去世，没再回到家乡。很小的妈妈成了两位老人唯一的陪伴。两位老人都很高寿，而妈妈小小的年纪很自然的担负了照顾两位老人的重任。妈妈什么吃的都会做，就是那时候锻炼出来的。山村的生活需要很多的体力，砍柴，挑水之类。所以为了照顾两位老人，妈妈放弃了学习的机会，初中没毕业就辍学了，待在家中照顾两位老人直到他们相继离世。老人都活到了80多岁，所以妈妈应该照顾了他们很久。其中的艰难，我现在可以想象。所以，妈妈很坚韧，很独立，很要强。一直很开明，但是由于教育的缺失，让她变的固执，认定的事情总是很难去改变她的想法，情绪上来也很难有控制。也由于失去了读书的机会，她格外看重我的学习，跟所有的徽州人一样，对于教育的重视程度达到了难以想象的地步。在她的眼中，必须读书，必须好好的读书，也只有读书才能改变命运，才能成为一个有用的人。没有例外，她也格外的看重名声，这让她受了很大的苦，因为她自己再困难，都要很好的对别人，即使自己只能喝粥，也要给别人吃肉。弟弟从小不喜欢学习，成绩也一直一般。我成了妈妈唯一的希望和寄托，现在我能深刻地理解她，只是这也确实给我带来了很大的压力，我必须做的很好，不然日子很难过，妈妈对我的严厉程度，直到现在也让我害怕。到了屯溪时的妈妈自行车还不会骑，晕车到一塌糊涂，去什么地方都靠走路，这也苦了我和弟弟。不是因为我们怕走路，是因为汽车对于我们来说是很新奇的东西，想坐车的欲望远远大过怕走路的辛苦。现在回想，妈妈不是怕晕车而走路，她也明白我们想坐车的心情，钱是这其中最大的原因。  &lt;/p&gt;
&lt;p&gt;回到我的小学。因为是山里的孩子，总让人另眼相待。靠着小学校长的关系，把我弄进了那座小学，但是有资历的老师都拒绝接受我，怕我拖累。最终，我进入到了一个刚毕业的女班主任的班级。不管怎么样，我开始了新的生活。徽州十里不同音，何况我离了家那么远。身边的同学说着当地的话，我完全听不懂，所以一下课我就回家，下课上课都很少说话，我只读书，只看书。语言成了我比较大的困扰，我已记不得原来的山村的老师上课用的是什么话，反正普通话确实成了我的障碍。得益于山村的大课堂，即使我在一年级能能同时听到三年级的课。所以，新小学的课程对我而言没有任何难度，而由五年制转到六年制，又降低了一个层次。因此，我很快成了班上第一名的常客，大多时间霸占着这个位置。学习好了，麻烦事也来了，免不掉要在早读时带读之类的事情，而我很多字用普通话不知道怎么发音，印象最深的一次，要读“萝卜”，我实在不知道这个“卜”怎么读，当时怎么读的我忘记了，只记得哄堂大笑，之后也被一些同学笑了很久。那之后，我每次上课都会提心吊胆，害怕什么时候就被老师点起来做什么事情。我是自卑的，跟身边的同学很长的时间内都有天然的鸿沟，而我跨越不过，也从没想过去跨越。学习成了我最大的安慰，考试是我最喜欢的事情，因为考试过后我可以骄傲一次，最重要的，拿着试卷给妈妈看的时候，能让她高兴一段时间。  &lt;/p&gt;
&lt;p&gt;城里的孩子都是有零花钱的。而我从来不会有，也从来没有这个概念。我并不羡慕这个，因为我根本不会买东西，也害怕买东西。直到现在，我还是不会买东西，只要买东西这事情能避免，我都不会去。我也不明白是为什么，我只是不会，不喜欢，不愿意去跟卖东西的打交道。时间久了，身边的同学也对我不错，我也开始有了朋友的概念，他们会请我吃东西，一起玩。虽然我有所变化，但是还是不会多打交道。只有一两个玩的很好的同学。汪是其中最好的一位。那时候他家有彩电，我有空就跑去他家看电视。在他家，我知道了什么是有线电视，什么是电影，什么是球赛。生活开始丰富了，但我最多的时间还是在家里。在家里看书是我最享受的。那时候是最穷的时候，妈妈每天工作10个小时只有10块钱的工资，想想是多么可怕的事情。但是对于买书的事情，她从不含糊，只要我说，总能得到。即使如此，我买的书还是很少的，因为我不会去提那么多的要求。所以，更多的时候我只看着课本，仔仔细细的去完成作业，老师的要求总超量完成。记得刚开始学英语的时候，要抄写单词，我一个单词抄了半本练习本，不知道当时哪里来的那么大的动力。后来我偷偷学会了骑车，便想妈妈给我买个车。妈妈给了一个很苛刻的要求，要我用五个连续的100分来换。这几乎是不可能完成的任务，五个满分，还得连续不断。而5场考试需要的时间也很长，我不知道我是怎么做到的，但是我做到了。自然，妈妈兑现了诺言。我还记得那天爸妈一起带我去买了那辆自行车，回家的路上我骑的飞快，爸爸带着妈妈再后面直喊“慢点，小心”。那样的开心，再没感受过。  &lt;/p&gt;
&lt;p&gt;小学的生活不是很开心的，每天我最害怕的就是上学。总是提着心上学，放学了才放下。第二天心又提起来。班主任是年轻的女生，那是最多20岁左右。但是特别的厉害，罚站，打手，甚至蹲马步等等手段，让我们都很惧怕。虽然我几乎不会被骂，但只要她凶起来还是怕的要死。一次，上奥数的培训。她讲了很久同学们还是没听明白，我是明白了，答对了，但是他们还在喊着一个错误的答案。不明白为什么，老师突然变得特别的可怕，冲下来把所有同学的讲义撕的粉碎，是真的粉碎，然后扔进垃圾桶，之后让我们去捡起来粘好。当我从垃圾桶找出我的时发现，我的只被撕去了很小的一个角。她对我很关照，也可以说是有些偏心的。但我还是很害怕，怕她不知什么时候就会爆发。我还害怕的，是身边那些女同学会不知道什么时候就去告状，虽然我一直比较守规矩，也不至于什么错的事情都不做。一次，同学去游戏厅玩，我也去了。只是好奇，我根本不会玩，也根本没有钱。我只是看了看。在我们出来的时候，被一个女同学看见了。没有例外，班主任知道了，我挨罚了，依稀记得是被打手了，扫把那把手打的，特别的疼。这还不算完，还得叫家长来，我自然不敢叫，也不知道怎么开口，可是当我回到家的时候妈妈已经都知道了。班主任让先回家的女同学已经告诉了我妈妈。之后我，很惨。从那时起，我觉得所有女生都是恶魔，可恨。再不跟他们接触。现在回想，会不自觉的乐，但是对于那时的我来说，这些绝对是噩梦。  &lt;/p&gt;
&lt;p&gt;三年级，也是我进入新小学的第一年，我进了学校的田径队，这件事情完全改变了我之后的生活，直到现在，可能以后也是。我练的是长跑，学校里我是最强的，没有敌手。我完全爱上了这件事情，它带给我很多的快乐，成就感。我特别喜欢超越所有对手，拉开别人很多的距离，第一个到达终点，去领奖的每一个过程。这爱就此刻下，再抹不去。妈妈害怕了，这完全偏离了她的初衷，她害怕这会影响我的学习，虽然每次比赛她都会物质支持，但是一直在反对我参加，一有事情就会说，考试稍微一差就会说。也许是我开始长大，也许是我实在太喜欢跑步，我开始了跟她的对抗，这是之前从来没有的，虽然我一直倔强。我依然参加训练，参加比赛。六年级的时候，参加市里的元旦环城越野，140多人参加。那天妈妈也去了，当我第一个到达终点的时候，老师，观众都开始对我夸赞，我看到了妈妈脸上有自豪的感觉，但也就是那么一会。妈妈的信念永远是坚定的。而获得训练和比赛的机会是很难的，我必须保证我的学习不出岔子，这样妈妈才不会说，也只有这样我才能去参加。所以，我必须花更大的精力在学习上，保证能去做自己想做的事情。学习和跑步，给了我戴上了光环，老师和同学对我另眼相待，我喜欢这种感觉，也自己默默承受着这背后的难。我爱。也就在那个时候，我心里叫做梦想的种子开始慢慢的萌发。  &lt;/p&gt;
&lt;p&gt;时间总是很快。四年时间过去，我进入了最大的转变时期，中学。带着压力总是做不好事情的，升初中的考试，妈妈的各种嘱咐让我考试时倍感沉重，最终数学没考到满意的成绩。但是凭借英语满分和很高的语文成绩，也算名列前茅。那时候是有重点班之说的，但是大家都懂的原因，我没进入重点班。我进入了一个神奇的班级，7班。班上的同学都很大胆和调皮，跟老师作对的程度让我叹为观止。但他们都不是社会上混混那样的，只是调皮。生活开始变得跟小学完全不一样，每天都很开心，我也不害怕上学了。班主任也是个年轻的女班主任，完全管不住我们，只有教政治的教导主任上课的时候，才能完全镇住，才能算得上是个课堂。其他的老师都被我们整的很惨，我是班长，我亲眼在办公室看到班主任被我们气的流泪。班主任刚毕业，也很累，要带6个班级的课，又是地理老师，一个礼拜给我们上不了几次课。很长一段时间，放学都成了我的权力。这个班级可能创造了学校甚至中国历史上的一个先例，我不确定。在初二到初三的时候，学校实在管不了了，就拆了这个班，把同学都分散到其他的班级中。从此，学校中初三没有7班，6班之后直接到8班。这成了之后我们一直的谈资。  &lt;/p&gt;
&lt;p&gt;那时候，我已经适应了环境，也开始进入青春期，变得叛逆。很多时候也加入他们的整蛊活动，我亲自绊过英语老师一个大跟头。那时候，英语书中有一个人物叫“Lintao”，正好跟我名字相同，每次读到，同学们就起哄。而老师喊上课的时候，我总装没听见，不喊起立。英语老师这时候总喜欢说“Who is the monitor！”。这这时，我就会被哄起来了。虽然我跟他们一起闹，也还是会比较认真的学习，认真的训练。那时候由于班级差，导致很久我数学考80多分都会是班级第一名，但在老师眼里，我还是个好学生。一次爸爸去学校，数学老师还专门拉他到一边说，要好好培养我。后面好像还有想办法给我转个班级之类的。但是那时候转班级全靠人际关系，我哪里有可能。当时，很多的学习较好的学生，都陆陆续续转到别的班级了，但是我一直留在那里。我一直觉得那些同学都是很好的人，只是他们不喜欢读书，没有坏心。他们也改变了我，让我胆子渐渐变大，很多事情不再害怕。因为学校的建设，一段时间，我们一个班级被放在实验楼的顶楼，那里只有我们一个班级。同学们特别的疯狂，最胆战心惊的是，有好几个居然爬到走廊的扶手上去走，跟走钢丝一样，那是6楼，我不知道他们哪里来的胆子。有一个同学，还只用手拉住扶手，整个身体全在外面，我想如果那个时候稍一泄力，他一定摔得没有全尸。就是这一大班神奇的孩子。我也有过惊心动魄的事情，一次早读，我在巡查。一同学让我去开窗，结果，我一推窗，居然掉下去了。从六楼摔到马路边上，还好是早上，还好那时街上没有人。而那些没心没肺的同学还乐，一班人呼呼的跑下楼，把那个摔的变形的窗户给抬了上来。大家会去买西瓜，买回来大家分，吃的昏天暗地，黑板上到处都是西瓜。初二下，要考试分班级了，学习好的会被选出来进入重点班，原来的重点班差的学生会被分出来。我进入了重点班，其他的同学大多被分散到各个差班去了，那之后见面的机会就少了，直到现在。但是他们应该跟我一样，那段神奇的岁月永远都会记得。 &lt;/p&gt;
&lt;p&gt;初中妈妈定期会给我些钱，给我做防备。而每次我都会去买书。那段时间是我阅读量最大的一段时光。我爱看的东西跟同龄人很不一样。我看完了余秋雨的所有书，川端康成的书，大量苏联的名著，还有很多村上春树，朱自清的散文等等这类的经典书籍，也有少量的青春文学，很少，依稀记得的只有韩寒的几本和郭敬明的《幻城》。一次我拿着一本《孟子选注》到学校看，大馍看到了，一直说“不要告诉别人我认识你”。呵呵，是有些奇怪。我喜欢的东西总跟身边的人有较大的出入，很多时候也导致我跟他们缺少共同的语言。我还记得，那时候有一本杂志叫《散文海外版》，双月刊，每次一出我就去买，买来就反复看，然后焦急地等待下一期。这样坚持了2年多，几次改版我都经历了。后来，校门口的那家书刊店没了，我也没有了买的途径。一直郁闷不已。就这样，我一直活在自己的世界里，以书为伴，还会自己写很多的东西，后来经历搬家和被自己扔掉一些，现在都找不到了。很是遗憾。那些日子很舒服，我喜欢安静，不爱说话，而书是最好的寄托和陪伴。现在很想再回到那样的时光，安安静静的读上几本。&lt;/p&gt;
&lt;p&gt;那个时候，我叛逆了，也勇敢了，也稍微开朗了，更重要的，我的梦想完全出来了。我喜欢体育，我喜欢文字，所以我想做这个，我想做一名体育记者之类的。我觉得，其实很小的就有了这个梦，只是那时候还不清晰。现在我完全明白了，我该做什么，也不怕妈妈的阻挠，我会反抗，这导致我和妈妈的关系一直很僵。那时，我每天早上很早会去训练，训练完去学校上学，下午两节课后又会去训练。在体校，随着系统的训练，竞技水平增长的很快。开始参加各类高级别的比赛，还曾进过全省的前10名。学校运动会成了我最大的舞台，一次比赛过后会让很多人都认识到我。虽然如此，还是会遇到很多麻烦。妈妈是不支持的，教练也叫我要保证学习成绩，训练倒不要紧。是的，所有的人都对体育运动有着偏见，认为那是学习实在没办法的人才会去做的事情，也成为差生的代名词。虽然事实也是如此，但是我还是想这样，我还是想考北体这样的大学，虽然一直希望很大，自己也有信心，但是直到现在也没有实现，也永远不会再实现了。初三，我还是彻底放弃了训练，而那时是我成绩最好的时候。我开始学习，这其中的一次运动会，班主任也支持我要我去参加，原因却是拿个名次对于以后的的升学很有帮助。我短暂的回到训练场，比赛之后又离开。初三有了很好的老师和氛围，我的学习恢复正常，妈妈也高兴了。到了临近中考，我也因为重点高中需要我去帮他们比赛而提前有了录取，但我没告诉妈妈。还是参加了中考，没有压力的考试能很好的发挥，我以优异的成绩毫无悬念的被录取了。但初三给我的感觉不深，比较平淡，唯一的就是认识了小马这个好朋友。  &lt;/p&gt;
&lt;p&gt;高中开学的时候我正跟着高中的老师出去比赛，没有参加学校的军训。回到学校的时候是大家都上课了。开始的班主任是个很有意思的人，好像很喜欢我。可能因为城市小，大多的同学见过的没见过的很多都知道我了。第一次选举班干，我得票最高，虽然几乎都没跟他们有所接触。我没有再去做班长，我选了体育委员这个我更喜欢的职位。班主任的口音很有意思，数字3的发音很好玩，我们一直模仿来找乐子。而且他的嗓子一直不好，一段时间就会失声一次，当他失声后还来上课的时候，就很好玩了。到了冬天，早上别人在早读，他会让我带着大家去操场跑步。有篮球赛和运动会他也非常的热情高涨，放自习时间给我们去练习，其实大家都跑去玩了。这样开明的老师，对学生也很好的老师我很喜欢，他也获得了大家的喜爱，虽然教学水平让人有些诟病。一个学期之后，就分科了，他教的是文科班。我学理科，就离开了，去了一个给了我一辈子财富的班级。  &lt;/p&gt;
&lt;p&gt;新的班级有很多都是熟人，有从小一起认识和训练的朋友阿伟，有初中就关系很好程天，有初中的同学大馍，还有高中也开始认识的同学。还有一大班的很有意思的人。他们大多成了我很好的兄弟和朋友，也会是一辈子的兄弟和朋友。我的班一直是学校里很耀眼的班级，学习好的很多，运动会三连冠，闹事也总少不了我们。在任何时候，总会以各种身份出现在大家的视野中。我们做什么事情都一起，有事情也一起扛，凝聚力非常的可怕。我们一起打球，一起闹。跟他们一起的时候是最开心的，可以推心置腹，也可以胡搅蛮缠，什么都能说，什么都能做，彼此之间也都了解。现在每次回去最想的就是和他们聚在一起，吃饭，喝酒，聊生活，聊事业，聊未来，聊女人。一个人在外面，想的最多的也是他们，有事情了第一反映就是找他们扯扯。虽然我不玩游戏，不会打牌，跟他们少了很多共同的话题，但他们完全改变了我。从一个沉默寡言的人变得可以侃侃而谈。有了困难，告诉他们，总会有反应，旺财曾经一段时间成了我的垃圾桶，也开导了我很多。他们，是我一辈子的兄弟。  &lt;/p&gt;
&lt;p&gt;最开心的三年，一场考试大家分开了。我高考失利，虽然还能上我一直想的体育大学，但是妈妈坚持不让，我留下了。而他们，好几个也同时留下了。哈哈。也许这就是有难共担？大学之后，大家见的少了，但是离的近的还是会到处跑跑，出去逛。而就算不见面，一切依然。高中就这么结束了，也结束了那无比珍贵的岁月，我开始进入最痛苦的时期。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sun, 24 Mar 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-03-24:20-more-years.html</guid><category>memories</category></item><item><title>告别IM</title><link>http://blog.everlose.com/bye-im.html</link><description>&lt;p&gt;就在刚才，决定停用一切IM工具，删了手机QQ，微信因为割舍不下那些公众号的好文章保留了，也算给自己一个增强自制的机会。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;已经拥有一双会流泪的眼睛，祈祷能拥有一颗透明的心灵。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直在从他人处寻找自己，一直抱着希望，直到今天才知道这是多么愚蠢的事情。自从开始整日以电脑为伴的生活，情况愈加严重。互联网让我失去了面对人时的害羞与怯懦，一来二往，开始什么都往外掏，喝高了一样。糟糕的是还期望着能得到回应，或者得到解决疑惑的方法。这是不可能的。  &lt;/p&gt;
&lt;p&gt;一直以为是世界太疯狂，实际是自己太变态。确实想找到理解自己的那个人，无奈自身三观跑偏十万八千里。如履薄冰的慢慢掏出想说的话，最终失去两个唯一的失望。想回到儿时，以书、狗为伴。  &lt;/p&gt;
&lt;p&gt;哥们均已长大，有各自的生活、工作与娱乐。只有我整日在网上挂着，并沉迷其中。我一天醒着就在电脑前，不会错过任何一条通过网络传来的消息。使用打字代替说话，让我更快速并乐于表达，且没有时间概念，我知道这会让他人产生压力。而总想着从别人处寻找自己，对他们很不公平。信息如此发达的当下，我创造的没一个字符对他们来说都是信息噪。而自己，也总会因聊天中找不到自我而陷入混乱。  &lt;/p&gt;
&lt;p&gt;移动时代，永不掉线，让自我的时间线处在随时被打断的状态。孤单让我乐于与任何愿意与我聊天的人说话，有了网络的保护，我总会失去防护。无法辨别那头人的状态，总让我容易出离话题。  &lt;/p&gt;
&lt;p&gt;决定告别IM，意味着可能失去朋友间少得可怜的偶尔交流，我再次埋进自我的世界。可以说我逃避现实，说什么都可以，而我实在明白，我的很多东西只有自己去消化。  &lt;/p&gt;
&lt;p&gt;我何尝不想遇到任何事情，可以跟他人有同样的想法与处理方式，但是我实在是想不到。不管变成什么样儿，我还有文字可以托付。  &lt;/p&gt;
&lt;p&gt;我会获得更连贯的时间，更专注的精力。我是一个人，而何时不是呢。这才是我想逃避的。好吧，还是接受的好。  &lt;/p&gt;
&lt;p&gt;我有电脑，我有code，我有文字。未来等我。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 02 Mar 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-03-02:bye-im.html</guid><category>memories</category></item><item><title>Postgresql 数据库导入与导出</title><link>http://blog.everlose.com/postgresql-export-import.html</link><description>&lt;p&gt;导入:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql -d database_name -U username -f file.sql  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导出:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pg_dump -U username -d database_name -f file.sal
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Fri, 01 Mar 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-03-01:postgresql-export-import.html</guid><category>postgresql</category></item><item><title>在BAE中部署Django</title><link>http://blog.everlose.com/bae-django-deployment.html</link><description>&lt;p&gt;之前做了个网站的demo，前日有空，便想弄到bae上试试。其实，部署起来并不复杂，但是限于自己的水平，又是第一次做部署的事情，其中还是遇到很多的麻烦，弄了很久才成功。完成后想想，其实都是些很小细节上出错。今天记录点东西，便于自己日后查阅，也希望能给一些朋友带来些帮助。  &lt;/p&gt;
&lt;p&gt;首先，我们需要一个bae的账号，由于bae还是内测，要用python需要激活码，这个大家可以发邮件索取或者等着bae放码的时候去抢一个。这些不多说。  &lt;/p&gt;
&lt;p&gt;拥有账号后，进入bae，创建一个应用，语言选择python，然后创建一个版本，之后会获取一个svn地址。bae是使用svn进行代码的上传和管理的，所以如果不懂svn的话，先学下咯，然后在电脑上安装好svn。这些都不多说啦。bae上有相关的文档。    &lt;/p&gt;
&lt;p&gt;使用svn将代码checkout到本地。接下来就要开始部署的工作啦。(下面的文字摘自bae文档，可以前往这个地址地址查看。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Django&lt;br /&gt;
   BAE预装了Django 1.4版本。如果您需要将基于Django的应用移植到BAE环境中，需要注意如下事项：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CACHE  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Cache后端只支持memcache；  &lt;/li&gt;
&lt;li&gt;通过bae.core.const.CACHE_ADDR获得Cache地址；  &lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;配置示例  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.core.cache.backends.memcached.MemcachedCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;LOCATION’: const.CACHE_ADDR,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;TIMEOUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;DATABASE    &lt;/li&gt;
&lt;li&gt;DATABASE后端目前只支持MySQL；  &lt;/li&gt;
&lt;li&gt;从bae.core.const中获取host, port, user, password；&lt;/li&gt;
&lt;li&gt;请通过BAE管理界面，使用PHPMyAdmin来管理维护database, table;    &lt;blockquote&gt;
&lt;p&gt;配置示例  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   from bae.core import const
   DATABASES = {
   'default': {
   'ENGINE': 'django.db.backends.mysql',
   'NAME': 'cluster11db3',
   'USER': const.MYSQL_USER,
   'PASSWORD': const.MYSQL_PASS,
   'HOST': const.MYSQL_HOST,
   'PORT': const.MYSQL_PORT,
    }
   }&lt;/code&gt;   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MAIL  &lt;/li&gt;
&lt;li&gt;MAIL后端请选用BAE新增的BCMS backend；  &lt;/li&gt;
&lt;li&gt;必须配置EMAIL_BCMS_QNAME。可从BAE管理界面上获取bcms_qname；  &lt;blockquote&gt;
&lt;p&gt;配置示例  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   EMAIL_BACKEND = 'django.core.mail.backends.bcms.EmailBackend'
   EMAIL_BCMS_QNAME = '13fe1db4a291e6a57574071e8ff3a52c'&lt;/code&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SESSION  &lt;/li&gt;
&lt;li&gt;SESSION后端支持Cache backend和DB backend；&lt;/li&gt;
&lt;li&gt;Cache backend是基于Cache实现的，因此必须配置前述与Cache相关的选项;&lt;/li&gt;
&lt;li&gt;DB backend是基于MySQL实现的，因此必须配置前述跟DATABASE相关的选项;  &lt;blockquote&gt;
&lt;p&gt;配置示例  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
   ###或者
   SESSION_ENGINE = 'django.contrib.sessions.backends.db'&lt;/code&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ADMIN  &lt;/li&gt;
&lt;li&gt;在项目目录下创建static目录；  &lt;/li&gt;
&lt;li&gt;从Django1.4源码中，将&lt;code&gt;django/contrib/admin/static/admin&lt;/code&gt;目录拷贝到刚创建的static目录下；  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改app.conf，加入对静态文件的支持； &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LOGGING   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Django使用Python标准库中的logging模块用于日志输出；logging 模块在默认情况下将日志输出到stderr;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置&lt;code&gt;WSGIApplication(app, stderr=”log”)&lt;/code&gt;，将输出到标准出错的日志，重定向到BAE日志服务器。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发示例  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面以Django官方网站的示例程序为例，介绍如何在BAE环境中创建Django应用。该示例用到了MySQL服务。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;步骤一： 在本机创建Django项目并调试通过。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;您需要在自己的开发机上安装Python2.7.2、Django1.4、MySQLdb；  &lt;/li&gt;
&lt;li&gt;创建工作目录:mkdir django_root &amp;amp;&amp;amp; cd django_root；  &lt;/li&gt;
&lt;li&gt;按照Django开发指南的描述，在本机建立Django Demo项目，并在本地调试通过；  &lt;/li&gt;
&lt;li&gt;完成turorial 1-4后，目录结构如下：   &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;django_root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;djangodemo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;djangodemo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;polls&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;polls&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中templates目录用来保存模板相关的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;步骤二： 将项目移植到BAE。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在BAE上创建一个Python项目Django Demo；  &lt;/li&gt;
&lt;li&gt;创建一个版本，然后通过SVN将项目更新到自己的开发机上；  &lt;/li&gt;
&lt;li&gt;将第一步创建的Django项目拷贝过来，步骤如下：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd djangodemo
ls -l ###目录下应该有index.py, app.conf, favicon.ico三个文件；
cp -R XXX/django_root/djangodemo/*
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;从Django1.4安装目录，或者源码目录，将Admin相关的静态文件拷贝过来:   &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p static
cp -R DJANGO_SOURCE/django/contrib/admin/static/admin static/  
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;修改settings.py，使用BAE环境提供的MySQL数据库，并通过BAE管理界面提供的PHPMyAdmin来创建 database和table。  &lt;/li&gt;
&lt;li&gt;修改index.py，修改后的index.py如下所示：  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;djangodemo.settings&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/djangodemo&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bae.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;修改app.conf，增加对静态文件的支持。修改后的app.conf如下所示：  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;handlers:   
- url : /static/(.*)   
script : /static/$1   
- url : /.*   
script : index.py
- expire : .jpg modify 10 years
- expire : .swf modify 10 years
- expire : .png modify 10 years
- expire : .gif modify 10 years
- expire : .JPG modify 10 years
- expire : .ico modify 10 years
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成上述步骤后，就可以访问您的Django应用了。  &lt;/p&gt;
&lt;p&gt;其实，按照如上的步骤部署一个简单的django应用足够了。实质上，就是几个文件的配置而已，其中一些代码需要根据自己的实际情况进行相应的修改。下面给出一些我的一些相关配置文件。  &lt;/p&gt;
&lt;p&gt;代码结构如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;appidxxxx (checkout下来的文件目录）
    |____1 (checkout下来的版本号)
        |____yukiyam (这是你的项目，整体复制到这里吧)
            |____account
            |____blog
            |____static
            |____templates
            |____yukiyam
            |____manage.py
            |____app.conf
            |____index.py
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;index.py:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yukiyam.settings&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#settings文件&lt;/span&gt;
&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/yukiyam&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bae.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/.*&lt;/span&gt;
  &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swf&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JPG&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;settings.py:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Django settings for yukiyam project.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bae.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="c1"&gt;#导入bae的const&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;
&lt;span class="n"&gt;base_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HERE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#加这句&lt;/span&gt;
&lt;span class="n"&gt;HERE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HERE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#加这句&lt;/span&gt;
&lt;span class="n"&gt;ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="c1"&gt;# (&amp;#39;Your Name&amp;#39;, &amp;#39;your_email@example.com&amp;#39;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MANAGERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADMINS&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#bae目前只支持mysql&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;数据库名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#在bae中使用mysql后你会获取到数据库名&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 使用const获取bae上mysql数据库用户名&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MYSQL_PASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 获取密码&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MYSQL_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 获取host&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MYSQL_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 获取端口&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.core.cache.backends.memcached.MemcachedCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CACHE_ADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;TIMEOUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions.backends.cache&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Local time zone for this installation. Choices can be found here:&lt;/span&gt;
&lt;span class="c1"&gt;# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name&lt;/span&gt;
&lt;span class="c1"&gt;# although not all choices may be available on all operating systems.&lt;/span&gt;
&lt;span class="c1"&gt;# In a Windows environment this must be set to your system time zone.&lt;/span&gt;
&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Language code for this installation. All choices can be found here:&lt;/span&gt;
&lt;span class="c1"&gt;# http://www.i18nguy.com/unicode/language-identifiers.html&lt;/span&gt;
&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zh-cn&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LANGUAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zh-cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;简体中文&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;English&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SITE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# If you set this to False, Django will make some optimizations so as not&lt;/span&gt;
&lt;span class="c1"&gt;# to load the internationalization machinery.&lt;/span&gt;
&lt;span class="n"&gt;USE_I18N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;# If you set this to False, Django will not format dates, numbers and&lt;/span&gt;
&lt;span class="c1"&gt;# calendars according to the current locale.&lt;/span&gt;
&lt;span class="n"&gt;USE_L10N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;# If you set this to False, Django will not use timezone-aware datetimes.&lt;/span&gt;
&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;# Absolute filesystem path to the directory that will hold user-uploaded files.&lt;/span&gt;
&lt;span class="c1"&gt;# Example: &amp;quot;/home/media/media.lawrence.com/media/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# URL that handles the media served from MEDIA_ROOT. Make sure to use a&lt;/span&gt;
&lt;span class="c1"&gt;# trailing slash.&lt;/span&gt;
&lt;span class="c1"&gt;# Examples: &amp;quot;http://media.lawrence.com/media/&amp;quot;, &amp;quot;http://example.com/media/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Absolute path to the directory static files should be collected to.&lt;/span&gt;
&lt;span class="c1"&gt;# Don&amp;#39;t put anything in this directory yourself; store your static files&lt;/span&gt;
&lt;span class="c1"&gt;# in apps&amp;#39; &amp;quot;static/&amp;quot; subdirectories and in STATICFILES_DIRS.&lt;/span&gt;
&lt;span class="c1"&gt;# Example: &amp;quot;/home/media/media.lawrence.com/static/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# URL prefix for static files.&lt;/span&gt;
&lt;span class="c1"&gt;# Example: &amp;quot;http://media.lawrence.com/static/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Additional locations of static files&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="c1"&gt;# Put strings here, like &amp;quot;/home/html/static&amp;quot; or &amp;quot;C:/www/django/static&amp;quot;.&lt;/span&gt;
&lt;span class="c1"&gt;# Always use forward slashes, even on Windows.&lt;/span&gt;
&lt;span class="c1"&gt;# Don&amp;#39;t forget to use absolute paths, not relative paths.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;django.contrib.staticfiles.finders.DefaultStorageFinder&amp;#39;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOGIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/login/&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Make this unique, and don&amp;#39;t share it with anybody.&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6r!w4*+w@4zj()tdcr1eyifx4^md=a&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_LOADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.template.loaders.filesystem.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.template.loaders.app_directories.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;django.template.loaders.eggs.Loader&amp;#39;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment the next line for simple clickjacking protection:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yukiyam.urls&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yukiyam.wsgi.application&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HERE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#这句代码非常重要，否则无法找到 settings文件&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.sites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="c1"&gt;# Uncomment the next line to enable the admin:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;django.contrib.admin&amp;#39;,&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment the next line to enable admin documentation:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;django.contrib.admindocs&amp;#39;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;yukiyam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PASSWORD_HASHERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth.hashers.PBKDF2PasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth.hashers.BCryptPasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth.hashers.SHA1PasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth.hashers.MD5PasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.contrib.auth.hashers.CryptPasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;disable_existing_loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;require_debug_false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.utils.log.RequireDebugFalse&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;mail_admins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;require_debug_false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.utils.log.AdminEmailHandler&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mail_admins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置完如上这些之后，使用svn将代码上传到bae上，就可以通过预览查看自己的页面啦。注意，一定要上传正确。由于我受git影响，初次没有使用svn add *，导致没有将所有的代码上传，白白折腾了很久。通过这次部署，我意识到，基本的知识是很重要的，此外，认真的阅读文档也是必要的一步，磨刀不误砍柴工。  &lt;/p&gt;
&lt;p&gt;好了，以上就是简单的部署过程。good luck。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Tue, 26 Feb 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-02-26:bae-django-deployment.html</guid><category>django</category><category>bae</category></item><item><title>U盘中安装Linux Deepin</title><link>http://blog.everlose.com/deein-in-flash-disk.html</link><description>&lt;p&gt;一直想在U盘中安装一个系统，这样我就可以带着到处走，只要有电脑我就可以使用我自己的系统。如今的U盘容量越来越大，加上3.0的普及，速度也不再是问题。趁着过年回家的空闲，在mac下完成了在3.0接口16gU盘安装国内的一款linux发行版，Linux Deepin。  &lt;/p&gt;
&lt;p&gt;过程非常的顺利,需要注意的就是一点，将bootloader安装在U盘中，这样使用U盘启动的时候会有几个选项，而在使用电脑自身硬盘启动的时候不会出现几个选项。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;准备:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装盘一个，可以是U盘启动盘或者光盘等。我使用的是U盘启动盘，这样速度比较快。  &lt;/li&gt;
&lt;li&gt;空白U盘一个，最好是3.0接口，根据需求选择容量，当然越大越好呵呵。我选择的是8g的3.0接口U盘。  &lt;/li&gt;
&lt;li&gt;pc一台。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将2个U盘都接上电脑，启动电脑，进入bios选择从U盘启动。&lt;/li&gt;
&lt;li&gt;进入安装过程，选择空白的U盘，格式化成ext4格式，挂在/。既然是在U盘中安装，我觉得就没必要分区了，也没必要划分swap分区，因为如今的内存都比较大，无swap的影响不大，也可以延长U盘的寿命。&lt;/li&gt;
&lt;li&gt;选择将bootloader安装在U盘中，这样的好处前面已经说过。&lt;/li&gt;
&lt;li&gt;其他的安装过程与硬盘安装完全相同。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;启动：安装完后，在启动时，首先进入bios，选择从U盘启动，就能进入U盘中的系统啦。非常的方便。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，有必要推荐下&lt;em&gt;Linux Deepin&lt;/em&gt;这个发行版，基于ubuntu，很好的继承了易用性，安装也非常的方便。而国内制作的发行版，默认安装了fcitx输入法，并且在软件中心中也有各种winQQ和webQQ等国人离不开的软件。可以直接安装，免去了不必要的折腾。非常的方便，另外，界面UI非常的漂亮，有mac的风范。  &lt;/p&gt;
&lt;p&gt;推荐大家使用。 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Tue, 12 Feb 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-02-12:deein-in-flash-disk.html</guid><category>deepin</category></item><item><title>CentOS下mysql的安装与配置</title><link>http://blog.everlose.com/centos-mysql.html</link><description>&lt;p&gt;今天在centOS6.2下使用yum install mysql安装了mysql后一直报错，无法链接数据库，之后搜索了很多国内的文章，千篇一律，而且没有解决我的问题。折腾了好久，最终还是使用英文搜索，找到了centOS的官方帮助文档，按照文档走一遍，很快解决了问题，并且学到了不少知识。这里记下，便于日后学习。
PS：还是直接看英文文档靠谱啊！&lt;/p&gt;
&lt;p&gt;适用centos版本：
centos 5.x
centos 6.x&lt;/p&gt;
&lt;p&gt;需要用root权限进行操作，并且yum和rpm要求已经安装。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;步骤：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装mysql mysql-server  &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#yum install mysql mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注：直接#yum install mysql-server的话，mysql也会被安装，保险起见还是按照原命令执行  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动mysql server的daemon(mysqld)  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#chkconfig --level 2345 mysqld on;service mysqld start
注：这其实是两个命令，第一个检查配置，后一个启动mysqld  
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;以root用户登录mysql  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mysql -u root  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认没有密码  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除所有所有不是root的用户  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; delete from mysql.user where not (host=&amp;quot;localhost&amp;quot; and user=&amp;quot;root&amp;quot;);
mysql&amp;gt; flush privileges;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;安装好后默认root是没有密码的，修改root的密码  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; set password for &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; = password(&amp;#39;yourpassword&amp;#39;);
mysql&amp;gt; flush privileges;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;修改root的名称，让他难以被猜到来提高安全性，就是说，给root换一个名称  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; update mysql.user set user=&amp;quot;myadmin&amp;quot; where user=&amp;quot;root&amp;quot;;
mysql&amp;gt; flush privileges;  
注：这里的myadmin是要给root换的名称，自己指定  
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;移除匿名用户使用数据库的记录  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; delete from mysql.user where user=&amp;#39;&amp;#39;;
mysql&amp;gt; flush privileges;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;添加新的管理员用户  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; grant all privileges on *.* to &amp;#39;username&amp;#39;@&amp;#39;localhost&amp;#39; indentified by &amp;#39;password&amp;#39; with grant option;
mysql&amp;gt; flush privileges;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;给特定数据库添加用户，以‘bugzilla’数据库名为例  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; grant all privileges on bugzilla.* to &amp;#39;username&amp;#39;@&amp;#39;localhost&amp;#39; identified by &amp;#39;password&amp;#39;;
mysql&amp;gt; flush privileges;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;添加数据库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; create datebase datebasename;
mysql&amp;gt; flush privileges;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上是常用的几项，还有一些可以查看centos关于mysql的&lt;a href="http://centoshelp.org/servers/database/installing-configuring-mysql-server/"&gt;帮助文档&lt;/a&gt;。   &lt;/p&gt;
&lt;p&gt;http://centoshelp.org/servers/database/installing-configuring-mysql-server/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Sat, 12 Jan 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-01-12:centos-mysql.html</guid><category>mysql</category></item><item><title>virtualenv学习</title><link>http://blog.everlose.com/python-virtualenv.html</link><description>&lt;h3&gt;virtualenv ENV 创建虚拟环境&lt;/h3&gt;
&lt;p&gt;会创建&lt;code&gt;/ENV/lib/pythonX.X/site-packages&lt;/code&gt;，之后所安装的所有包都会再这个目录中。同时也会创建&lt;code&gt;/ENV/bin/python&lt;/code&gt;，即这个环境中都会使用这个python解释器，在文件加上&lt;code&gt;#! /path/to/ENV/bin/python&lt;/code&gt;，则该脚本就会使用该解释器执行。  &lt;/p&gt;
&lt;p&gt;同时，也会安装Setuptools或者distribute在这个环境中，如下使用:
&lt;code&gt;$ python virtualenv.py -- distribute env&lt;/code&gt;&lt;br /&gt;
在虚拟环境中也安装了pip，用来安装包。&lt;/p&gt;
&lt;p&gt;新创建的虚拟环境中有一个&lt;code&gt;/bin/activate&lt;/code&gt; 脚本，使用&lt;code&gt;$source bin/activate&lt;/code&gt;运行脚本。这会修改终端提示符&lt;code&gt;shell prompt&lt;/code&gt;来标识哪个虚拟环境正在使用，会改变$PATH,进入虚拟环境的 bin/ 目录，这是为了方便，也可以使用虚拟环境的目录来执行脚本，如：&lt;code&gt;path/to/env/bin/python script.py&lt;/code&gt;来执行也是一样的，这样就不需要执行activate脚本，但是这样会很不方便。&lt;/p&gt;
&lt;h3&gt;–system-site-packages 选项&lt;/h3&gt;
&lt;p&gt;如果使用 &lt;code&gt;virtualenv --system-site-packages ENV&lt;/code&gt;创建虚拟环境，则虚拟环境会使用系统的包，如&lt;code&gt;/usr/lib/python2.7/site-packages&lt;/code&gt;，当想虚拟环境使用系统的包的时候，可以这么做，但是如果想创建一个完全隔离的虚拟环境，就不要这么做。我一般不会使用这个选项，那样的可以保持系统环境的干净，既然要使用系统环境中的很多包，那么就不需要创建虚拟环境，直接在系统环境中开发就好了。  &lt;/p&gt;
&lt;h3&gt;环境变量和配置文件&lt;/h3&gt;
&lt;p&gt;使用名称格式如：&lt;code&gt;VIRTUALENV_&lt;/code&gt; 可以在系统中设置使用虚拟环境中的环境变量：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;VIRTUALENV_DISTRIBUTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着使用命令：
&lt;code&gt;$ python virtualenv.py ENV&lt;/code&gt;
的效果与 &lt;code&gt;$ python virtualenv.py --distribute ENV&lt;/code&gt;相同。
同样，  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;VIRTUALENV_EXTRA_SEARCH_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path/to/dists /path/to/other/dists&amp;quot;&lt;/span&gt;
$ virtualenv ENV
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;与  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python virtualenv.py --extra-search-dir&lt;span class="o"&gt;=&lt;/span&gt;/path/to/dists --extra-search-dir&lt;span class="o"&gt;=&lt;/span&gt;/path/to/other/dists ENV  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果相同.&lt;/p&gt;
&lt;p&gt;＊nix系统中配置文件为:&lt;code&gt;$HOME/.virtualenv/virtualenv.ini&lt;/code&gt;,使用&lt;code&gt;virtualenv --help&lt;/code&gt;可以查看所有的选项。  &lt;/p&gt;
&lt;p&gt;配置文件中的内容为：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[virtualenv]&lt;/span&gt;
&lt;span class="na"&gt;distribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="err"&gt;添加多行的配置可以如下：&lt;/span&gt;
&lt;span class="k"&gt;[virtualenv]&lt;/span&gt;
&lt;span class="na"&gt;extra-search-die&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;  /path/to/dists&lt;/span&gt;
&lt;span class="s"&gt;  /path/to/other/dists&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;virtualenv可以按照自己的需求修改启动脚本，具体参见文档&lt;a href="http://www.virtualenv.org/en/latest/"&gt;Creating Your Own Bootstrap Scripts&lt;/a&gt;,上面有具体例子。  &lt;/p&gt;
&lt;h3&gt;使虚拟环境可移植[windows下该功能不可用]&lt;/h3&gt;
&lt;p&gt;一般虚拟环境会绑定到特定的路径，这就意味着不能移动该虚拟环境或者复制到另外的电脑中，可以使用以下命令来使虚拟环境可移植:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv --relocatable ENV   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这会使一些用setuptools安装的文件和distribute使用相对路径，也会使用activate_this.py脚本代替使用所选择的虚拟环境中的python解释器。
注意：必须在安装了所有包到虚拟环境中之后运行该命令，如果安装了新包，则需要再运行一次。但是，虽然这样可以使虚拟环境可以移植，但是不意味着可以跨平台。也就是说，如果是linux中的虚拟环境只能移植到linux平台下。&lt;/p&gt;
&lt;h3&gt;–extra-search-dir 选项&lt;/h3&gt;
&lt;p&gt;一般创建的时候，当虚拟环境安装好，会使用&lt;code&gt;virtualenv_support&lt;/code&gt;目录下所绑定的包。但是单独执行&lt;code&gt;virtualenv.py&lt;/code&gt;创建的时候&lt;code&gt;virtualenv_support&lt;/code&gt;是不可用的。  &lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;–extra-search-dir&lt;/code&gt;选项来制定包的位置，避免从网上下载。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv --extra-search-dir&lt;span class="o"&gt;=&lt;/span&gt;/path/to/distributions ENV  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;路径 &lt;code&gt;/path/to/distributions&lt;/code&gt; 指的是包含&lt;code&gt;setuptools,distribute&lt;/code&gt;和&lt;code&gt;pip distributions.
setuptools&lt;/code&gt;的&lt;code&gt;distributions是.egg&lt;/code&gt;文件，pip的distributions是.tar.gz源文件，而distribute两者都可能，如果有.egg文件则优先使用.egg文件.
如果制定的目录中也没有相应的包，则还是会从网上下载，如果想永远不下载，则可以使用
&lt;code&gt;--never-download&lt;/code&gt;选项，如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv --extra-search-dir&lt;span class="o"&gt;=&lt;/span&gt;/path/to/distrubutions --never-dowoad ENV  
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Wed, 09 Jan 2013 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2013-01-09:python-virtualenv.html</guid><category>virtualenv</category></item><item><title>The _imagingft C module is not installed问题的解决</title><link>http://blog.everlose.com/python-pil-_imageingff-problem.html</link><description>&lt;p&gt;给一个web项目添加了验证码，而图片无法显示，报错: &lt;code&gt;ImportError: The _imagingft C module is not installed&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;项目放在virtualenv下，安装了pillow，依然报错。一翻搜索之后找到了解决方法，缺少一些依赖包。  &lt;/p&gt;
&lt;p&gt;首先卸载pillow和PIL(如果安装了的话)，然后进入virtualenv下的site-packages中，我的是&lt;code&gt;$WORKON_HOME&lt;/code&gt;，确认与PIL和pillow的相关文件已经被删除，如果还存在，可选择手动删除。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip uninstall pillow  
pip uninstall PIL  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装相关依赖  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms1-dev libwebp-dev python-dev  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在virtualenv中安装pillow  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pillow  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启服务，搞定。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">木头lbj</dc:creator><pubDate>Wed, 22 Feb 2012 00:00:00 +0800</pubDate><guid>tag:blog.everlose.com,2012-02-22:python-pil-_imageingff-problem.html</guid><category>python</category><category>pil</category></item></channel></rss>